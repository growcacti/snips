#!/usr/bin/env python3
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox as mb
from tkinter.filedialog import askopenfilename, asksaveasfilename
from tkinter import filedialog
from tkinter import Tk, Frame, Button, BOTH, SUNKEN
from tkinter import colorchooser, font
import tkinter.font as tkFont
from tkinter import filedialog, messagebox
from tkinter.filedialog import askopenfilename, asksaveasfilename, askdirectory

from tkinter import ttk
from tkinter import messagebox as mb
from tkinter import Button, GROOVE, INSERT, END, Toplevel
from tkinter.colorchooser import askcolor
import os, sys, subprocess
from tkinter import ttk, filedialog
from tkinter.filedialog import askopenfile
import pyautogui as pg
import pyperclip
import os
import sys
import pygame as pg
# import subprocess
# import shutil
import pathlib
from PIL import Image, ImageTk
import runpy
import glob
from tkinter.scrolledtext import ScrolledText
import re
import runpy
import glob
import time
import autopep8

r = tk.Tk()
r.geometry("1850x1080")

root.title("GUI TEMPLATE")
notebook = ttk.Notebook(r)
notebook.grid(row=0, column=1)
f1 = ttk.Frame(notebook, width=1900, height=1080)
f1.grid(row=0, column=1)
bf1 = ttk.Frame(f1)
bf1.grid(row=0, column=0)
spfrm = ttk.Frame(f1)
spfrm.grid(row=14, column=0)
# f1.columnconfigure(4, weight=3)
# f1.rowconfigure(10, weight=1)
notebook.add(f1, text="TAB1")


# ------------------------------
# Functions and call backs
# --------------------------------------------------------------------


def run(event):
    x = lb.curselection()[0]
    file = lb.get(x)
    runpy.run_path(path_name=file)


def opensystem(event):

    x = lb.curselection()[0]

    file = lb.get(x)
    with open(file, "r") as file:
        file = file.read()
        text.delete("1.0", tk.END)
        text.insert(tk.END, file)

        return


def showcontent(x):

    lb.focus()
    x = lb.curselection()[0]
    file = lb.get(x)
    with open(file, "r") as file:
        file = file.read()
        text.delete("1.0", tk.END)
        text.insert(tk.END, file)

        return


str_code_block = """
 -----------------------------------------------------------------------------
 GUI Magic Starts Here
 ----------------------------------------------------------------------------

r = tk.Tk()
root.geometry("1850x1080")
root.title("GUI TEMPLATE")
notebook = ttk.Notebook(r)
notebook.grid(row=0, column=1)
f1 = ttk.Frame(root, width=1800, height=1000)
f1.grid(row=0, column=1)
bf1 = ttk.Frame(f1)
bf1.grid(row=0, column=0)
spfrm = ttk.Frame(f1)
spfrm.grid(row=14, column=0)
# f1.columnconfigure(4, weight=3)
# f1.rowconfigure(10, weight=1)
notebook.add(f1, text="TAB1")


text = tk.Text(f1, height=60, width=150, bg="white")
text.insert("1.0", tk.END)
text.grid(row=0, column=3)
"""

self.txx = ScrolledText(
            self.f2,
            bg="white",
            bd=12,
            relief=GROOVE,
            height=50,
            width=100,
            font="TkFixedFont",
        )
        self.txx.grid(row=0, column=5)
def runpyprg(event):

    file = lb.get(ANCHOR)
    runpy.run_path(path_name=file)

    return


def run():
    x = lb.curselection()[0]

    runpy.run_path(path_name=lb.get(x))


lb = tk.Listbox(f1, bg="light blue", exportselection=False, selectmode=tk.MULTIPLE)
lb.grid(row=0, column=2, sticky="nswe")
lb.focus()
lb.configure(selectmode="")
flist = os.listdir()
for item in flist:
    lb.insert(tk.END, item)
lb.bind("<Double-Button-1>", opensystem)
lb.bind("<<ListboxSelect>>", showcontent)
lb.bind("<Double-Button-2>", runpyprg)


def command():
    pass


def savef():
    a = text.get("1.0", tk.END)
    filepath = asksavefilename(
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    with open(filepath, "w") as f:
        f.write(a)

        return f


def fname():
    filepath = askopenfilename(
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not filepath:
        return
    text.delete("1.0", tk.END)
    with open(filepath, "r") as input_file:
        text = input_file.read()
        text.insert(tk.END, text)
        return filepath


def fname2():
    filepath2 = askopenfilename(
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not filepath:
        return
    text.delete("1.0", tk.END)
    with open(filepath, "r") as input_file:
        text2 = input_file.read()
        text2.insert(tk.END, text)
        return filepath2


def newdirlist():
    a = "/home/jh/Desktop/Codeview_Project/"

    path = filedialog.askdirectory(initialdir=a)
    os.chdir(path)
    flist = os.listdir(path)
    lb.delete(0, tk.END)

    for item in flist:

        lb.insert(tk.END, item)
    return flist


def preselect():

    d = sp.get()
    if d == 1:
        path = "/home/jh/Dektop/codeview/"
    elif d == 2:
        path = "/home/jh/Dektop/codeview/ref"

    elif d == 3:
        path = "/home/jh/Desktop/Codeview_Project/code to evaluate for this project/"
    elif d == 4:
        path = "/home/jh/Desktop/Codeview_Project/TkGUIgen-master/"
    elif d == 5:
        path = "/home/jh/Dektop/codeview//home/jh/Desktop/Codeview_Project/tests/"
    elif d == 6:
        path = "/home/jh/Desktop/Clipboard_Project/"
    elif d == 7:
        path = "/home/jh/Desktop/Redirect project/"
    elif d == 8:
        path = "/home/jh/Desktop/PY_PROGRAMS WORKING WITH/"
    elif d == 9:
        path = "/home/jh/Dektop/codeview//home/jh/Desktop/canvas_subproject/"
    elif d == 10:
        path = "/home/jh/Desktop/VERY_USEFUL_ CODE GUI_EXAMPLES__/"
    elif d == 11:
        path = "/home/jh/Desktop/StringMalipulationtionGUIProj1/"
    elif d == 12:
        path = "/media/jh/Backup_Data/Python Master Set/Python_PROJECTS/CLI2GUI/"
    elif d == 13:
        path = "/media/jh/Backup_Data/Python_Notes&Projects/CODE_SNIPPETS__/CODE_BASE/"
    elif d == 14:
        path = "/home/jh/Dektop/codeview/"
    else:
        path = "/home/jh"

    os.chdir(path)
    flist = os.listdir(path)
    lb.delete(0, tk.END)
    for item in flist:

        lb.insert(tk.END, item)
    return flist


def tkfont():
    runpy.run_path(path_name="tkfontchooser.py")


def guigen():
    runpy.run_path(path_name="gui_gen.py")


def edit2():
    runpy.run_path(path_name="editor2.py")


def colorwordlist():
    runpy.run_path(path_name="colorlist.py")


def colorpic():
    runpy.run_path(path_name="color.py")

    # prgvar = "home/jh/Desktop/Codeview_Project/color.py"
    mycolor = color.get()

    # subprocess.Popen(["pyth


def py_jswon_veiwer():
    runpy.run_path(path_name="py_jswon_veiwer.py")


def runpyprg():
    file = lb.get(ANCHOR)
    runpy.run_path(path_name=file)
    return


menubar = Menu(r)
filemenu = Menu(menubar)
filemenu.add_command(label="New", command=fname)
filemenu.add_command(label="Open", command=fname2)
filemenu.add_command(label="Save", command=savef)
filemenu.add_command(label="Save As..", command=savef)
filemenu.add_command(label="Quit", command=r.quit)
menubar.add_cascade(label="File", menu=filemenu)


btn2 = tk.Button(bf1, text="GUI Generator", command=guigen)
btn2.grid(column=0, row=1)
btn3 = tk.Button(bf1, text="Editor2", command=edit2)
btn3.grid(column=0, row=2)
btn4 = tk.Button(bf1, text="fname", command=fname)
btn4.grid(column=0, row=3)
btn5 = tk.Button(bf1, text="RUN", command=run)
btn5.grid(column=0, row=4)
btn6 = tk.Button(bf1, text="Color Picker", command=colorpic)
btn6.grid(column=0, row=5)
btn7 = tk.Button(bf1, text="EXE PY PRG", command=runpyprg)
btn7.grid(column=0, row=6)


btn8 = tk.Button(bf1, text="color wordlist", command=colorwordlist)
btn8.grid(column=0, row=7)
btn9 = tk.Button(bf1, text="py_jswon_veiwer", command=py_jswon_veiwer)
btn9.grid(column=0, row=8)
btn10 = tk.Button(bf1, text="fname", command=fname)
btn10.grid(column=0, row=9)
btn11 = tk.Button(bf1, text="RUN", command=run)
btn11.grid(column=0, row=10)
btn12 = tk.Button(bf1, text="Color Picker", command=colorpic)
btn12.grid(column=0, row=11)
btn13 = tk.Button(bf1, text="EXE PY PRG", command=runpyprg)
btn13.grid(column=0, row=12)

btn14 = tk.Button(bf1, text="get dir", command=newdirlist)
btn14.grid(row=13, column=0)
btn15 = tk.Button(bf1, text="tk.Font View & Chose", command=tkfont)
btn15.grid(column=0, row=15)


# ---------------------------------------------------------------------
# Next Tab  TAB2 f2
# ---------------------------------------------------------------------


def key(event):
    tk.Label(f3, repr(event.char), text="pressed".grid(row=0, column=3))


def xypos(event):
    a = event.x
    b = event.y
    e1 = tk.Label(f3, text=a, font=("URW Chancery L", 12))
    e1.grid(row=0, column=5)
    e2 = tk.Label(f3, text=b, font=("URW Chancery L", 12))
    e2.grid(row=11, column=5)
    ttt.insert(
        tk.END,
        "X=",
    )
    ttt.insert(tk.END, a)
    ttt.insert(tk.END, "Y=")
    ttt.insert(tk.END, b)
    ttt.insert(tk.END, "\n")
    # print "clicked at", event.x, event.y

def cmdbtn():
    runpy.run_path(path_name="cmd_btn_console.py")


def open_file():
    """Open a file for editing."""
    filepath = askopenfilename(
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not filepath:
        return
    txt_edit.delete("1.0", tk.END)
    with open(filepath, "r") as input_file:
        text = input_file.read()
        txt_edit.insert(tk.END, text)


def save_file():
    """Save the current file as a new file."""
    filepath = asksaveasfilename(
        defaultextension="txt",
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    with open(filepath, "w") as output_file:
        text = txt_edit.get(1.0, tk.END)
        output_file.write(text)


def clear():
    txt_edit.delete("1.0", tk.END)


def ggtxt():
    a = text.get("1.0", tk.END)
    txt_edit.insert(tk.END, a)


def ggtxt2():
    a = text2.get("1.0", tk.END)
    txt_edit.insert(tk.END, a)


def newdirlist():

    os.chdir(path)
    flist = os.listdir(path)
    lbox.delete(0, tk.END)
    for item in flist:

        lbox.insert(tk.END, item)
    return flist


def guicodelist():
    path = "/home/jh/Desktop/VERY_USEFUL_ CODE GUI_EXAMPLES__/"
    os.chdir(path)
    flist = os.listdir(path)
    lbox.delete(0, tk.END)
    for item in flist:

        lbox.insert(tk.END, item)


def guicodelist2():
    path = "/home/jh/Desktop/VERY_USEFUL_ CODE GUI_EXAMPLES__/"
    path = filedialog.askdirectory()
    os.chdir(path)
    flist = os.listdir(path)
    lbox.delete(0, tk.END)
    for item in flist:
        lbox.insert(tk.END, item)
        return path


f2 = ttk.Frame(notebook)
notebook.add(f2, text="TAB2")

txt_edit = tk.Text(f2, height=500, width=500)
fr_buttons = tk.Frame(f2, relief=tk.RAISED, bd=2)
btn_open = tk.Button(fr_buttons, text="Open", command=open_file)
btn_open.grid(row=1, column=0)
btn_save = tk.Button(fr_buttons, text="Save As...", command=save_file)
btn_save.grid(row=2, column=0)
btn_clear = tk.Button(fr_buttons, text="Clear", command=clear)
btn_clear.grid(row=3, column=0, sticky="ew", padx=5, pady=5)
btn_grab = tk.Button(fr_buttons, text="Grab", command=ggtxt)
btn_grab.grid(row=4, column=0)
# btn_s.grid(row=1, column=0, sticky="ew", padx=5)
btn_grab2 = tk.Button(fr_buttons, text="Grab Tab6", command=ggtxt2)
btn_grab2.grid(row=5, column=0)
fr_buttons.grid(row=0, column=0, sticky="ns")
txt_edit.grid(row=0, column=1, sticky="nsew")


f3 = ttk.Frame(notebook)
notebook.add(f3, text="TAB3")
canvas_width = 1800
canvas_height = 900
w = Canvas(f3, width=canvas_width, height=canvas_height, bg="wheat")
w.grid(row=0, column=0)
w.bind("<Key>", key)
w.bind("<Button-1>", xypos)
f4 = ttk.Frame(r)
notebook.add(f4, text="4")

ttt = tk.Text(f4, height=40, width=20)
ttt.grid(row=1, column=1)

llbx = tk.Listbox(f4)
llbx.grid(row=1, column=4)

ccom = [
    "s.capitalize()",
    "s.count()",
    "s.count()",
    "s.index()",
    "s.title()",
    "s.replace()",
    "s.upper()",
    "s.lower()",
    "s.find()",
]
stuff = ["for i in range(  ):"]
comb = ttk.Combobox(f4, values=ccom)
comb.grid(row=1, column=2)

comb2 = ttk.Combobox(f4, values=stuff)
comb.grid(row=1, column=3)


f5 = ttk.Frame(notebook)
notebook.add(f5, text="TAB5")


def checkered(canvas, line_distance):
    # graph like line reference horizontal
    canvas.create_line(10, 400, 1900, 400, fill="blue", width=4)
    # graph like line vertical
    canvas.create_line(910, 10, 910, 900, fill="green", width=4)



class NewprojectWidget(ttk.Frame):
    def __init__(self, master=None, **kw):
        super(NewprojectWidget, self).__init__(master, **kw)
        self.button70 = ttk.Button(self)
        self.button70.configure(text="button70")
        self.button70.pack(side="top")
        self.button71 = ttk.Button(self)
        self.button71.configure(text="button71")
        self.button71.pack(side="top")
        self.button72 = ttk.Button(self)
        self.button72.configure(text="button72")
        self.button72.pack(side="top")
        self.button73 = ttk.Button(self)
        self.button73.configure(text="button73")
        self.button73.pack(side="top")
        self.button74 = ttk.Button(self)
        self.button74.configure(text="button74")
        self.button74.pack(side="top")
        self.button75 = ttk.Button(self)
        self.button75.configure(text="button75")
        self.button75.pack(side="top")
        self.button76 = ttk.Button(self)
        self.button76.configure(text="button76")
        self.button76.pack(side="top")
        self.button77 = ttk.Button(self)
        self.button77.configure(text="button77")
        self.button77.pack(side="top")
        self.button78 = ttk.Button(self)
        self.button78.configure(text="button78")
        self.button78.pack(side="top")
        self.button79 = ttk.Button(self)
        self.button79.configure(text="button79")
        self.button79.pack(side="top")
        self.button80 = ttk.Button(self)
        self.button80.configure(text="button80")
        self.button80.pack(side="top")
        self.button81 = ttk.Button(self)
        self.button81.configure(text="button81")
        self.button81.pack(side="top")
        self.button82 = ttk.Button(self)
        self.button82.configure(text="button82")
        self.button82.pack(side="top")
        self.button83 = ttk.Button(self)
        self.button83.configure(text="button83")
        self.button83.pack(side="top")


if __name__ == "__main__":
    root = tk.Tk()
    widget = NewprojectWidget(root)
    widget.pack(expand=True, fill="both")
    root.mainloop()
import tkinter as Tk
from tkinter import *

root_var = Tk()
root_var.title("Calculator")

e = Entry(root_var, width=25, borderwidth=5)
e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

def button_click(number=None):

#e.delete(0, END)
current = e.get()
e.delete(0, END)
e.insert(0, str(current) + str(number) )

def button_clear():
e.delete(0, END)


def button_add():
first_number = e.get()
global f_num
f_num = int(first_number)
e.delete(0, END)


def button_subtract():
second_number = e.get()
e.delete(0, END)
e.insert(0, f_num + int(second_number))


def button_multiply():
third_number = e.get()
e.delete(0, END)
e.insert(0, f_num + int(third_number))



def button_divide():
fourth_number = e.get()
e.delete(0, END)
e.insert(0, f_num + int(fourth_number))



def button_exponents():
fifth_number = e.get()
e.delete(0, END)
e.insert(0, f_num + int(fifth_number))

def button_equal():
sixth_number = e.get()
e.delete(0, END)
e.insert(0, f_num + int(sixth_number))

 button_1 = Button(root_var, text="1", padx=50, pady=10, command=lambda: button_click(1))
 button_2 = Button(root_var, text="2", padx=50, pady=10, command=lambda: button_click(2))
 button_3 = Button(root_var, text="3", padx=50, pady=10, command=lambda: button_click(3))
 button_4 = Button(root_var, text="4", padx=50, pady=10, command=lambda: button_click(4))
 button_5 = Button(root_var, text="5", padx=50, pady=10, command=lambda: button_click(5))
 button_6 = Button(root_var, text="6", padx=50, pady=10, command=lambda: button_click(6))
 button_7 = Button(root_var, text="7", padx=50, pady=10, command=lambda: button_click(7))
 button_8 = Button(root_var, text="8", padx=50, pady=10, command=lambda: button_click(8))
 button_9 = Button(root_var, text="9", padx=50, pady=10, command=lambda: button_click(9))
 button_0 = Button(root_var, text="0", padx=50, pady=10, command=lambda: button_click(0))

 button_addition = Button(root_var, text="+", padx=50, pady=10, command=button_add)
 button_subtraction = Button(root_var, text="-", padx=50, pady=10, command=button_subtract)
 button_multiplication = Button(root_var, text="*", padx=50, pady=10, command=button_multiply)
 button_division = Button(root_var, text="/", padx=50, pady=10, command=button_divide)
 button_exponents = Button(root_var, text="^", padx=50, pady=10, command=button_exponents)

 button_equals = Button(root_var, text="=", padx=50, pady=10, command=button_equal)

 button_clear = Button(root_var, text="C", padx=50, pady=10, command=button_clear)

  button_1.grid(row=3, column=2)
  button_2.grid(row=3, column=1)
  button_3.grid(row=3, column=0)

  button_4.grid(row=2, column=2)
  button_5.grid(row=2, column=1)
  button_6.grid(row=2, column=0)

  button_7.grid(row=1, column=2)
  button_8.grid(row=1, column=1)
  button_9.grid(row=1, column=0)

  button_0.grid(row=4, column=0)
  button_addition.grid(row=4, column=1)
  button_subtraction.grid(row=4, column=2)

  button_multiplication.grid(row=5, column=0)
  button_division.grid(row=5, column=1)
  button_exponents.grid(row=5, column=2)

  button_equals.grid(row=6, column=0)
  button_clear.grid(row=6, column=1)


  root_var.mainloop()
from tkinter import *


def Func():
    print("Called from toolbar")


root = Tk()

lbl = Label(root, text="Canvas:")
lbl.pack(anchor=W)

canvas = Canvas(root, width=200, height=200, bd=1, relief=SUNKEN)
canvas.pack()

blackLine = canvas.create_line(10, 10, 200, 200)
redLine = canvas.create_line(10, 200, 200, 10, fill="red")

greenBox = canvas.create_rectangle(50, 50, 100, 100, fill="green")

blueCircle = canvas.create_oval(60, 60, 80, 80, fill="blue")

# Deleting a canvas element
canvas.delete(redLine)
# canvas.delete(ALL)  # Delete entire canvas


root.mainloop()
from tkinter import *


class Checkbar(Frame):
    def __init__(self, parent=None, picks=[], side=LEFT, anchor=W):
        Frame.__init__(self, parent)
        self.vars = []
        for pick in picks:
            var = IntVar()
            chk = Checkbutton(self, text=pick, variable=var)
            chk.pack(side=side, anchor=anchor, expand=YES)
            self.vars.append(var)

    def state(self):
        return map((lambda var: var.get()), self.vars)


if __name__ == "__main__":
    root = Tk()
    lng = Checkbar(root, ["Python", "Ruby", "Perl", "C++"])
    tgl = Checkbar(root, ["English", "German"])
    lng.pack(side=TOP, fill=X)
    tgl.pack(side=LEFT)
    lng.config(relief=GROOVE, bd=2)

    def allstates():
        print(list(lng.state()), list(tgl.state()))

    Button(root, text="Quit", command=root.quit).pack(side=RIGHT)
    Button(root, text="Peek", command=allstates).pack(side=RIGHT)
    root.mainloop()
from tkinter import *

root = Tk()
root.geometry("200x150")

frame = Frame(root)
frame.pack()

Var1 = IntVar()
Var2 = IntVar()

ChkBttn = Checkbutton(frame, width=15, variable=Var1)
ChkBttn.pack(padx=5, pady=5)

ChkBttn2 = Checkbutton(frame, width=15, variable=Var2)
ChkBttn2.pack(padx=5, pady=5)
import tkinter

master = tkinter.Tk()

labelframe = tkinter.LabelFrame(master, labelanchor="s")
labelframe.grid(row=0, column=0, sticky="nsew")

text = tkinter.Text(labelframe, width=80, height=24)
text.grid(row=0, column=0, sticky="nsew")


def rowcol(ev=None):
    r, c = text.index("insert").split(".")
    labelframe["text"] = f"{r} | {c}"


text.event_add(
    "<<REACT>>", *("<Motion>", "<ButtonRelease>", "<KeyPress>", "<KeyRelease>")
)
b = text.bind("<<REACT>>", rowcol)
rowcol()  # get the ball rolling
text.focus()

master.mainloop()
#!/usr/bin/env python3


from tkinter import Tk, Frame, Button, BOTH, SUNKEN, Listbox, Label, StringVar
from tkinter import colorchooser


root = Tk()

root.geometry("600x450+300+300")

frame = Frame(root, border=1, relief=SUNKEN, width=350, height=200)


def onChoose():

    (rgb, hx) = colorchooser.askcolor()
    frame.config(bg=hx)

    Label(root, text=rgb).grid(row=0, column=3)
    Label(root, text=hx).grid(row=0, column=4)

    lb1.insert(1, rgb)
    lb2.insert(1, hx)


lb1 = Listbox(root)
lb1.grid(row=3, column=3)
lb2 = Listbox(root)
lb2.grid(row=3, column=4)


btn = Button(root, text="Choose Color", command=onChoose)
btn.grid(row=2, column=2)

if __name__ == "__main__":
    root.mainloop()
Colorhexlist = [
    "#F0F8FF",
    "#FAEBD7",
    "#FFEFDB",
    "#EEDFCC",
    "#CDC0B0",
    "#8B8378",
    "#00FFFF",
    "#7FFFD4",
    "#7FFFD4",
    "#76EEC6",
    "#66CDAA",
    "#458B74",
    "#F0FFFF",
    "#F0FFFF",
    "#E0EEEE",
    "#C1CDCD",
    "#838B8B",
    "#F5F5DC",
    "#FFE4C4",
    "#FFE4C4",
    "#EED5B7",
    "#CDB79E",
    "#8B7D6B",
    "#000000",
    "#FFEBCD",
    "#0000FF",
    "#0000FF",
    "#0000EE",
    "#0000CD",
    "#00008B",
    "#8A2BE2",
    "#A52A2A",
    "#FF4040",
    "#EE3B3B",
    "#CD3333",
    "#8B2323",
    "#DEB887",
    "#FFD39B",
    "#EEC591",
    "#CDAA7D",
    "#8B7355",
    "#5F9EA0",
    "#98F5FF",
    "#8EE5EE",
    "#7AC5CD",
    "#53868B",
    "#7FFF00",
    "#7FFF00",
    "#76EE00",
    "#66CD00",
    "#458B00",
    "#D2691E",
    "#FF7F24",
    "#EE7621",
    "#CD661D",
    "#8B4513",
    "#FF7F50",
    "#FF7256",
    "#EE6A50",
    "#CD5B45",
    "#8B3E2F",
    "#6495ED",
    "#FFF8DC",
    "#FFF8DC",
    "#EEE8CD",
    "#CDC8B1",
    "#8B8878",
    "#DC143C",
    "#00FFFF",
    "#00FFFF",
    "#00EEEE",
    "#00CDCD",
    "#008B8B",
    "#00008B",
    "#008B8B",
    "#B8860B",
    "#FFB90F",
    "#EEAD0E",
    "#CD950C",
    "#8B6508",
    "#A9A9A9",
    "#006400",
    "#A9A9A9",
    "#BDB76B",
    "#8B008B",
    "#556B2F",
    "#CAFF70",
    "#BCEE68",
    "#A2CD5A",
    "#6E8B3D",
    "#FF8C00",
    "#FF7F00",
    "#EE7600",
    "#CD6600",
    "#8B4500",
    "#9932CC",
    "#BF3EFF",
    "#B23AEE",
    "#9A32CD",
    "#68228B",
    "#8B0000",
    "#E9967A",
    "#8FBC8F",
    "#C1FFC1",
    "#B4EEB4",
    "#9BCD9B",
    "#698B69",
    "#483D8B",
    "#2F4F4F",
    "#97FFFF",
    "#8DEEEE",
    "#79CDCD",
    "#528B8B",
    "#2F4F4F",
    "#00CED1",
    "#9400D3",
    "#FF1493",
    "#FF1493",
    "#EE1289",
    "#CD1076",
    "#8B0A50",
    "#00BFFF",
    "#00BFFF",
    "#00B2EE",
    "#009ACD",
    "#00688B",
    "#696969",
    "#696969",
    "#1E90FF",
    "#1E90FF",
    "#1E90FF",
    "#1C86EE",
    "#1874CD",
    "#104E8B",
    "#B22222",
    "#FF3030",
    "#EE2C2C",
    "#CD2626",
    "#8B1A1A",
    "#FFFAF0",
    "#228B22",
    "#228B22",
    "#FF00FF",
    "#DCDCDC",
    "#F8F8FF",
    "#FFD700",
    "#FFD700",
    "#EEC900",
    "#CDAD00",
    "#8B7500",
    "#DAA520",
    "#FFC125",
    "#EEB422",
    "#CD9B1D",
    "#8B6914",
    "#00FF00",
    "#00FF00",
    "#00EE00",
    "#00CD00",
    "#008B00",
    "#ADFF2F",
    "#BEBEBE",
    "#000000",
    "#030303",
    "#050505",
    "#080808",
    "#0A0A0A",
    "#0D0D0D",
    "#0F0F0F",
    "#121212",
    "#141414",
    "#171717",
    "#1A1A1A",
    "#1C1C1C",
    "#1F1F1F",
    "#212121",
    "#242424",
    "#262626",
    "#292929",
    "#2B2B2B",
    "#2E2E2E",
    "#303030",
    "#333333",
    "#363636",
    "#383838",
    "#3B3B3B",
    "#3D3D3D",
    "#404040",
    "#424242",
    "#454545",
    "#474747",
    "#4A4A4A",
    "#4D4D4D",
    "#4F4F4F",
    "#525252",
    "#545454",
    "#575757",
    "#595959",
    "#5C5C5C",
    "#5E5E5E",
    "#616161",
    "#636363",
    "#666666",
    "#696969",
    "#6B6B6B",
    "#6E6E6E",
    "#707070",
    "#737373",
    "#757575",
    "#787878",
    "#7A7A7A",
    "#7D7D7D",
    "#7F7F7F",
    "#828282",
    "#858585",
    "#878787",
    "#8A8A8A",
    "#8C8C8C",
    "#8F8F8F",
    "#919191",
    "#949494",
    "#969696",
    "#999999",
    "#9C9C9C",
    "#9E9E9E",
    "#A1A1A1",
    "#A3A3A3",
    "#A6A6A6",
    "#A8A8A8",
    "#ABABAB",
    "#ADADAD",
    "#B0B0B0",
    "#B3B3B3",
    "#B5B5B5",
    "#B8B8B8",
    "#BABABA",
    "#BDBDBD",
    "#BFBFBF",
    "#C2C2C2",
    "#C4C4C4",
    "#C7C7C7",
    "#C9C9C9",
    "#CCCCCC",
    "#CFCFCF",
    "#D1D1D1",
    "#D4D4D4",
    "#D6D6D6",
    "#D9D9D9",
    "#DBDBDB",
    "#DEDEDE",
    "#E0E0E0",
    "#E3E3E3",
    "#E5E5E5",
    "#E8E8E8",
    "#EBEBEB",
    "#EDEDED",
    "#F0F0F0",
    "#F2F2F2",
    "#F5F5F5",
    "#F7F7F7",
    "#FAFAFA",
    "#FCFCFC",
    "#FFFFFF",
    "#F0FFF0",
    "#F0FFF0",
    "#E0EEE0",
    "#C1CDC1",
    "#838B83",
    "#FF69B4",
    "#FF6EB4",
    "#EE6AA7",
    "#CD6090",
    "#8B3A62",
    "#CD5C5C",
    "#FF6A6A",
    "#EE6363",
    "#CD5555",
    "#8B3A3A",
    "#4B0082",
    "#FFFFF0",
    "#FFFFF0",
    "#EEEEE0",
    "#CDCDC1",
    "#8B8B83",
    "#F0E68C",
    "#FFF68F",
    "#EEE685",
    "#CDC673",
    "#8B864E",
    "#E6E6FA",
    "#FFF0F5",
    "#FFF0F5",
    "#EEE0E5",
    "#CDC1C5",
    "#8B8386",
    "#7CFC00",
    "#FFFACD",
    "#FFFACD",
    "#EEE9BF",
    "#CDC9A5",
    "#8B8970",
    "#ADD8E6",
    "#BFEFFF",
    "#B2DFEE",
    "#9AC0CD",
    "#68838B",
    "#F08080",
    "#E0FFFF",
    "#E0FFFF",
    "#D1EEEE",
    "#B4CDCD",
    "#7A8B8B",
    "#EEDD82",
    "#FFEC8B",
    "#EEDC82",
    "#CDBE70",
    "#8B814C",
    "#FAFAD2",
    "#D3D3D3",
    "#90EE90",
    "#D3D3D3",
    "#FFB6C1",
    "#FFAEB9",
    "#EEA2AD",
    "#CD8C95",
    "#8B5F65",
    "#FFA07A",
    "#FFA07A",
    "#EE9572",
    "#CD8162",
    "#8B5742",
    "#20B2AA",
    "#87CEFA",
    "#B0E2FF",
    "#A4D3EE",
    "#8DB6CD",
    "#607B8B",
    "#8470FF",
    "#778899",
    "#778899",
    "#B0C4DE",
    "#CAE1FF",
    "#BCD2EE",
    "#A2B5CD",
    "#6E7B8B",
    "#FFFFE0",
    "#FFFFE0",
    "#EEEED1",
    "#CDCDB4",
    "#8B8B7A",
    "#00FF00",
    "#32CD32",
    "#FAF0E6",
    "#FF00FF",
    "#FF00FF",
    "#EE00EE",
    "#CD00CD",
    "#8B008B",
    "#B03060",
    "#FF34B3",
    "#EE30A7",
    "#CD2990",
    "#8B1C62",
    "#66CDAA",
    "#0000CD",
    "#BA55D3",
    "#E066FF",
    "#D15FEE",
    "#B452CD",
    "#7A378B",
    "#9370DB",
    "#AB82FF",
    "#9F79EE",
    "#8968CD",
    "#5D478B",
    "#3CB371",
    "#7B68EE",
    "#00FA9A",
    "#48D1CC",
    "#C71585",
    "#191970",
    "#191970",
    "#F5FFFA",
    "#FFE4E1",
    "#FFE4E1",
    "#FFE4E1",
    "#EED5D2",
    "#CDB7B5",
    "#8B7D7B",
    "#FFE4B5",
    "#FFDEAD",
    "#FFDEAD",
    "#EECFA1",
    "#CDB38B",
    "#8B795E",
    "#000080",
    "#000080",
    "#FDF5E6",
    "#808000",
    "#6B8E23",
    "#C0FF3E",
    "#B3EE3A",
    "#9ACD32",
    "#698B22",
    "#FFA500",
    "#FFA500",
    "#EE9A00",
    "#CD8500",
    "#8B5A00",
    "#FF4500",
    "#FF4500",
    "#EE4000",
    "#CD3700",
    "#8B2500",
    "#DA70D6",
    "#FF83FA",
    "#EE7AE9",
    "#CD69C9",
    "#8B4789",
    "#EEE8AA",
    "#98FB98",
    "#9AFF9A",
    "#90EE90",
    "#7CCD7C",
    "#548B54",
    "#AFEEEE",
    "#BBFFFF",
    "#AEEEEE",
    "#96CDCD",
    "#668B8B",
    "#DB7093",
    "#FF82AB",
    "#EE799F",
    "#CD687F",
    "#8B475D",
    "#FFEFD5",
    "#FFEFD5",
    "#FFDAB9",
    "#FFDAB9",
    "#FFDAB9",
    "#EECBAD",
    "#CDAF95",
    "#8B7765",
    "#CD853F",
    "#FFC0CB",
    "#FFB5C5",
    "#EEA9B8",
    "#CD919E",
    "#8B636C",
    "#DDA0DD",
    "#FFBBFF",
    "#EEAEEE",
    "#CD96CD",
    "#8B668B",
    "#B0E0E6",
    "#A020F0",
    "#9B30FF",
    "#912CEE",
    "#7D26CD",
    "#551A8B",
    "#FF0000",
    "#FF0000",
    "#EE0000",
    "#CD0000",
    "#8B0000",
    "#BC8F8F",
    "#FFC1C1",
    "#EEB4B4",
    "#CD9B9B",
    "#8B6969",
    "#4169E1",
    "#4876FF",
    "#436EEE",
    "#3A5FCD",
    "#27408B",
    "#8B4513",
    "#FA8072",
    "#FF8C69",
    "#EE8262",
    "#CD7054",
    "#8B4C39",
    "#F4A460",
    "#2E8B57",
    "#54FF9F",
    "#4EEE94",
    "#43CD80",
    "#2E8B57",
    "#FFF5EE",
    "#FFF5EE",
    "#EEE5DE",
    "#CDC5BF",
    "#8B8682",
    "#A0522D",
    "#FF8247",
    "#EE7942",
    "#CD6839",
    "#8B4726",
    "#C0C0C0",
    "#87CEEB",
    "#87CEFF",
    "#7EC0EE",
    "#6CA6CD",
    "#4A708B",
    "#6A5ACD",
    "#836FFF",
    "#7A67EE",
    "#6959CD",
    "#473C8B",
    "#708090",
    "#C6E2FF",
    "#B9D3EE",
    "#9FB6CD",
    "#6C7B8B",
    "#708090",
    "#FFFAFA",
    "#FFFAFA",
    "#EEE9E9",
    "#CDC9C9",
    "#8B8989",
    "#00FF7F",
    "#00FF7F",
    "#00EE76",
    "#00CD66",
    "#008B45",
    "#4682B4",
    "#63B8FF",
    "#5CACEE",
    "#4F94CD",
    "#36648B",
    "#D2B48C",
    "#FFA54F",
    "#EE9A49",
    "#CD853F",
    "#8B5A2B",
    "#008080",
    "#D8BFD8",
    "#FFE1FF",
    "#EED2EE",
    "#CDB5CD",
    "#8B7B8B",
    "#FF6347",
    "#FF6347",
    "#EE5C42",
    "#CD4F39",
    "#8B3626",
    "#40E0D0",
    "#00F5FF",
    "#00E5EE",
    "#00C5CD",
    "#00868B",
    "#EE82EE",
    "#D02090",
    "#FF3E96",
    "#EE3A8C",
    "#CD3278",
    "#8B2252",
    "#F5DEB3",
    "#FFE7BA",
    "#EED8AE",
    "#CDBA96",
    "#8B7E66",
    "#FFFFFF",
    "#F5F5F5",
    "#FFFF00",
    "#9ACD32",
    "#FFFF00",
    "#EEEE00",
    "#CDCD00",
    "#8B8B00",
    "#9ACD32",
]
import tkinter as tk
from tkinter import colorchooser


def collect_color(k):
    c_code = colorchooser.askcolor(title="Select color")
    buttons[k].config(bg=c_code[1])


my_w = tk.Tk()
my_w.geometry("410x250")  # Size of the window

n = 200  # number of buttons
i = 0  # row
j = 5  # column
buttons = []
for k in range(n):
    e = tk.Button(my_w, text=k, height=2, width=2, command=lambda k=k: collect_color(k))
    e.grid(row=i, column=j, padx=1, pady=1)
    buttons.append(e)
    j = j + 1
    if j % 5 == 0:
        i = i + 1
        j = 0
my_w.mainloop()  # Keep the window open
import tkinter as tk
from tkinter import *
from tkinter import ttk

root = Tk()
root.geometry("1900x1000")
root.title("Notebook Spreadsheet")


def command():
    pass


nb = ttk.Notebook(root)
nb.grid(row=0, column=0)
f1 = ttk.Frame(nb)
# Begin NoteBook SpreadSheet in TAB 1

listedstuff = ["subprocess.Popen", "for item in items", "filename"]

nb.add(f1, text="First")
r0c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c1.grid(row=0, column=1)

r1c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c1.grid(row=1, column=1)

r2c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c1.grid(row=2, column=1)

r3c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c1.grid(row=3, column=1)

r4c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c1.grid(row=4, column=1)

r5c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c1.grid(row=5, column=1)

r6c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c1.grid(row=6, column=1)

r7c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c1.grid(row=7, column=1)

r8c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r8c1.grid(row=8, column=1)

r9c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c1.grid(row=9, column=1)

r10c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c1.grid(row=10, column=1)

r11c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c1.grid(row=11, column=1)

r12c1 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c1.grid(row=12, column=1)



r0c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c2.grid(row=0, column=2)

r1c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c2.grid(row=1, column=2)

r2c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c2.grid(row=2, column=2)

r3c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c2.grid(row=3, column=2)

r4c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c2.grid(row=4, column=2)

r5c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c2.grid(row=5, column=2)

r6c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c2.grid(row=6, column=2)

r7c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c2.grid(row=7, column=2)

r8c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r8c2.grid(row=8, column=2)

r9c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c2.grid(row=9, column=2)

r10c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c2.grid(row=10, column=2)

r11c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c2.grid(row=11, column=2)

r12c2 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c2.grid(row=12, column=2)



r0c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c3.grid(row=0, column=3)

r1c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c3.grid(row=1, column=3)

r2c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c3.grid(row=2, column=3)

r3c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c3.grid(row=3, column=3)

r4c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c3.grid(row=4, column=3)

r5c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c3.grid(row=5, column=3)

r6c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c3.grid(row=6, column=3)

r7c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c3.grid(row=7, column=3)

r8c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r8c3.grid(row=8, column=3)

r9c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c3.grid(row=9, column=3)

r10c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c3.grid(row=10, column=3)

r11c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c3.grid(row=11, column=3)

r12c3 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c3.grid(row=12, column=3)


r0c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c4.grid(row=0, column=4)

r1c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c4.grid(row=1, column=4)

r2c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c4.grid(row=2, column=4)

r3c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c4.grid(row=3, column=4)

r4c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c4.grid(row=4, column=4)

r5c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c4.grid(row=5, column=4)

r6c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c4.grid(row=6, column=4)

r7c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c4.grid(row=7, column=4)

r8c4 = ttk.Combobox(f1, values=listedstuff)
r8c4.grid(row=8, column=4)

r9c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c4.grid(row=9, column=4)

r10c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c4.grid(row=10, column=4)

r11c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c4.grid(row=11, column=4)

r12c4 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c4.grid(row=12, column=4)

#

r0c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c5.grid(row=0, column=5)

r1c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c5.grid(row=1, column=5)

r2c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c5.grid(row=2, column=5)

r3c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c5.grid(row=3, column=5)

r4c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c5.grid(row=4, column=5)

r5c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c5.grid(row=5, column=5)

r6c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c5.grid(row=6, column=5)

r7c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c5.grid(row=7, column=5)

r8c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r8c5.grid(row=8, column=5)

r9c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c5.grid(row=9, column=5)

r10c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c5.grid(row=10, column=5)

r11c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c5.grid(row=11, column=5)

r12c5 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c5.grid(row=12, column=5)

#

r0c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r0c6.grid(row=0, column=6)

r1c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r1c6.grid(row=1, column=6)

r2c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r2c6.grid(row=2, column=6)

r3c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r3c6.grid(row=3, column=6)

r4c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r4c6.grid(row=4, column=6)

r5c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r5c6.grid(row=5, column=6)

r6c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r6c6.grid(row=6, column=6)

r7c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r7c6.grid(row=7, column=6)

r8c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r8c6.grid(row=8, column=6)

r9c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r9c6.grid(row=9, column=6)

r10c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r10c6.grid(row=10, column=6)

r11c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r11c6.grid(row=11, column=6)

r12c6 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r12c6.grid(row=12, column=6)

#

r0c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r0c7.grid(row=0, column=7)

r1c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r1c7.grid(row=1, column=7)

r2c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r2c7.grid(row=2, column=7)

r3c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r3c7.grid(row=3, column=7)

r4c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r4c7.grid(row=4, column=7)

r5c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r5c7.grid(row=5, column=7)

r6c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r6c7.grid(row=6, column=7)

r7c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r7c7.grid(row=7, column=7)

r8c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r8c7.grid(row=8, column=7)

r9c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r9c7.grid(row=9, column=7)

r10c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r10c7.grid(row=10, column=7)

r11c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r11c7.grid(row=11, column=7)

r12c7 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r12c7.grid(row=12, column=7)



r0c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c8.grid(row=0, column=8)

r1c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c8.grid(row=1, column=8)

r2c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c8.grid(row=2, column=8)

r3c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c8.grid(row=3, column=8)

r4c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c8.grid(row=4, column=8)

r5c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r5c8.grid(row=5, column=8)

r6c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r6c8.grid(row=6, column=8)

r7c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r7c8.grid(row=7, column=8)

r8c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r8c8.grid(row=8, column=8)

r9c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r9c8.grid(row=9, column=8)

r10c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r10c8.grid(row=10, column=8)

r11c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r11c8.grid(row=11, column=8)

r12c8 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r12c8.grid(row=12, column=8)

#


r0c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r0c9.grid(row=0, column=9)

r1c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r1c9.grid(row=1, column=9)

r2c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r2c9.grid(row=2, column=9)

r3c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r3c9.grid(row=3, column=9)

r4c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)
r4c9.grid(row=4, column=9)

r5c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r5c9.grid(row=5, column=9)

r6c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r6c9.grid(row=6, column=9)

r7c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r7c9.grid(row=7, column=9)

r8c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r8c9.grid(row=8, column=9)

r9c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r9c9.grid(row=9, column=9)

r10c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r10c9.grid(row=10, column=9)

r11c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r11c9.grid(row=11, column=9)

r12c9 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r12c9.grid(row=12, column=9)



r0c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r0c10.grid(row=0, column=10)

r1c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r1c10.grid(row=1, column=10)

r2c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r2c10.grid(row=2, column=10)

r3c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r3c10.grid(row=3, column=10)

r4c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r4c10.grid(row=4, column=10)

r5c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r5c10.grid(row=5, column=10)

r6c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r6c10.grid(row=6, column=10)

r7c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r7c10.grid(row=7, column=10)

r8c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r8c10.grid(row=8, column=10)

r9c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r9c10.grid(row=9, column=10)

r10c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r10c10.grid(row=10, column=10)

r11c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r11c10.grid(row=11, column=10)

r12c10 = ttk.Combobox(
    f1,
    values=listedstuff,
)

r12c10.grid(row=12, column=10)




r0c11 = ttk.Combobox(f1, values=listedstuff,  )

r0c11.grid(row=0, column=11)

r1c11 = ttk.Combobox(f1, values=listedstuff,  )

r1c11.grid(row=1, column=11)

r2c11 = ttk.Combobox(f1, values=listedstuff,  )

r2c11.grid(row=2, column=11)

r3c11 = ttk.Combobox(f1, values=listedstuff,  )

r3c11.grid(row=3, column=11)

r4c11 = ttk.Combobox(f1, values=listedstuff,  )

r4c11.grid(row=4, column=11)

r5c11 = ttk.Combobox(f1, values=listedstuff,  )

r5c11.grid(row=5, column=11)

r6c11 = ttk.Combobox(f1, values=listedstuff,  )

r6c11.grid(row=6, column=11)

r7c11 = ttk.Combobox(f1, values=listedstuff,  )

r7c11.grid(row=7, column=11)

r8c11 = ttk.Combobox(f1, values=listedstuff,  )

r8c11.grid(row=8, column=11)

r9c11 = ttk.Combobox(f1, values=listedstuff,  )

r9c11.grid(row=9, column=11)

r10c11 = ttk.Combobox(f1, values=listedstuff,  )

r10c11.grid(row=10, column=11)

r11c11 = ttk.Combobox(f1, values=listedstuff,  )

r11c11.grid(row=11, column=11)

r12c11 = ttk.Combobox(f1, values=listedstuff,  )

r12c11.grid(row=12, column=11)

#

r0c12 = ttk.Combobox(f1, values=listedstuff,  )

r0c12.grid(row=0, column=12)

r1c12 = ttk.Combobox(f1, values=listedstuff,  )

r1c12.grid(row=1, column=12)

r2c12 = ttk.Combobox(f1, values=listedstuff,  )

r2c12.grid(row=2, column=12)

r3c12 = ttk.Combobox(f1, values=listedstuff,  )

r3c12.grid(row=3, column=12)

r4c12 = ttk.Combobox(f1, values=listedstuff,  )

r4c12.grid(row=4, column=12)

r5c12 = ttk.Combobox(f1, values=listedstuff,  )

r5c12.grid(row=5, column=12)

r6c12 = ttk.Combobox(f1, values=listedstuff,  )

r6c12.grid(row=6, column=12)

r7c12 = ttk.Combobox(f1, values=listedstuff,  )

r7c12.grid(row=7, column=12)

r8c12 = ttk.Combobox(f1, values=listedstuff,  )

r8c12.grid(row=8, column=12)

r9c12 = ttk.Combobox(f1, values=listedstuff,  )

r9c12.grid(row=9, column=12)

r12c12 = ttk.Combobox(f1, values=listedstuff,  )

r12c12.grid(row=10, column=12)

r12c12 = ttk.Combobox(f1, values=listedstuff,  )

r12c12.grid(row=11, column=12)

r12c12 = ttk.Combobox(f1, values=listedstuff,  )

r12c12.grid(row=12, column=12)

#


r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)

r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)

r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)

r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)

r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)

r0c0 = ttk.Combobox(f1)

r0c0.grid(row=0, column=0)


# cb.bind("<FocusIn>", defocus)


# combo_box.bind("<<ComboboxSelected>>"




# The is the start of the 2nd tab which is also the 2nd frame f2 and the container

#

f2 = ttk.Frame(nb)


nb.add(f2, text="Second")

r0c1 = ttk.Combobox(f2, bg="#847bb1")

r0c1.grid(row=0, column=1)

r1c1 = ttk.Combobox(f2, bg="#847bb1")

r1c1.grid(row=1, column=1)

r2c1 = ttk.Combobox(f2, bg="#847bb1")

r2c1.grid(row=2, column=1)

r3c1 = ttk.Combobox(f2, bg="#847bb1")

r3c1.grid(row=3, column=1)

r4c1 = ttk.Combobox(f2, bg="#847bb1")

r4c1.grid(row=4, column=1)

r5c1 = ttk.Combobox(f2, bg="#847bb1")

r5c1.grid(row=5, column=1)

r6c1 = ttk.Combobox(f2, bg="#847bb1")

r6c1.grid(row=6, column=1)

r7c1 = ttk.Combobox(f2, bg="#847bb1")

r7c1.grid(row=7, column=1)

r8c1 = ttk.Combobox(f2, bg="#847bb1")

r8c1.grid(row=8, column=1)

r9c1 = ttk.Combobox(f2, bg="#847bb1")

r9c1.grid(row=9, column=1)

r10c1 = ttk.Combobox(f2, bg="#847bb1")

r10c1.grid(row=10, column=1)

r11c1 = ttk.Combobox(f2, bg="#847bb1")

r11c1.grid(row=11, column=1)

r12c1 = ttk.Combobox(f2, bg="#847bb1")

r12c1.grid(row=12, column=1)



r0c2 = ttk.Combobox(f2, bg="#847bb1")

r0c2.grid(row=0, column=2)

r1c2 = ttk.Combobox(f2, bg="#847bb1")

r1c2.grid(row=1, column=2)

r2c2 = ttk.Combobox(f2, bg="#847bb1")

r2c2.grid(row=2, column=2)

r3c2 = ttk.Combobox(f2, bg="#847bb1")

r3c2.grid(row=3, column=2)

r4c2 = ttk.Combobox(f2, bg="#847bb1")

r4c2.grid(row=4, column=2)

r5c2 = ttk.Combobox(f2, bg="#847bb1")

r5c2.grid(row=5, column=2)

r6c2 = ttk.Combobox(f2, bg="#847bb1")

r6c2.grid(row=6, column=2)

r7c2 = ttk.Combobox(f2, bg="#847bb1")

r7c2.grid(row=7, column=2)

r8c2 = ttk.Combobox(f2, bg="#847bb1")

r8c2.grid(row=8, column=2)

r9c2 = ttk.Combobox(f2, bg="#847bb1")

r9c2.grid(row=9, column=2)

r10c2 = ttk.Combobox(f2, bg="#847bb1")

r10c2.grid(row=10, column=2)

r11c2 = ttk.Combobox(f2, bg="#847bb1")

r11c2.grid(row=11, column=2)

r12c2 = ttk.Combobox(f2, bg="#847bb1")

r12c2.grid(row=12, column=2)



r0c3 = ttk.Combobox(f2, bg="#847bb1")

r0c3.grid(row=0, column=3)

r1c3 = ttk.Combobox(f2, bg="#847bb1")

r1c3.grid(row=1, column=3)

r2c3 = ttk.Combobox(f2, bg="#847bb1")

r2c3.grid(row=2, column=3)

r3c3 = ttk.Combobox(f2, bg="#847bb1")

r3c3.grid(row=3, column=3)

r4c3 = ttk.Combobox(f2, bg="#847bb1")

r4c3.grid(row=4, column=3)

r5c3 = ttk.Combobox(f2, bg="#847bb1")

r5c3.grid(row=5, column=3)

r6c3 = ttk.Combobox(f2, bg="#847bb1")

r6c3.grid(row=6, column=3)

r7c3 = ttk.Combobox(f2, bg="#847bb1")

r7c3.grid(row=7, column=3)

r8c3 = ttk.Combobox(f2, bg="#847bb1")

r8c3.grid(row=8, column=3)

r9c3 = ttk.Combobox(f2, bg="#847bb1")

r9c3.grid(row=9, column=3)

r10c3 = ttk.Combobox(f2, bg="#847bb1")

r10c3.grid(row=10, column=3)

r11c3 = ttk.Combobox(f2, bg="#847bb1")

r11c3.grid(row=11, column=3)

r12c3 = ttk.Combobox(f2, bg="#847bb1")

r12c3.grid(row=12, column=3)



r0c4 = ttk.Combobox(f2, bg="#847bb1")

r0c4.grid(row=0, column=4)

r1c4 = ttk.Combobox(f2, bg="#847bb1")

r1c4.grid(row=1, column=4)

r2c4 = ttk.Combobox(f2, bg="#847bb1")

r2c4.grid(row=2, column=4)

r3c4 = ttk.Combobox(f2, bg="#847bb1")

r3c4.grid(row=3, column=4)

r4c4 = ttk.Combobox(f2, bg="#847bb1")

r4c4.grid(row=4, column=4)

r5c4 = ttk.Combobox(f2, bg="#847bb1")

r5c4.grid(row=5, column=4)

r6c4 = ttk.Combobox(f2, bg="#847bb1")

r6c4.grid(row=6, column=4)

r7c4 = ttk.Combobox(f2, bg="#847bb1")

r7c4.grid(row=7, column=4)

r8c4 = ttk.Combobox(f2, bg="#847bb1")

r8c4.grid(row=8, column=4)

r9c4 = ttk.Combobox(f2, bg="#847bb1")

r9c4.grid(row=9, column=4)

r10c4 = ttk.Combobox(f2, bg="#847bb1")

r10c4.grid(row=10, column=4)

r11c4 = ttk.Combobox(f2, bg="#847bb1")

r11c4.grid(row=11, column=4)

r12c4 = ttk.Combobox(f2, bg="#847bb1")

r12c4.grid(row=12, column=4)

#

r0c5 = ttk.Combobox(f2, bg="#847bb1")

r0c5.grid(row=0, column=5)

r1c5 = ttk.Combobox(f2, bg="#847bb1")

r1c5.grid(row=1, column=5)

r2c5 = ttk.Combobox(f2, bg="#847bb1")

r2c5.grid(row=2, column=5)

r3c5 = ttk.Combobox(f2, bg="#847bb1")

r3c5.grid(row=3, column=5)

r4c5 = ttk.Combobox(f2, bg="#847bb1")

r4c5.grid(row=4, column=5)

r5c5 = ttk.Combobox(f2, bg="#847bb1")

r5c5.grid(row=5, column=5)

r6c5 = ttk.Combobox(f2, bg="#847bb1")

r6c5.grid(row=6, column=5)

r7c5 = ttk.Combobox(f2, bg="#847bb1")

r7c5.grid(row=7, column=5)

r8c5 = ttk.Combobox(f2, bg="#847bb1")

r8c5.grid(row=8, column=5)

r9c5 = ttk.Combobox(f2, bg="#847bb1")

r9c5.grid(row=9, column=5)

r10c5 = ttk.Combobox(f2, bg="#847bb1")

r10c5.grid(row=10, column=5)

r11c5 = ttk.Combobox(f2, bg="#847bb1")

r11c5.grid(row=11, column=5)

r12c5 = ttk.Combobox(f2, bg="#847bb1")

r12c5.grid(row=12, column=5)

#

r0c6 = ttk.Combobox(f2, bg="#847bb1")

r0c6.grid(row=0, column=6)

r1c6 = ttk.Combobox(f2, bg="#847bb1")

r1c6.grid(row=1, column=6)

r2c6 = ttk.Combobox(f2, bg="#847bb1")

r2c6.grid(row=2, column=6)

r3c6 = ttk.Combobox(f2, bg="#847bb1")

r3c6.grid(row=3, column=6)

r4c6 = ttk.Combobox(f2, bg="#847bb1")

r4c6.grid(row=4, column=6)

r5c6 = ttk.Combobox(f2, bg="#847bb1")

r5c6.grid(row=5, column=6)

r6c6 = ttk.Combobox(f2, bg="#847bb1")

r6c6.grid(row=6, column=6)

r7c6 = ttk.Combobox(f2, bg="#847bb1")

r7c6.grid(row=7, column=6)

r8c6 = ttk.Combobox(f2, bg="#847bb1")

r8c6.grid(row=8, column=6)

r9c6 = ttk.Combobox(f2, bg="#847bb1")

r9c6.grid(row=9, column=6)

r10c6 = ttk.Combobox(f2, bg="#847bb1")

r10c6.grid(row=10, column=6)

r11c6 = ttk.Combobox(f2, bg="#847bb1")

r11c6.grid(row=11, column=6)

r12c6 = ttk.Combobox(f2, bg="#847bb1")

r12c6.grid(row=12, column=6)

#

r0c7 = ttk.Combobox(f2, bg="#847bb1")

r0c7.grid(row=0, column=7)

r1c7 = ttk.Combobox(f2, bg="#847bb1")

r1c7.grid(row=1, column=7)

r2c7 = ttk.Combobox(f2, bg="#847bb1")

r2c7.grid(row=2, column=7)

r3c7 = ttk.Combobox(f2, bg="#847bb1")

r3c7.grid(row=3, column=7)

r4c7 = ttk.Combobox(f2, bg="#847bb1")

r4c7.grid(row=4, column=7)

r5c7 = ttk.Combobox(f2, bg="#847bb1")

r5c7.grid(row=5, column=7)

r6c7 = ttk.Combobox(f2, bg="#847bb1")

r6c7.grid(row=6, column=7)

r7c7 = ttk.Combobox(f2, bg="#847bb1")

r7c7.grid(row=7, column=7)

r8c7 = ttk.Combobox(f2, bg="#847bb1")

r8c7.grid(row=8, column=7)

r9c7 = ttk.Combobox(f2, bg="#847bb1")

r9c7.grid(row=9, column=7)

r10c7 = ttk.Combobox(f2, bg="#847bb1")

r10c7.grid(row=10, column=7)

r11c7 = ttk.Combobox(f2, bg="#847bb1")

r11c7.grid(row=11, column=7)

r12c7 = ttk.Combobox(f2, bg="#847bb1")

r12c7.grid(row=12, column=7)



r0c8 = ttk.Combobox(f2, bg="#847bb1")

r0c8.grid(row=0, column=8)

r1c8 = ttk.Combobox(f2, bg="#847bb1")

r1c8.grid(row=1, column=8)

r2c8 = ttk.Combobox(f2, bg="#847bb1")

r2c8.grid(row=2, column=8)

r3c8 = ttk.Combobox(f2, bg="#847bb1")

r3c8.grid(row=3, column=8)

r4c8 = ttk.Combobox(f2, bg="#847bb1")

r4c8.grid(row=4, column=8)

r5c8 = ttk.Combobox(f2, bg="#847bb1")

r5c8.grid(row=5, column=8)

r6c8 = ttk.Combobox(f2, bg="#847bb1")

r6c8.grid(row=6, column=8)

r7c8 = ttk.Combobox(f2, bg="#847bb1")

r7c8.grid(row=7, column=8)

r8c8 = ttk.Combobox(f2, bg="#847bb1")

r8c8.grid(row=8, column=8)

r9c8 = ttk.Combobox(f2, bg="#847bb1")

r9c8.grid(row=9, column=8)

r10c8 = ttk.Combobox(f2, bg="#847bb1")

r10c8.grid(row=10, column=8)

r11c8 = ttk.Combobox(f2, bg="#847bb1")

r11c8.grid(row=11, column=8)

r12c8 = ttk.Combobox(f2, bg="#847bb1")

r12c8.grid(row=12, column=8)

#


r0c9 = ttk.Combobox(f2, bg="#847bb1")

r0c9.grid(row=0, column=9)

r1c9 = ttk.Combobox(f2, bg="#847bb1")

r1c9.grid(row=1, column=9)

r2c9 = ttk.Combobox(f2, bg="#847bb1")

r2c9.grid(row=2, column=9)

r3c9 = ttk.Combobox(f2, bg="#847bb1")

r3c9.grid(row=3, column=9)

r4c9 = ttk.Combobox(f2, bg="#847bb1")

r4c9.grid(row=4, column=9)

r5c9 = ttk.Combobox(f2, bg="#847bb1")

r5c9.grid(row=5, column=9)

r6c9 = ttk.Combobox(f2, bg="#847bb1")

r6c9.grid(row=6, column=9)

r7c9 = ttk.Combobox(f2, bg="#847bb1")

r7c9.grid(row=7, column=9)

r8c9 = ttk.Combobox(f2, bg="#847bb1")

r8c9.grid(row=8, column=9)

r9c9 = ttk.Combobox(f2, bg="#847bb1")

r9c9.grid(row=9, column=9)

r10c9 = ttk.Combobox(f2, bg="#847bb1")

r10c9.grid(row=10, column=9)

r11c9 = ttk.Combobox(f2, bg="#847bb1")

r11c9.grid(row=11, column=9)

r12c9 = ttk.Combobox(f2, bg="#847bb1")

r12c9.grid(row=12, column=9)



r0c10 = ttk.Combobox(f2, bg="#847bb1")

r0c10.grid(row=0, column=10)

r1c10 = ttk.Combobox(f2, bg="#847bb1")

r1c10.grid(row=1, column=10)

r2c10 = ttk.Combobox(f2, bg="#847bb1")

r2c10.grid(row=2, column=10)

r3c10 = ttk.Combobox(f2, bg="#847bb1")

r3c10.grid(row=3, column=10)

r4c10 = ttk.Combobox(f2, bg="#847bb1")

r4c10.grid(row=4, column=10)

r5c10 = ttk.Combobox(f2, bg="#847bb1")

r5c10.grid(row=5, column=10)

r6c10 = ttk.Combobox(f2, bg="#847bb1")

r6c10.grid(row=6, column=10)

r7c10 = ttk.Combobox(f2, bg="#847bb1")

r7c10.grid(row=7, column=10)

r8c10 = ttk.Combobox(f2, bg="#847bb1")

r8c10.grid(row=8, column=10)

r9c10 = ttk.Combobox(f2, bg="#847bb1")

r9c10.grid(row=9, column=10)

r10c10 = ttk.Combobox(f2, bg="#847bb1")

r10c10.grid(row=10, column=10)

r11c10 = ttk.Combobox(f2, bg="#847bb1")

r11c10.grid(row=11, column=10)

r12c10 = ttk.Combobox(f2, bg="#847bb1")

r12c10.grid(row=12, column=10)





r0c11 = ttk.Combobox(f2)

r0c11.grid(row=0, column=11)

r1c11 = ttk.Combobox(f2)

r1c11.grid(row=1, column=11)

r2c11 = ttk.Combobox(f2)

r2c11.grid(row=2, column=11)

r3c11 = ttk.Combobox(f2)

r3c11.grid(row=3, column=11)

r4c11 = ttk.Combobox(f2)

r4c11.grid(row=4, column=11)

r5c11 = ttk.Combobox(f2)

r5c11.grid(row=5, column=11)

r6c11 = ttk.Combobox(f2)

r6c11.grid(row=6, column=11)

r7c11 = ttk.Combobox(f2)

r7c11.grid(row=7, column=11)

r8c11 = ttk.Combobox(f2)

r8c11.grid(row=8, column=11)

r9c11 = ttk.Combobox(f2)

r9c11.grid(row=9, column=11)

r10c11 = ttk.Combobox(f2)

r10c11.grid(row=10, column=11)

r11c11 = ttk.Combobox(f2)

r11c11.grid(row=11, column=11)

r12c11 = ttk.Combobox(f2)

r12c11.grid(row=12, column=11)

#

r0c12 = ttk.Combobox(f2)

r0c12.grid(row=0, column=12)

r1c12 = ttk.Combobox(f2)

r1c12.grid(row=1, column=12)

r2c12 = ttk.Combobox(f2)

r2c12.grid(row=2, column=12)

r3c12 = ttk.Combobox(f2)

r3c12.grid(row=3, column=12)

r4c12 = ttk.Combobox(f2)

r4c12.grid(row=4, column=12)

r5c12 = ttk.Combobox(f2)

r5c12.grid(row=5, column=12)

r6c12 = ttk.Combobox(f2)

r6c12.grid(row=6, column=12)

r7c12 = ttk.Combobox(f2)

r7c12.grid(row=7, column=12)

r8c12 = ttk.Combobox(f2)

r8c12.grid(row=8, column=12)

r9c12 = ttk.Combobox(f2)

r9c12.grid(row=9, column=12)

r12c12 = ttk.Combobox(f2)

r12c12.grid(row=10, column=12)

r12c12 = ttk.Combobox(f2)

r12c12.grid(row=11, column=12)

r12c12 = ttk.Combobox(f2)




 TAB3




f3 = ttk.Frame(nb)


nb.add(f3, text="Tab3")


Label(f3, text="label").grid(column=0, row=0)


Label(f3, text="label1").grid(column=0, row=0)


Label(f3, text="label1").grid(column=0, row=2)


ee1 = tk.StringVar()


Entry(f3, textvariable=ee1, bg="yellow").grid(column=0, row=3)


Label(f3, text="label1").grid(column=0, row=4)


ee2 = tk.StringVar()


Entry(f3, textvariable=ee2, bg="yellow").grid(column=0, row=5)


btn1=tk.Button(f1, values=listedstuff,  text='button 1', command=command).grid(column=2, row=1)



btn2=tk.Button(f1, values=listedstuff,  text='button 2', command=command).grid(column=2, row=2)



btn3=tk.Button(f1, values=listedstuff,  text='button 3', command=command).grid(column=2, row=3)



btn4=tk.Button(f1, values=listedstuff,  text='button 4', command=command).grid(column=2, row=4)



btn5=tk.Button(f1, values=listedstuff,  text='button 5', command=command).grid(column=2, row=5)



btn6=tk.Button(f1, values=listedstuff,  text='button 6', command=command).grid(column=3, row=1)



btn7=tk.Button(f1, values=listedstuff,  text='button 7', command=command).grid(column=3, row=2)



btn8u=tk.Button(f1, values=listedstuff,  text='button 8', command=command).grid(column=3, row=3)



btn9=tk.Button(f1, values=listedstuff,  text='button 9', command=command).grid(column=3, row=4)



btn10=tk.Button(f1, values=listedstuff,  text='button 10', command=command).grid(column=3, row=5)  command=command).grid(column=2, row=4)



btn5=tk.Button(f1, values=listedstuff,  text='button 5', command=command).grid(column=2, row=5)


text = tk.Text(f3, bg="pink", height=500, width=1000)


text.insert("1.0", tk.END)


text.grid(row=1, column=4, rowspan=5, columnspan=10)


#

# TAB4




def termsCheck():

    if ckb.get() == 1:

        submit_btn["state"] = NORMAL

    else:

        submit_btn["state"] = DISABLED

        messagebox.showerror("Accept the terms & conditions")






f4 = ttk.Frame(nb)



nb.add(f4, text='Tab4')





from tkinter import *

from tkinter import colorchooser



def pick_color():

    color = colorchooser.askcolor(title ="Choose color")

    color_me.config(bg=color[1])

    color_me.config(text=color)





f4 = Tk()

f4.title('PythonGuides')

f4.geometry('400x300')



color_me = Label(

    f4,

    text='(217, 217, 217) #d9d9d9',

    font = ('Times', 20),

    relief = SOLID,

    padx=20,

    pady=20

)

color_me.grid(row=5, column=4)

button = Button(

    f4,

    text = "Choose Color",

    command = pick_color,

    padx=10,

    pady=10,

    font=('Times', 18),

    bg='#4a7a8c'

    )

button.grid(row=2, column=2)



f4.mainloop()





Label(f4, text= 'label1').grid(column=0, row=2)



ee1 = tk.StringVar()



Entry(f4, textvariable=ee1, bg="yellow").grid(column=0, row=3)



Label(f4, text= 'label1').grid(column=0, row=4)



ee2 = tk.StringVar()



Entry(f4, textvariable=ee2, bg="yellow").grid(column=0, row=5)











ckb = IntVar()



Checkbutton(f4, text='Accept the terms & conditions',



            variable=ckb,onvalue=1, offvalue=0,command=termsCheck).grid(row=8, columnspan=4, pady=5)















rb1 = tk.IntVar()



rb1.set(1)







radiobutton1 = tk.Radiobutton(f4, text="Radio 1", variable=rb1, value=1)



radiobutton1.grid(column=4, row=1)







radiobutton2 = tk.Radiobutton(f4, text="Radio 2", variable=rb1, value=2)



radiobutton2.grid(column=5, row=1)





#

Tab 5

#



f5 = ttk.Frame(nb, height=1000, width=1000)



nb.add(f5, text='Tab5')









nnb = ttk.Notebook(f5)

nnb.grid(row=0, column=0)

ff1 = ttk.Frame(nnb, height=1000, width=100)



ff2 = ttk.Frame(nnb, height=1000, width=100)

ff3= ttk.Frame(nnb, height=1000, width=100)

ff4 = ttk.Frame(nnb, height=1000, width=1000)

ff5 = ttk.Frame(nnb, height=1000, width=1000)

ff6 = ttk.Frame(nnb, height=1000, width=1000)

ff7 = ttk.Frame(nnb, height=1000, width=1000)

ff8 = ttk.Frame(nnb, height=1000, width=1000)

nnb.add(ff1, text='Tab1')

nnb.add(ff2, text='Tab2')

nnb.add(ff3, text='Tab3')

nnb.add(ff4, text='Tab4')

nnb.add(ff5, text='Tab5')

nnb.add(ff6, text='Tab6')

nnb.add(ff7, text='Tab7')

nnb.add(ff8, text='Tab8')



Label(ff1, text= 'label').grid(column=2, row=0)



Label(ff2, text= 'label').grid(column=4, row=0)



Label(ff3, text= 'label').grid(column=6, row=2)



Label(ff1, text= 'label').grid(column=8, row=3)



Label(ff2, text= 'label').grid(column=1, row=4)



Label(ff3, text= 'label').grid(column=6, row=3)



Label(ff1, text= 'label').grid(column=1, row=1)



Label(ff4, text= 'label2').grid(column=1, row=4)



Label(ff42, text= 'label3').grid(column=2, row=7)



Label(ff4, text= 'label4').grid(column=4, row=7)



Label(ff4, text= 'label5').grid(column=6, row=0)



lbox1 = tk.Listbox(ff6).grid(column=2, row=1)



lbox2 = tk.Listbox(ff7).grid(column=4, row=1)



lbox3 = tk.Listbox(ff8).grid(column=6, row=1)







Label(ff2, text= 'label').grid(column=3, row=5)



ee1 = tk.StringVar()



Entry(ff1, textvariable=ee1, bg="yellow").grid(column=0, row=3)



Label(ff1, text= 'label').grid(column=0, row=4)



eef2 = tk.StringVar()

eeff2 = tk.StringVar()



Entry(ff1, textvariable=eef2, bg="yellow").grid(column=0, row=5)



Entry(ff1, textvariable=eeff2, bg="yellow").grid(column=0, row=5)



btn1=tk.Button(ff1, text='button ', command=command).grid(column=2, row=1)



btn2=tk.Button(ff2, text='button ', command=command).grid(column=2, row=2)







ttt1 = tk.Text(ff3, bg='light green', height=20)



ttt1.insert('1.0', tk.END)



ttt1.grid(row=5, column=4, rowspan=5, columnspan=10)



if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
from datetime import datetime
import os
import csv
from decimal import Decimal, InvalidOperation
import tkinter as tk
from tkinter import ttk



# Widget Classes #


class ValidatedMixin:
    """Adds a validation functionality to an input widget"""

    def __init__(self, *args, error_var=None, **kwargs):
        self.error = error_var or tk.StringVar()
        super().__init__(*args, **kwargs)

        vcmd = self.register(self._validate)
        invcmd = self.register(self._invalid)

        self.config(
            validate='all',
            validatecommand=(vcmd, '%P', '%s', '%S', '%V', '%i', '%d'),
            invalidcommand=(invcmd, '%P', '%s', '%S', '%V', '%i', '%d')
        )

    def _toggle_error(self, on=False):
        self.config(foreground=('red' if on else 'black'))

    def _validate(self, proposed, current, char, event, index, action):
        """The validation method.

        Don't override this, override _key_validate, and _focus_validate
        """
        self._toggle_error(False)
        self.error.set('')
        valid = True
        if event == 'focusout':
            valid = self._focusout_validate(event=event)
        elif event == 'key':
            valid = self._key_validate(
                proposed=proposed,
                current=current,
                char=char,
                event=event,
                index=index,
                action=action
            )
        return valid

    def _focusout_validate(self, **kwargs):
        return True

    def _key_validate(self, **kwargs):
        return True

    def _invalid(self, proposed, current, char, event, index, action):
        if event == 'focusout':
            self._focusout_invalid(event=event)
        elif event == 'key':
            self._key_invalid(
                proposed=proposed,
                current=current,
                char=char,
                event=event,
                index=index,
                action=action
            )

    def _focusout_invalid(self, **kwargs):
        """Handle invalid data on a focus event"""
        self._toggle_error(True)

    def _key_invalid(self, **kwargs):
        """Handle invalid data on a key event.

        By default we want to do nothing
        """

        pass

    def trigger_focusout_validation(self):
        valid = self._validate('', '', '', 'focusout', '', '')
        if not valid:
            self._focusout_invalid(event='focusout')
        return valid


class DateEntry(ValidatedMixin, ttk.Entry):

    def _key_validate(self, action, index, char, **kwargs):
        valid = True

        if action == '0':  # This is a delete action
            valid = True
        elif index in ('0', '1', '2', '3', '5', '6', '8', '9'):
            valid = char.isdigit()
        elif index in ('4', '7'):
            valid = char == '-'
        else:
            valid = False
        return valid

    def _focusout_validate(self, event):
        valid = True
        if not self.get():
            self.error.set('A value is required')
            valid = False
        try:
            datetime.strptime(self.get(), '%Y-%m-%d')
        except ValueError:
            self.error.set('Invalid date')
            valid = False
        return valid


class RequiredEntry(ValidatedMixin, ttk.Entry):

    def _focusout_validate(self, event):
        valid = True
        if not self.get():
            valid = False
            self.error.set('A value is required')
        return valid


class ValidatedCombobox(ValidatedMixin, ttk.Combobox):

    def _key_validate(self, proposed, action, **kwargs):
        valid = True
        # if the user tries to delete,
        # just clear the field
        if action == '0':
            self.set('')
            return True

        # get our values list
        values = self.cget('values')
        # Do a case-insensitve match against the entered text
        matching = [
            x for x in values
            if x.lower().startswith(proposed.lower())
        ]
        if len(matching) == 0:
            valid = False
        elif len(matching) == 1:
            self.set(matching[0])
            self.icursor(tk.END)
            valid = False
        return valid

    def _focusout_validate(self, **kwargs):
        valid = True
        if not self.get():
            valid = False
            self.error.set('A value is required')
        return valid


class ValidatedSpinbox(ValidatedMixin, tk.Spinbox):

    def __init__(self, *args, min_var=None, max_var=None,
                 focus_update_var=None, from_='-Infinity', to='Infinity',
                 **kwargs):
        super().__init__(*args, from_=from_, to=to, **kwargs)
        self.resolution = Decimal(str(kwargs.get('increment', '1.0')))
        self.precision = self.resolution.normalize().as_tuple().exponent
        # there should always be a variable,
        # or some of our code will fail
        self.variable = kwargs.get('textvariable') or tk.DoubleVar()

        if min_var:
            self.min_var = min_var
            self.min_var.trace('w', self._set_minimum)
        if max_var:
            self.max_var = max_var
            self.max_var.trace('w', self._set_maximum)
        self.focus_update_var = focus_update_var
        self.bind('<FocusOut>', self._set_focus_update_var)

    def _set_focus_update_var(self, event):
        value = self.get()
        if self.focus_update_var and not self.error.get():
            self.focus_update_var.set(value)

    def _set_minimum(self, *args):
        current = self.get()
        try:
            new_min = self.min_var.get()
            self.config(from_=new_min)
        except (tk.TclError, ValueError):
            pass
        if not current:
            self.delete(0, tk.END)
        else:
            self.variable.set(current)
        self.trigger_focusout_validation()

    def _set_maximum(self, *args):
        current = self.get()
        try:
            new_max = self.max_var.get()
            self.config(to=new_max)
        except (tk.TclError, ValueError):
            pass
        if not current:
            self.delete(0, tk.END)
        else:
            self.variable.set(current)
        self.trigger_focusout_validation()

    def _key_validate(self, char, index, current, proposed, action, **kwargs):
        valid = True
        min_val = self.cget('from')
        max_val = self.cget('to')
        no_negative = min_val >= 0
        no_decimal = self.precision >= 0
        if action == '0':
            return True

        # First, filter out obviously invalid keystrokes
        if any([
                (char not in ('-1234567890.')),
                (char == '-' and (no_negative or index != '0')),
                (char == '.' and (no_decimal or '.' in current))
        ]):
            return False

        # At this point, proposed is either '-', '.', '-.',
        # or a valid Decimal string
        if proposed in '-.':
            return True

        # Proposed is a valid Decimal string
        # convert to Decimal and check more:
        proposed = Decimal(proposed)
        proposed_precision = proposed.as_tuple().exponent

        if any([
            (proposed > max_val),
            (proposed_precision < self.precision)
        ]):
            return False

        return valid

    def _focusout_validate(self, **kwargs):
        valid = True
        value = self.get()
        min_val = self.cget('from')
        max_val = self.cget('to')

        try:
            value = Decimal(value)
        except InvalidOperation:
            self.error.set('Invalid number string: {}'.format(value))
            return False

        if value < min_val:
            self.error.set('Value is too low (min {})'.format(min_val))
            valid = False
        if value > max_val:
            self.error.set('Value is too high (max {})'.format(max_val))

        return valid


# Module Classes #



class LabelInput(tk.Frame):
    """A widget containing a label and input together."""

    def __init__(self, parent, label='', input_class=ttk.Entry,
                 input_var=None, input_args=None, label_args=None,
                 **kwargs):
        super().__init__(parent, **kwargs)
        input_args = input_args or {}
        label_args = label_args or {}
        self.variable = input_var

        if input_class in (ttk.Checkbutton, ttk.Button, ttk.Radiobutton):
            input_args["text"] = label
            input_args["variable"] = input_var
        else:
            self.label = ttk.Label(self, text=label, **label_args)
            self.label.grid(row=0, column=0, sticky=(tk.W + tk.E))
            input_args["textvariable"] = input_var

        self.input = input_class(self, **input_args)
        self.input.grid(row=1, column=0, sticky=(tk.W + tk.E))
        self.columnconfigure(0, weight=1)
        self.error = getattr(self.input, 'error', tk.StringVar())
        self.error_label = ttk.Label(self, textvariable=self.error)
        self.error_label.grid(row=2, column=0, sticky=(tk.W + tk.E))

    def grid(self, sticky=(tk.E + tk.W), **kwargs):
        super().grid(sticky=sticky, **kwargs)

    def get(self):
        try:
            if self.variable:
                return self.variable.get()
            elif type(self.input) == tk.Text:
                return self.input.get('1.0', tk.END)
            else:
                return self.input.get()
        except (TypeError, tk.TclError):
            # happens when numeric fields are empty.
            return ''

    def set(self, value, *args, **kwargs):
        if type(self.variable) == tk.BooleanVar:
                self.variable.set(bool(value))
        elif self.variable:
                self.variable.set(value, *args, **kwargs)
        elif type(self.input) in (ttk.Checkbutton, ttk.Radiobutton):
            if value:
                self.input.select()
            else:
                self.input.deselect()
        elif type(self.input) == tk.Text:
            self.input.delete('1.0', tk.END)
            self.input.insert('1.0', value)
        else:
            self.input.delete(0, tk.END)
            self.input.insert(0, value)


class DataRecordForm(tk.Frame):
    """The input form for our widgets"""

    def __init__(self, parent, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        # A dict to keep track of input widgets
        self.inputs = {}

        # Build the form
        # recordinfo section
        recordinfo = tk.LabelFrame(self, text="Record Information")

         # line 1
        self.inputs['Date'] = LabelInput(
            recordinfo, "Date",
            input_class=DateEntry,
            input_var=tk.StringVar()
        )
        self.inputs['Date'].grid(row=0, column=0)
        self.inputs['Time'] = LabelInput(
            recordinfo, "Time",
            input_class=ValidatedCombobox,
            input_var=tk.StringVar(),
            input_args={"values": ["8:00", "12:00", "16:00", "20:00"]}
        )
        self.inputs['Time'].grid(row=0, column=1)
        self.inputs['Technician'] = LabelInput(
            recordinfo, "Technician",
            input_class=RequiredEntry,
            input_var=tk.StringVar()
        )
        self.inputs['Technician'].grid(row=0, column=2)

       # line 2
        self.inputs['Lab'] = LabelInput(
            recordinfo, "Lab",
            input_class=ValidatedCombobox,
            input_var=tk.StringVar(),
            input_args={"values": ["A", "B", "C", "D", "E"]}
        )
        self.inputs['Lab'].grid(row=1, column=0)
        self.inputs['Plot'] = LabelInput(
            recordinfo, "Plot",
            input_class=ValidatedCombobox,
            input_var=tk.StringVar(),
            input_args={"values": [str(x) for x in range(1, 21)]}
        )
        self.inputs['Plot'].grid(row=1, column=1)
        self.inputs['Seed sample'] = LabelInput(
            recordinfo, "Seed sample",
            input_class=RequiredEntry,
            input_var=tk.StringVar()
        )
        self.inputs['Seed sample'].grid(row=1, column=2)

        recordinfo.grid(row=0, column=0, sticky="we")

        # Environment Data
        environmentinfo = tk.LabelFrame(self, text="Environment Data")
        self.inputs['Humidity'] = LabelInput(
            environmentinfo, "Humidity (g/m³)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '0.5', "to": '52.0', "increment": '.01'}
        )
        self.inputs['Humidity'].grid(row=0, column=0)
        self.inputs['Light'] = LabelInput(
            environmentinfo, "Light (klx)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '0', "to": '100', "increment": '.01'}
        )
        self.inputs['Light'].grid(row=0, column=1)
        self.inputs['Temperature'] = LabelInput(
            environmentinfo, "Temperature (°C)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '4', "to": '40', "increment": '.01'}
        )
        self.inputs['Temperature'].grid(row=0, column=2)
        self.inputs['Equipment Fault'] = LabelInput(
            environmentinfo, "Equipment Fault",
            input_class=ttk.Checkbutton,
            input_var=tk.BooleanVar()
        )
        self.inputs['Equipment Fault'].grid(row=1, column=0, columnspan=3)
        environmentinfo.grid(row=1, column=0, sticky="we")

        # Plant Data section
        plantinfo = tk.LabelFrame(self, text="Plant Data")

        self.inputs['Plants'] = LabelInput(
            plantinfo, "Plants",
            input_class=ValidatedSpinbox,
            input_var=tk.IntVar(),
            input_args={"from_": '0', "to": '20'}
        )
        self.inputs['Plants'].grid(row=0, column=0)
        self.inputs['Blossoms'] = LabelInput(
            plantinfo, "Blossoms",
            input_class=ValidatedSpinbox,
            input_var=tk.IntVar(),
            input_args={"from_": '0', "to": '1000'}
        )
        self.inputs['Blossoms'].grid(row=0, column=1)
        self.inputs['Fruit'] = LabelInput(
            plantinfo, "Fruit",
            input_class=ValidatedSpinbox,
            input_var=tk.IntVar(),
            input_args={"from_": '0', "to": '1000'}
        )
        self.inputs['Fruit'].grid(row=0, column=2)
        # Height data
        # create variables to be updated for min/max height
        # they can be referenced for min/max variables
        min_height_var = tk.DoubleVar(value='-infinity')
        max_height_var = tk.DoubleVar(value='infinity')

        self.inputs['Min Height'] = LabelInput(
            plantinfo, "Min Height (cm)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '0', "to": '1000', "increment": '.01',
                        "max_var": max_height_var,
                        "focus_update_var": min_height_var}
        )
        self.inputs['Min Height'].grid(row=1, column=0)
        self.inputs['Max Height'] = LabelInput(
            plantinfo, "Max Height (cm)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '0', "to": '1000', "increment": '.01',
                        "min_var": min_height_var,
                        "focus_update_var": max_height_var}
        )
        self.inputs['Max Height'].grid(row=1, column=1)
        self.inputs['Median Height'] = LabelInput(
            plantinfo, "Median Height (cm)",
            input_class=ValidatedSpinbox,
            input_var=tk.DoubleVar(),
            input_args={"from_": '0', "to": '1000', "increment": '.01',
                        "min_var": min_height_var,
                        "max_var": max_height_var}
        )
        self.inputs['Median Height'].grid(row=1, column=2)

        plantinfo.grid(row=2, column=0, sticky="we")

        # Notes section
        self.inputs['Notes'] = LabelInput(
            self, "Notes",
            input_class=tk.Text,
            input_args={"width": 75, "height": 10}
        )
        self.inputs['Notes'].grid(sticky="w", row=3, column=0)

        # default the form
        self.reset()

    def get(self):
        """Retrieve data from form as a dict"""

        # We need to retrieve the data from Tkinter variables
        # and place it in regular Python objects

        data = {}
        for key, widget in self.inputs.items():
            data[key] = widget.get()
        return data

    def reset(self):
        """Resets the form entries"""

        # gather the values to keep for each lab
        lab = self.inputs['Lab'].get()
        time = self.inputs['Time'].get()
        technician = self.inputs['Technician'].get()
        plot = self.inputs['Plot'].get()
        plot_values = self.inputs['Plot'].input.cget('values')

        # clear all values
        for widget in self.inputs.values():
            widget.set('')

        current_date = datetime.today().strftime('%Y-%m-%d')
        self.inputs['Date'].set(current_date)
        self.inputs['Time'].input.focus()

        # check if we need to put our values back, then do it.
        if plot not in ('', plot_values[-1]):
            self.inputs['Lab'].set(lab)
            self.inputs['Time'].set(time)
            self.inputs['Technician'].set(technician)
            next_plot_index = plot_values.index(plot) + 1
            self.inputs['Plot'].set(plot_values[next_plot_index])
            self.inputs['Seed sample'].input.focus()


    def get_errors(self):
        """Get a list of field errors in the form"""

        errors = {}
        for key, widget in self.inputs.items():
            if hasattr(widget.input, 'trigger_focusout_validation'):
                widget.input.trigger_focusout_validation()
            if widget.error.get():
                errors[key] = widget.error.get()

        return errors


class Application(tk.Tk):
    """Application root window"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.title("ABQ Data Entry Application")
        self.resizable(width=False, height=False)

        ttk.Label(
            self,
            text="ABQ Data Entry Application",
            font=("TkDefaultFont", 16)
        ).grid(row=0)


        self.recordform = DataRecordForm(self)
        self.recordform.grid(row=1, padx=10)

        self.savebutton = ttk.Button(self, text="Save", command=self.on_save)
        self.savebutton.grid(sticky="e", row=2, padx=10)

        # status bar
        self.status = tk.StringVar()
        self.statusbar = ttk.Label(self, textvariable=self.status)
        self.statusbar.grid(sticky="we", row=3, padx=10)

        self.records_saved = 0

    def on_save(self):
        """Handles save button clicks"""

        # Check for errors first

        errors = self.recordform.get_errors()
        if errors:
            self.status.set(
                "Cannot save, error in fields: {}"
                .format(', '.join(errors.keys()))
            )
            return False

        # For now, we save to a hardcoded filename with a datestring.
        # If it doesnt' exist, create it,
        # otherwise just append to the existing file
        datestring = datetime.today().strftime("%Y-%m-%d")
        filename = "abq_data_record_{}.csv".format(datestring)
        newfile = not os.path.exists(filename)

        data = self.recordform.get()

        with open(filename, 'a') as fh:
            csvwriter = csv.DictWriter(fh, fieldnames=data.keys())
            if newfile:
                csvwriter.writeheader()
            csvwriter.writerow(data)

        self.records_saved += 1
        self.status.set(
            "{} records saved this session".format(self.records_saved)
        )
        self.recordform.reset()


if __name__ == "__main__":

    app = Application()
    app.mainloop()
from decimal import Decimal

decimals = [0.25, 0.5, 1.25, 3, 0.6, 0.84]


for d in decimals:
    d = Decimal(str(d))  # Cast as string for proper fraction
    nominator, denominator = d.as_integer_ratio()
    a = nominator
    if denominator == 1:
        print(a)
    else:
        print(nominator, denominator, sep="/")
'''
Created on Oct 21, 2017

@author: Aditya
This program demonstrates the use of spinbox and combobox in tkinter
'''

import tkinter as tk
from tkinter import ttk
import datetime
import calendar

class simpleCalender:
    '''
    This class creates a simple date of birth app using tkinter
    '''
    def __init__(self, master):
        ttk.Label(master, text = 'DATE OF BIRTH').pack()
        #
        
        ttk.Label(master, text = 'Select Year').pack()
        self.year = tk.StringVar()
        self.spinbxyear = tk.Spinbox(master, from_ = 1900, 
                                 to = datetime.datetime.now().year,
                                 textvariable = self.year)
        self.spinbxyear.pack()
        
        #
        
        ttk.Label(master, text = 'Select Month').pack()
        self.month = tk.StringVar()
        self.combobox = ttk.Combobox(master, textvariable = self.month) # textvariable - variable tied to value selected in combobox
        self.combobox.pack()
        
        # values which combobox can take
        self.combobox.config(values = ('January', 'February', 'March', 'April',
                                       'May', 'June', 'July', 'August', 'September',
                                       'October', 'November', 'December'))
        self.combobox.set('January')
        
        #
        
        ttk.Label(master, text = 'Select Date').pack()
        self.dateofmonth = tk.StringVar()
        self.lastday = 31
        self.spinbxday = tk.Spinbox(master, from_ = 1, to = 31,
                                     textvariable = self.dateofmonth)
        self.spinbxday.pack()
        
        #
        
        ttk.Button(master, text = "Get Date of Birth", command = self.getDOB).pack()
        
        #
        # Display Date of Birth
        self.displaydob = ttk.Label(master, text = "Please select a date")
        self.displaydob.pack()
        
     METHODS 
    def getyear(self):
        if int(self.year.get()) in range(int(self.spinbxyear['from']), int(self.spinbxyear['to']+1)):
            return int(self.year.get())
        else:
            return -1
    
    def getmonth(self):
        if self.month.get() in self.combobox['values']:
            return self.month.get()
        else:
            return -1
        
    def getdate(self):
        if int(self.dateofmonth.get()) in range(1, 32):
            return int(self.dateofmonth.get())
        else:
            return -1

    def getDOB(self):
        year = self.getyear()
        month = self.getmonth()
        
        if calendar.isleap(year) and month=='February':
            self.lastday =  29
        elif not calendar.isleap(year) and month=='February':
            self.lastday = 28
        elif month in ('January', 'March', 'May', 'July', 'August', 'October', 'December'):
            self.lastday = 31
        elif month in ('April', 'June', 'September', 'November'):
            self.lastday = 30
        else:
            self.lastday = -1
        
        if self.getdate() > self.lastday or self.getdate()<1 or self.lastday == -1:
            date = -1
        else:
            date = self.getdate()
        
        if year != -1 and month != -1 and date != -1:
            self.displaydob.config(text = '{0} {1}, {2}'.format(month, date, year))
        else:
            self.displaydob.config(text = "Invalid Date")

def launchSimpleCalenderApp():
    root = tk.Tk()
    simpleCalender(root)
    tk.mainloop()

def test():
    launchSimpleCalenderApp()

if __name__ == '__main__': test()
import tkinter as tk

root = tk.Tk()

explanation = """At present, only GIF and PPM/PGM
formats are supported, but an interface 
exists to allow additional image file
formats to be added easily."""

w2 = tk.Label(root, 
              justify=tk.LEFT,
              padx = 10, 
              text=explanation).pack(side="left")
root.mainloop()
from tkinter import Frame, Label, Entry

form = Frame()
label = Label(form, text='Name')
name_input = Entry(form)
label.grid(row=0, column=0)
name_input.grid(row=1, column=0)

form.pack()
form.mainloop()
import tkinter as tk

counter = 0


def counter_label(label):
    counter = 0

    def count():
        global counter
        counter += 1
        label.config(text=str(counter))
        # Calls count() after every 1000ms
        label.after(1000, count)

    count()


root = tk.Tk()
root.title("Counting Seconds")
label = tk.Label(root, fg="dark green")
label.pack()
counter_label(label)
button = tk.Button(root, text="Stop", width=25, command=root.destroy)
button.pack()
root.mainloop()
import base64
from tkinter import *

# This is a base64 encoded GIF image. One neat trick with using Python to create GUIs
# is you can embed your graphics into the code so anything you want to display doesn't
# need to be pre-loaded or downloaded separately. You can only use GIFs in this way.

root = Tk()
bgColor = "#EDEDED"

# Here we are loading our base64 image data and placing it in our window using
# the Label widget.  You will also see the grid method. There are three styles
# of window management in Tkinter. Using grid allows us to place widgets according
# to X,Y coordinates which makes designing your GUI as easy as plotting it out on
# a sheet paper before writing your code.
gif = PhotoImage(data=gifBase)
displayGif = Label(root, image=gif, borderwidth=10, bg=bgColor).grid(
    row=0, rowspan=6, columnspan=2
)

root.mainloop()

import tkinter as tk
from tkinter import ttk

class DisplayApp:
    def __init__(self, master):
        self.frame = ttk.Frame(master, width = 100, height = 100)   # frame height and width are in pixel
        self.frame.pack()
        self.frame.config(relief = tk.RAISED)   # to define frame boarder
        self.button = ttk.Button(self.frame, text = 'Click for Magic')
        self.button.config(command = self.performMagic)
        self.button.grid()  # use grid geometry manager
        self.frame.config(padding = (30,15))
        
        self.lbfrm = ttk.LabelFrame(master, width = 100, height = 100)
        self.lbfrm.config(padding = (30, 15))
        self.lbfrm.config(text = "Magic Below")
        self.lbfrm.pack()
        self.label = ttk.Label(self.lbfrm, text = "Waiting for Magic")
        self.label.grid()
        
    def performMagic(self):
        if self.label['text'] == "Waiting for Magic":
            self.label.config(text = 'Magic Performed')
        else:
            self.label.config(text = "Waiting for Magic")
            
def DisplayAppLaunch():
    root = tk.Tk()
    DisplayApp(root)
    tk.mainloop()
    
if __name__ == '__main__':
    DisplayAppLaunch()
from tkinter import *
def add():
    s1=e1.get()
    s2=e2.get()
    if s1=='' or s2=='':
        err.set("Field cannot be empty")
    else:
        try:
            x=int(s1)
            y=int(s2)
            z=x+y
            res.set(str(z))
        except ValueError:
            err.set("Invalid Input...")
    return
window=Tk()
window.title("Calculator")
res=StringVar()
err=StringVar()
l1=Label(window,text="Enter Input:",font="Times 20")
e1=Entry(window,font="Times 20")

l2=Label(window,text="+",font="Times 20")
e2=Entry(window,font="Times 20")

l3=Label(window,text="=",font="Times 20")
e3=Entry(window,font="Times 20",textvariable=res)

b1=Button(window,text="add",command=add,font="Times 20")
l4=Label(window,textvariable=err,font='Times 20',fg='red')

l1.grid(row=0,column=0)
e1.grid(row=0,column=1)

l2.grid(row=0,column=2)
e2.grid(row=0,column=3)

l3.grid(row=0,column=4)
e3.grid(row=0,column=5)

b1.grid(row=0,column=6)
l4.grid(row=1,column=3)

from tkinter import *


def show_entry_fields():
    print("First Name: %s\nLast Name: %s" % (e1.get(), e2.get()))
    e1.delete(0, END)
    e2.delete(0, END)


master = Tk()
Label(master, text="First Name").grid(row=0)
Label(master, text="Last Name").grid(row=1)

e1 = Entry(master)
e2 = Entry(master)
e1.insert(10, "Miller")
e2.insert(10, "Jill")

e1.grid(row=0, column=1)
e2.grid(row=1, column=1)

Button(master, text="Quit", command=master.quit).grid(row=3, column=0, sticky=W, pady=4)
Button(master, text="Show", command=show_entry_fields).grid(
    row=3, column=1, sticky=W, pady=4
)

mainloop()

# not saved
''' code here manages copyright notice '''
# not saved
authors = "David B. Sher"
# not saved
thanks = "John Zelle"
# not saved
year = "2020"

# not saved
NO_SAVE = '''
# not saved'''


# not saved
save_file = __file__

import tkinter as tk
import sys, io, os
import subprocess as subp
import re
from datetime import datetime
from tkinter import filedialog
from os import getcwd,system
from keyword import iskeyword
from math import sqrt


from contextlib import redirect_stdout
# begin shell not in app
# redirect stderr and stdout to strings
GUI_DEBUG=False  # can turn on and off debugging by changing this

def debug_print(to_print,end=''):
  ''' calls a print statement and puts it into the shell window '''
  global shell
  global GUI_DEBUG
  if GUI_DEBUG:
    shell.insert(tk.END,to_print+end,'debug')
    shell.tag_configure('debug',foreground='blue',font=('Consolas', 12, 'italic'))
    shell.mark_set(tk.INSERT, tk.END) # make sure the input cursor is at the end
    shell.cursor = shell.index(tk.INSERT) # save the input position
# end shell not in app

# begin shell not in app
say_number = 0    # makes all the tags different
def say(to_print,color='#884400',font=('serif',12),end='\n'):
  global say_number
  ''' allows programs to communicate with shell, don't use with stand alone apps '''
  global shell
  shell.insert(tk.END,to_print+end,'say{}'.format(say_number))
  shell.tag_configure('say{}'.format(say_number),foreground=color,font=font)
  say_number += 1 # will not change formating of other things said
  shell.see(tk.END) # make sure it is visible
  shell.mark_set(tk.INSERT, tk.END) # make sure the input cursor is at the end
  shell.cursor = shell.index(tk.INSERT) # save the input position

def ask(to_print,color='darkgreen',font=('serif',12),end=': '):
  ''' asks user a question and returns response '''
  global shell
  shell.set_asking(True) # make sure the shell doesn't execute user input
  say(to_print,color,font,end)
  shell.wait_variable(shell.cmd)
  shell.set_asking(False) # the shell can execute user input again
  return shell.cmd.get()
  
  
''' This is the code for the shell widget in python '''
class Shell(tk.Text):
  def __init__(self, parent, **kwargs):
    tk.Text.__init__(self, parent, **kwargs)
    self.bind('<Key>', self.on_key) # setup handler to process pressed keys
    self.cmd = tk.StringVar()        # hold the last command issued
    self.set_asking(False)          # execute user input
    self.show_prompt()

  def insert_text(self, txt='', end='\n'):
    ''' Appends the given text to the end of the Text Box. '''
    self.insert(tk.END, txt+end)
    self.see(tk.END) # make sure it is visible

  def insert_error(self, txt='', end='\n'):
    ''' Appends an error message to the end of the Text Box.  '''
    self.insert(tk.END, txt+end,'error')
    self.see(tk.END) # make sure it is visible
    shell.tag_configure('error',foreground='red',font=('Consolas', 12, 'bold'))

  def set_asking(self,asks):
    ''' When true doesn't execute user input '''
    self.asking = asks

  def get_asking(self):
    return self.asking

  def show_prompt(self):
    ''' Prompts for a command. '''
    self.insert_text('>> ', end='')
    self.mark_set(tk.INSERT, tk.END) # make sure the input cursor is at the end
    self.cursor = self.index(tk.INSERT) # save the input position

  # handler to process keyboard input
  def on_key(self, event):
    #print(event)
    if event.keysym == 'Up':
      # show the last command
      self.delete(self.cursor, tk.END)
      self.insert(self.cursor, self.cmd)
      return "break" # disable the default handling of up key
    if event.keysym == 'Down':
      return "break" # disable the default handling of down key
    if event.keysym in ('Left', 'BackSpace'):
      current = self.index(tk.INSERT) # get the current position of the input cursor
      if self.compare(current, '==', self.cursor):
        # if input cursor is at the beginning of input (after the prompt), do nothing
        return "break"
    if event.keysym == 'Return':
      # extract the command input
      cmd = self.get(self.cursor, tk.END).strip()
      self.insert_text() # advance to next line
      if cmd.startswith('`'):
        # it is an external command
        self.system(cmd)
      else:
        # it is python statement
        self.execute(cmd)
      self.show_prompt()
      return "break" # disable the default handling of Enter key
    if event.keysym == 'Escape':
      self.master.destroy() # quit the shell

  def execute(self, cmd):
    ''' execute input from user '''
    exec_result = io.StringIO()
    exec_error = io.StringIO()
    sys.stdout = exec_result
    sys.stderr = exec_error
    self.cmd.set(cmd) # save the command
    if not self.get_asking():  # don't execute user input when ask
      # capture the result and error from exec to shell
      try:
        exec(self.cmd.get(), globals())
      except: # catch all exceptions
        print(sys.exc_info(),file=sys.stderr)
      # then append the output of exec() in the Text box
      self.insert_text(exec_result.getvalue(), end='')
      self.insert_error(exec_error.getvalue(), end='')

  def system(self, cmd):
    ''' execute a command '''
    self.cmd.set(cmd)  # save the command
    if not self.get_asking():
      try:
        # extract the actual command
        cmd = cmd[cmd.index('`')+1:cmd.rindex('`')]
        proc = subp.Popen(cmd, stdout=subp.PIPE, stderr=subp.PIPE, text=True)
        stdout, stderr = proc.communicate(5) # get the command output
        # append the command output to Text box
        self.insert_text(stdout)
      except: # catch all exceptions
        self.insert_error(stderr)

''' This is the code for the clicks widget in python (text window with autoindent '''
class IndentText(tk.Text):
  def __init__(self, parent, **kwargs):
    tk.Text.__init__(self, parent, **kwargs)
    self.bind('<Key>', self.on_key) # setup handler to process pressed keys

  def insert_text(self, txt='', end='\n'):
    ''' Appends the given text to the end of the Text Box. '''
    self.insert(tk.END, txt+end)
    self.see(tk.END) # make sure it is visible

  # handler to process keyboard input
  def on_key(self, event):
    debug_print('In on_key: '+str(event),end='\n')
    if event.char == '\r':
      debug_print('Hit return',end='\n')
      debug_print('Cursor: '+tk.INSERT,end='\n')
      # extract the command input
      line = self.get('current linestart', 'current lineend')
      after = self.get('insert','current lineend')
      self.delete('insert','current lineend') # delete the characters to be moved to the end of the line
      debug_print('Indent_text line: '+line+'\nAfter: '+after,end='\n')
      self.add_indent(line,after)
      return "break" # disable the default handling of Enter key

  def add_indent(self,line,after):
    ''' Auto Indents Line '''
    debug_print('AutoIndent line: '+line,end='\n')
    spaces = re.match(r"^(\s*).*$", line)
    debug_print('Inserting: "'+spaces.group(1)+after,end='"\n')
    self.insert(tk.INSERT,'\n'+spaces.group(1)+after)
    self.mark_set('insert','insert -'+str(len(after))+' chars')
    self.see('insert')

# end shell not in app
''' this sets up the window with
  * header (with project file)
  * graphics
  * python shell
  * copyright notice
'''
root = tk.Tk()
root.title('Project in '+__file__)
root.configure(bg='darkblue')
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

# position for each frame
row_number = 0


# GUIframe holds clickable stuff
GUIframe = tk.Frame(root)
GUIframe.grid(row=row_number)
row_number+=1  # next row
GUIframe.columnconfigure(0,weight=1)
GUIframe.rowconfigure(0,weight=1)
# top frame will hold graphics window
top = tk.Frame(GUIframe)
top.pack(side=tk.LEFT)
top.columnconfigure(0, weight=1)
top.rowconfigure(0, weight=1)

# begin shell not in app
# buttons frame holds control buttons
buttons = tk.Frame(GUIframe)
buttons.pack(side=tk.RIGHT)


# click_toggle will switch between the python shell and the clicks editor
click_toggle = tk.Button(buttons,
                        width = 6,
                        text='Edit\nClicks',
                        bg = 'lightgreen',
                        fg = 'black',
                        font = 'courier',
                        justify = 'cent')
click_toggle.pack()

# make_app_button will call make_app to create an app from the code
make_app_button = tk.Button(buttons,
                        width = 4,
                        text='Make\nApp',
                        bg = 'lightgreen',
                        fg = 'black',
                        font = 'courier',
                        justify = 'cent')
make_app_button.pack()

# names_ button will output to the shell all the names of the graphics and GUI objects
names_button = tk.Button(buttons,
                        width = 5,
                        text = 'Names',
                        bg = 'lightgreen',
                        fg = 'black',
                        font = 'courier',
                        justify = 'cent')
names_button.pack()

                         
# end shell not in app

# bottom frame will hold shell
bottom = tk.Frame(root)
bottom.grid(row=row_number)
row_number+=1  # next row
bottom.columnconfigure(0, weight=1)
bottom.rowconfigure(0, weight=1)

# copy_frame will hold copyright information
copy_frame = tk.Frame(root,height=16)
copy_frame.grid(row=row_number)
row_number+=1  # next row
copy_frame.columnconfigure(0, weight=1)
copy_frame.rowconfigure(0, weight=1)

# begin shell not in app
''' create scrollbars for shell '''
# Vertical (y) Scroll Bar
shell_scroll = tk.Scrollbar(bottom)
shell_scroll.pack(side=tk.RIGHT, fill=tk.Y)
shell_hscroll = tk.Scrollbar(bottom, orient=tk.HORIZONTAL)
shell_hscroll.pack(side=tk.BOTTOM, fill=tk.X)
''' put shell window into bottom frame '''
shell = Shell(bottom,wrap=tk.NONE, yscrollcommand=shell_scroll.set, xscrollcommand=shell_hscroll.set, width=80, height=16,  font=('Consolas', 12))
shell.pack(fill=tk.BOTH, expand = tk.YES, side="left")
shell.focus_set()
shell.columnconfigure(0, weight=1)
shell.rowconfigure(0, weight=1)
# Configure the scrollbars
shell_scroll.config(command=shell.yview)
shell_hscroll.config(command=shell.xview)

# clicks window
clicks_window = IndentText(bottom,wrap=tk.NONE, yscrollcommand=shell_scroll.set, xscrollcommand=shell_hscroll.set, width=80, height=16,  font=('Lucida Console', 12))


# end shell not in app


def my_exec(cmd, globals=None, locals=None, description='source string'):
    ''' executes a string (like from my_clicks and reports where errors occured in shell '''
    try:
        exec(cmd, globals, locals)
    except SyntaxError as err:
        error_class = err.__class__.__name__
        detail = err.args[0]
        line_number = err.lineno
    except (NameError, AttributeError) as err: 
        error_class = err.__class__.__name__
        detail = err.args[0]
        line_number = err.lineno
    except Exception as err:
        error_class = err.__class__.__name__
        detail = err.args[0]
        cl, exc, tb = sys.exc_info()
        line_number = traceback.extract_tb(tb)[-1][1]
    else:
        return
    say("%s at line %d of %s: %s" % (error_class, line_number, description, detail),color='red')


''' define a canvas that captures mouse events '''
GRAPHICS_WIDTH = 600
GRAPHICS_HEIGHT = 300
class MouseCanvas(tk.Canvas):
  def __init__(self,parent=top,bg='snow',width=GRAPHICS_WIDTH,height=GRAPHICS_HEIGHT):
    tk.Canvas.__init__(self,parent,bg=bg,width=width,height=height)
    self.click_point = tk.StringVar()
    self.click_point.set('Point(0,0)')  # start with 0,0 clicked
    self.bind('<Button-1>', self.mouse_click)
    self.bind('<Motion>', self.mouse_move)
    self.tracking = False # when tracking draws gray horizontal and vertical lines for mouse

  def mouse_click(self,event):
    ''' puts the last clicked mouse position into the variable mouse_click_position '''
    self.click_point.set('Point('+str(event.x)+','+str(event.y)+')')
    self.mouse_point = Point(event.x,event.y)

  def get_mouse_click(self):
    ''' waits for a mouse click and returns the point '''
    debug_print('Waiting for click',end='\n')
    self.wait_variable(self.click_point)
    debug_print('Clicked',end='\n')
    return self.mouse_point

  def toggle_tracking(self):
    if self.tracking:
      # delete tracking lines
      self.delete(self.vertical)
      self.delete(self.horizontal)
      self.tracking = False
    else:
      # put down initial tracking lines and draw them
      self.vertical = self.create_line(0,0,0,GRAPHICS_HEIGHT,fill='lightgray')
      self.horizontal = self.create_line(0,0,GRAPHICS_WIDTH,0,fill='lightgray')
      self.tracking = True
      

  def mouse_move(self,event):
    if self.tracking:
      # delete old tracking lines
      self.delete(self.vertical)
      self.delete(self.horizontal)
      # draw new tracking lines
      self.vertical = self.create_line(event.x,0,event.x,GRAPHICS_HEIGHT,fill='lightgray')
      self.horizontal = self.create_line(0,event.y,GRAPHICS_WIDTH,event.y,fill='lightgray')
      
    
  

''' put graphics canvas in top frame '''
graphics = MouseCanvas()
graphics.pack(fill=tk.BOTH, expand = 1)


copyright_string = tk.StringVar()
copyright_string.set('Copyright {} {} with thanks to {}'.format(authors,year,thanks))
copyright_label = tk.Label(copy_frame,textvariable=copyright_string)
copyright_label.pack()

''' adds an author to the copyright statement '''
def add_author(auth):
  global authors
  authors += ' and ' + auth
  copyright_string.set('Copyright {} {} with thanks to {}'.format(authors,year,thanks))
  save_gui4sher()

''' sets the copyright year to the present year '''
def update_year():
  global year
  year = str(datetime.now().year)
  copyright_string.set('Copyright {} {} with thanks to {}'.format(authors,year,thanks))
  save_gui4sher()

''' adds an author to the copyright statement '''
def add_thanks(thank):
  global thanks
  thanks += ' and ' + thank
  copyright_string.set('Copyright {} {} with thanks to {}'.format(authors,year,thanks))
  save_gui4sher()

''' Copyright David B. Sher 2020 '''

''' code here manages objects in the graphics window '''
objects = [] # no objects initially

# Module Exceptions

class GraphicsError(Exception):
    """Generic error class for graphics module exceptions."""
    pass

OBJ_ALREADY_DRAWN = "Object currently drawn"
UNSUPPORTED_METHOD = "Object doesn't support operation"
BAD_OPTION = "Illegal option value"


object_number = 0; # used to number objects

class GraphicsObject:

    """Generic base class for all of the drawable objects"""
    # A subclass of GraphicsObject should override _draw and
    #   and _move methods.
    
    def __init__(self, fill='',outline='black',width='1'):
        global object_number
        # options is a list of strings indicating which options are
        # legal for this object.
        
        # When an object is drawn, canvas is set to the GraphWin(canvas)
        #    object where it is drawn and id is the TK identifier of the
        #    drawn shape.
        self.canvas = None
        self.id = None

        # config is the dictionary of configuration options for the widget.
        self.name = 'object'+str(object_number)
        object_number+=1 # each object starts with a unique name
        self.set_fill(fill)
        self.set_outline(outline)
        self.set_width(width)
        

    def set_name(self, name):
        """Set name of object to name"""
        self.name = name
        if self.id:
            save_gui4sher() # update the save file
            root.update()

    def get_name(self):
      return self.name
        
    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.canvas.itemconfig(self.id,fill=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def get_fill(self):
      return self.fill
        
    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.canvas.itemconfig(self.id,outline=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def get_outline(self):
      return self.outline
        
    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.canvas.itemconfig(self.id,width=self.get_width())
          save_gui4sher() # update the save file
          root.update()

    def get_width(self):
      return self.width

    def draw(self):

        """Draw the object in graphics, which should be a Canvas
        object.  A GraphicsObject may only be drawn into one
        window. Raises an error if attempt made to draw an object that
        is already visible."""

        global objects
        self.canvas = graphics
        self.id = self._draw(graphics)
        # add colors, fonts etc to drawn object
        # if the objects lacks one of these ignore
        try: self.set_fill(self.get_fill())
        except (NameError, AttributeError): None
        try:  self.set_outline(self.get_outline())
        except (NameError, AttributeError): None
        try:  self.set_width(self.get_width())
        except (NameError, AttributeError): None
        try:  self.set_arrow(self.get_arrow())
        except (NameError, AttributeError): None
        try:  self.set_font(self.get_font())
        except (NameError, AttributeError): None
        try:  self.set_justify(self.get_justify())
        except (NameError, AttributeError): None
        objects.append(self)
        save_gui4sher() # update the save file
        root.update()
        return self

            
    def undraw(self):

        """Undraw the object (i.e. hide it). Returns silently if the
        object is not currently drawn."""
        
        global objects
        if self.canvas: # if object has been drawn
          self.canvas.delete(self.id)
          self.canvas = None
          self.id = None
          objects.remove(self)
          save_gui4sher() # update the save file


    def move(self, dx, dy):

        """move object dx units in x direction and dy units in y
        direction"""
        
        self._move(dx,dy)
        if self.canvas: # if object has been drawn
            x = dx
            y = dy
            self.canvas.move(self.id, x, y)
            root.update()
            save_gui4sher() # update the save file
           


    def _draw(self, canvas):
        """draws appropriate figure on canvas with options provided
        Returns Tk id of item drawn"""
        pass # must override in subclass


    def _move(self, dx, dy):
        """updates internal state of object to move it dx,dy units"""
        pass # must override in subclass

    def _to_exec(self):
      """ create statements that initialize and object and draw it """
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'({})', # parameters of object will be done with a .format
                     self.name + '.set_name(\'' + self.get_name() + '\')',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)
      

         
class Point(GraphicsObject):
    def __init__(self, x, y):
        GraphicsObject.__init__(self)
        self.set_fill = self.set_outline
        self.x = float(x)
        self.y = float(y)

    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
        
    def _draw(self, canvas):
        return canvas.create_rectangle(self.x-2,self.y-1,self.x+2,self.y+2,fill=self.get_fill())
        
    def _move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy
        
    def clone(self):
        other = Point(self.x,self.y)
        other.set_name(self.name)
        other.outline = self.outline
        return other
                
    def get_x(self): return self.x
    def get_y(self): return self.y
    def to_exec(): return super()._to_exec.format('' + self.x + ',' + self.y)

class _BBox(GraphicsObject):
    # Internal base class for objects represented by bounding box
    # (opposite corners) Line segment is a degenerate case.
    
    def __init__(self, p1, p2):
        GraphicsObject.__init__(self)
        self.p1 = p1.clone()
        self.p2 = p2.clone()

    def _move(self, dx, dy):
        self.p1.x = self.p1.x + dx
        self.p1.y = self.p1.y + dy
        self.p2.x = self.p2.x + dx
        self.p2.y = self.p2.y  + dy
                
    def get_p1(self): return self.p1.clone()

    def get_p2(self): return self.p2.clone()
    
    def get_center(self):
        p1 = self.p1
        p2 = self.p2
        return Point((p1.x+p2.x)/2.0, (p1.y+p2.y)/2.0)

    
class Rectangle(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)

    def __repr__(self):
        return "Rectangle({}, {})".format(str(self.p1), str(self.p2))
    
    def _draw(self, canvas):
        p1 = self.p1
        p2 = self.p2
        try:
          return canvas.create_rectangle(p1.x,p1.y,p2.x,p2.y,outline=self.get_outline(),fill=self.get_fill(),width=self.get_width())
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        
    def clone(self):
        other = Rectangle(self.p1, self.p2)
        other.set_name(self.name)
        other.set_fill(self.fill)
        other.set_outline(self.outline)
        other.set_width(self.width)
        return other
    
    def to_exec(self):
      ''' creates commands to create the rectangle '''
      return super()._to_exec().format('Point('+str(self.p1.x)+','+str(self.p1.y)+'),Point('+str(self.p2.x)+','+str(self.p2.y)+')')


class Oval(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)

    def __repr__(self):
        return "Oval({}, {})".format(str(self.p1), str(self.p2))

        
    def clone(self):
        other = Oval(self.p1, self.p2)
        other.set_name(self.name)
        other.set_fill(self.fill)
        other.set_outline(self.outline)
        other.set_width(self.width)
        return other
   
    def _draw(self, canvas):
        p1 = self.p1
        p2 = self.p2
        try:
          return canvas.create_oval(p1.x,p1.y,p2.x,p2.y,outline=self.get_outline(),fill=self.get_fill(),width=self.get_width())
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None

    def to_exec(self):
      ''' creates commands to create the oval '''
      return super()._to_exec().format('Point('+str(self.p1.x)+','+str(self.p1.y)+'),Point('+str(self.p2.x)+','+str(self.p2.y)+')')
    
class Circle(Oval):
    
    def __init__(self, center, radius):
        p1 = Point(center.x-radius, center.y-radius)
        p2 = Point(center.x+radius, center.y+radius)
        Oval.__init__(self, p1, p2)
        self.radius = radius

    def __repr__(self):
        return "Circle({}, {})".format(str(self.get_center()), str(self.radius))
        
    def clone(self):
        other = Circle(self.get_center(), self.radius)
        other.set_name(self.get_name())
        other.set_fill(self.get_fill())
        other.set_outline(self.get_outline())
        other.set_width(self.get_width())
        return other
        
    def get_radius(self):
        return self.radius

    def to_exec(self):
      ''' creates commands to create the circle '''
      return super()._to_exec().format('Point('+str(self.get_center().x)+','+str(self.get_center().y)+'),'+str(self.radius))

                  
class Line(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)
        self.set_arrow('none')
   
    def __repr__(self):
        return "Line({}, {})".format(str(self.p1), str(self.p2))

    def clone(self):
        other = Line(self.p1, self.p2)
        other.set_name(self.get_name())
        other.set_outline(self.get_outline())
        other.set_width(self.get_width())
        other.set_dash(self.get_dash())
        return other

    def set_arrow(self,arrow):
      self.arrow = arrow
      if self.id:
          self.canvas.itemconfig(self.id,arrow=self.get_arrow())
          save_gui4sher() # update the save file
          root.update()

    def get_arrow(self):
      return self.arrow

  
    def _draw(self, canvas):
        p1 = self.p1
        p2 = self.p2
        try:
          return canvas.create_line(p1.x,p1.y,p2.x,p2.y,fill=self.get_outline(),width=self.get_width(),arrow=self.get_arrow())
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None

    def set_outline(self, color):
        """Set line color to color"""
        self.outline = color
        if self.id:
          self.canvas.itemconfig(self.id,fill=self.get_outline())
          save_gui4sher() # update the save file
          root.update()
        
   
    def to_exec(self):
      ''' creates commands to create the line '''
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'(Point('+str(self.p1.x)+','+str(self.p1.y)+'),Point('+str(self.p2.x)+','+str(self.p2.y)+'))',
                     self.name + '.set_name(\'' + self.name + '\')',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_arrow('"+ self.get_arrow() + "')",
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)
class Dashed_Line(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)
        self.set_dash((5,5))
        self.set_arrow('none')
   
    def __repr__(self):
        return "Dashed_Line({}, {})".format(str(self.p1), str(self.p2))

    def clone(self):
        other = Line(self.p1, self.p2)
        other.set_name(self.get_name())
        other.set_outline(self.get_outline())
        other.set_width(self.get_width())
        other.set_dash(self.get_dash())
        return other
  
    def set_arrow(self,arrow):
      self.arrow = arrow
      if self.id:
          self.canvas.itemconfig(self.id,arrow=self.get_arrow())
          save_gui4sher() # update the save file
          root.update()

    def get_arrow(self):
      return self.arrow

    def _draw(self, canvas):
        p1 = self.p1
        p2 = self.p2
        try:
          return canvas.create_line(p1.x,p1.y,p2.x,p2.y,fill=self.get_outline(),dash=self.get_dash(),width=self.get_width(),arrow=self.get_arrow())
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None


    def set_dash(self,dash):
      self.dash = dash
      if self.id:
        self.canvas.itemconfig(self.id,dash=self.get_dash())

    def get_dash(self):
      return self.dash

    def set_outline(self, color):
        """Set line color to color"""
        self.outline = color
        if self.id:
          self.canvas.itemconfig(self.id,fill=self.get_outline())
          save_gui4sher() # update the save file
          root.update()
        
   
    def to_exec(self):
      ''' creates commands to create the line '''
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'(Point('+str(self.p1.x)+','+str(self.p1.y)+'),Point('+str(self.p2.x)+','+str(self.p2.y)+'))',
                     self.name + '.set_name(\'' + self.name + '\')',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_arrow('"+ self.get_arrow() + "')",
                     self.name + ".set_dash("+ str(self.get_dash()) + ")",
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)


class Polygon(GraphicsObject):
    
    def __init__(self, *points):
        # if points passed as a list, extract it
        if len(points) == 1 and type(points[0]) == type([]):
            points = points[0]
        self.points = list(map(Point.clone, points))
        GraphicsObject.__init__(self)

    def __repr__(self):
        return "Polygon"+str(tuple(p for p in self.points))
        
    def clone(self):
        other = Polygon(*self.points)
        other.set_name(self.name)
        other.set_name(self.name)
        other.set_fill(self.fill)
        other.set_outline(self.outline)
        other.set_width(self.width)
        return other

    def get_points(self):
        return list(map(Point.clone, self.points))

    def _move(self, dx, dy):
        for p in self.points:
            p.move(dx,dy)
   
    def _draw(self, canvas):
        args = []
        for p in self.points:
            args.append(p.x)
            args.append(p.y)
        try:
          return graphics.create_polygon(*args,outline=self.get_outline(),fill=self.get_fill(),width=self.get_width()) 
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None


    def to_exec(self):
      ''' creates commands to create the polygon '''
      arguments =""  # make a list of the points
      for point in self.points:
        arguments += 'Point('+str(point.x)+','+str(point.y)+'),'
      return super()._to_exec().format(arguments[:-1])   # :-1 gets rid of last ,

def font_string(font):
  ''' returns the string corresponding to the font '''
  if isinstance(font,str):
    # put quotes around the font if it is represented as a string
    return '"'+font+'"'
  # otherwise just turn it into a string
  return str(font)

class Label(GraphicsObject):
    
    def __init__(self, p, text, name):
        GraphicsObject.__init__(self)
        self.name = name
        self.set_text(text)
        self.set_justify(tk.CENTER)
        self.set_font(('helvetica',12))
        self.set_width(10000)    # too large width works by default
        self.anchor = p.clone()

    def __repr__(self):
        return "Label({}, '{}')".format(self.anchor, self.getText())
    
    def _draw(self, canvas):
        p = self.anchor
        try:
          return canvas.create_text(p.x,p.y,anchor='nw',fill=self.get_outline(),text=self.get_text(),font=self.get_font(), justify=self.get_justify())
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None

        
    def _move(self, dx, dy):
        self.anchor.move(dx,dy)
        
    def clone(self):
        other = Text(self.anchor, self.text)
        other.set_name(self.get_name())
        other.set_fill(self.get_fill())
        other.set_outline(self.get_outline())
        other.set_width(self.get_width())
        other.set_font(self.get_font())
        return other

    def set_text(self,text):
      self.text = text
      if self.id:
          self.canvas.itemconfig(self.id,text=self.get_text())
          save_gui4sher() # update the save file
          root.update()


    def get_text(self):
      return self.text

    def set_justify(self,justify):
      self.justify = justify
      if self.id:
          self.canvas.itemconfig(self.id,justify=self.get_justify())
          save_gui4sher() # update the save file
          root.update()

    def get_justify(self):
      return self.justify

    def set_font(self,font):
      self.font = font
      if self.id:
          self.canvas.itemconfig(self.id,font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

            
    def get_anchor(self):
        return self.anchor.clone()

    def set_outline(self, color):
        """Set text color to color"""
        self.outline = color
        if self.id:
          self.canvas.itemconfig(self.id,fill=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def to_exec(self):
      ''' creates commands to create the line '''
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),"'+self.get_text()+'","'+self.get_name()+'")',
                     self.name + '.set_name(\'' + self.name + '\')',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_text('"+ self.get_text()+ "')",
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)


class Entry(GraphicsObject):

    def __init__(self, p, width,name):
        global clicks_window
        GraphicsObject.__init__(self)
        self.name = name
        self.anchor = p.clone()
        #print self.anchor
        self.width = width
        self.text = tk.StringVar()
        self.anchor = p.clone()
        self.set_fill("white")
        self.text.set("")
        self.set_outline("black")
        self.set_font(("courier", 12))
        self.set_justify('left')
        self.frm = tk.Frame(graphics.master)
        self.entry = tk.Entry(self.frm,
                              width=self.width,
                              textvariable=self.text,
                              bg = self.get_fill(),
                              fg = self.get_outline(),
                              font = self.get_font())
        self.entry.bind("<Return>",self.handle_return)
# begin shell not in app
        # put an empty definition for the return handler into the clicks window if no definition is already in the clicks window
        # put an empty definition for the click handler into the clicks window if no definition is already in the clicks window
        clicks = clicks_window.get('1.0','end')
        if clicks.find('def '+self.get_name()+'_return') == -1:
          debug_print('Putting click definition in ')
          debug_print('for '+self.get_name(),end='\n')
          clicks_window.insert('end','\ndef '+self.get_name()+'_return():\n\tpass\n')
        debug_print('Clicks:\n'+clicks_window.get('1.0','end'))
# end shell not in app

    def __repr__(self):
        return "Entry({}, {})".format(self.anchor, self.width)

    def _draw(self, canvas):
        p = self.anchor
        try:
          the_entry = canvas.create_window(p.x,p.y,window=self.frm,anchor='nw')
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        self.entry.pack()
        self.entry.focus_set()
        return the_entry

    def handle_return(self,event):
      ''' if it exists call the return function from the clicks file '''
      # do a return command if the return function exists
      try:
        try:
          globals()[self.get_name()+'_return']()
        except Exception as e:
          say(str(e),color='red')
      except (NameError, AttributeError): return None # otherwise no return behavior
      except Error as e: say(e,color='red',font=('Consolas', 12, 'bold')) # output error
      except Exception as exp: say(exp,color='red',font=('Consolas', 12, 'bold')) # output Exception


    def get_text(self):
        return self.text.get()

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def get_anchor(self):
        return self.anchor.clone()

    def clone(self):
        other = Entry(self.anchor, self.width)
        other.config = self.config.copy()
        other.set_name(self.name)
        other.text = tk.StringVar()
        other.text.set(self.text.get())
        other.fill = self.fill
        return other

    def set_text(self, t):
        self.text.set(t)
        save_gui4sher() # update the save file
        root.update()

    def set_name(self, name):
        """Set name of enty to name"""
        old_name = self.name
        self.name = name
        # add a click command if one exists
        try: exec('self.command = '+self.get_name()+'_return')
        except (NameError, AttributeError): self.command = None # otherwise no command
        if self.command != None:
          self.button.config(command=self.command)
        if self.id:
            save_gui4sher() # update the save file
            root.update()
# begin shell not in app
       # translate old name to new name in clicks_window
        clicks = clicks_window.get('1.0','end')
        clicks = re.sub(r'(\W)'+old_name+r'(\W)',r'\1'+name+r'\2',clicks) # change the old name to the new name in clicks
        clicks = re.sub(r'(\W)'+old_name+r'_return(\W)',r'\1'+name+r'_return\2',clicks) # change the old name to the new name in clicks
        clicks_window.delete('1.0','end')
        clicks_window.insert('end',clicks)
# end shell not in app
           

            
    def set_justify(self,justify):
      self.justify = justify
      if self.id:
          self.entry.config(justify=self.get_justify())
          save_gui4sher() # update the save file
          root.update()

    def get_justify(self):
      return self.justify

    def set_font(self,font):
      self.font = font
      if self.id:
          self.entry.config(font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.entry.config(bg=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.entry.config(fg=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.entry.config(width=self.get_width())
          save_gui4sher() # update the save file
          root.update()

    def get_width(self):
      return self.width


    def to_exec(self):
      debug_print('Creating string to execute for Entry')
      ''' creates commands to create the line '''
      exec_lines = [ self.name + ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),'+str(self.width)+',"'+self.get_name()+'")',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_text('"+ self.text.get()+ "')",
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.set_justify(\''+self.get_justify() + '\')',
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)

class Text(GraphicsObject):

    def __init__(self, p, width, height,name):
        GraphicsObject.__init__(self)
        self.name = name
        self.anchor = p.clone()
        #print self.anchor
        self.width = width
        self.height = height
        self.anchor = p.clone()
        self.set_fill("white")
        self.set_outline("black")
        self.set_font(("courier", 12))
        self.frm = tk.Frame(graphics.master)
        self.scroll = tk.Scrollbar(self.frm)
        self.scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.box = tk.Text(self.frm,
                              width=self.width,
                              height=self.height,
                              bg = self.get_fill(),
                              fg = self.get_outline(),
                              font = self.get_font(),
                              yscrollcommand=self.scroll.set)
        self.scroll.config(command=self.box.yview)

    def __repr__(self):
        return "Entry({}, {})".format(self.anchor, self.width)

    def _draw(self, canvas):
        p = self.anchor
        try:
          the_box = canvas.create_window(p.x,p.y,window=self.frm,anchor='nw')
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        self.box.pack()
        self.box.focus_set()
        return the_box


    def get_text(self):
        return self.box.get("1.0", "end-1c")

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def get_anchor(self):
        return self.anchor.clone()

    def clone(self):
        other = Text(self.anchor, self.width, self.height)
        other.set_name(self.name)
        other.set_text(self.get_text())
        other.fill = self.get_fill()
        other.outline = self.get_outline()
        other.font = self.get_font()
        other.justify = self.get_justify()
        return other

    def set_text(self, t):
        self.box.delete("1.0", "end-1c")
        self.box.insert("1.0",t)
        save_gui4sher() # update the save file
        root.update()

    def get_height(self):
      return self.height

    def set_height(self,height):
      self.height = height
      if self.id:
          self.box.config(height=self.get_height())
          save_gui4sher() # update the save file
          root.update()

            
    def set_font(self,font):
      self.font = font
      if self.id:
          self.box.config(font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.box.config(bg=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.box.config(fg=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.box.config(width=self.get_width())
          save_gui4sher() # update the save file
          root.update()

    def get_width(self):
      return self.width


    def to_exec(self):
      debug_print('Creating string to execute for Text')
      ''' creates commands to create the line '''
      exec_lines = [ self.name + ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),'+str(self.width)+','+str(self.height)+',"'+self.get_name()+'")',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_height('"+ str(self.get_height())+ "')",
                     self.name + ".set_text('''"+ self.get_text()+ "''')", # text has multiple lines
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)

class Button(GraphicsObject):

    def __init__(self, p, text, name):
        debug_print('Initializing button graphics object',end='\n')
        GraphicsObject.__init__(self)
        self.name = name
        debug_print('Button Object initialized',end='\n')
        self.anchor = p.clone()
        #print self.anchor
        self.text = text
        self.anchor = p.clone()
        self.set_fill("cyan")
        self.set_outline("black")
        self.set_font(("sanserif", 14,'bold'))
        self.set_justify('center')
        self.frm = tk.Frame(graphics.master)
        self.set_width(len(text))
        debug_print('Button Object name: '+self.get_name(),end='\n')
# begin shell not in app
        # put an empty definition for the click handler into the clicks window if no definition is already in the clicks window
        clicks = clicks_window.get('1.0','end')
        if clicks.find('def '+self.get_name()+'_click') == -1:
          debug_print('Putting click definition in ')
          debug_print('for '+self.get_name(),end='\n')
          clicks_window.insert('end','\ndef '+self.get_name()+'_click():\n\tpass\n')
        debug_print('Clicks:\n'+clicks_window.get('1.0','end'))
# end shell not in app

        self.button = tk.Button(self.frm,
                              width = len(text),
                              text=text,
                              bg = self.get_fill(),
                              fg = self.get_outline(),
                              font = self.get_font(),
                              justify = self.get_justify(),
                              command = self.handle_click)

          

    def __repr__(self):
        return "Button({}, {})".format(self.anchor, self.text)

    def _draw(self, canvas):
        p = self.anchor
        try:
          the_button = canvas.create_window(p.x,p.y,window=self.frm,anchor='nw')
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        self.button.pack()
        return the_button

    def handle_click(self):
      global globals
      global locals
      ''' if it exists call the return function from the clicks file '''
      # do a return command if the return function exists
      try:
        try:
          globals()[self.get_name()+'_click']()
        except Exception as e:
          say(str(e),color='red')
      except (NameError, AttributeError): return None # otherwise no return behavior
      except: say(sys.exc_info(),color='red',font=('Consolas', 12, 'bold')) # output error

    def set_name(self, name):
        """Set name of button to name"""
        old_name = self.name
        self.name = name
        # add a click command if one exists
        try: exec('self.command = '+self.get_name()+'_click')
        except (NameError, AttributeError): self.command = None # otherwise no command
        if self.command != None:
          self.button.config(command=self.command)
        if self.id:
            save_gui4sher() # update the save file
            root.update()
# begin shell not in app
        # translate old name to new name in clicks_window
        clicks = clicks_window.get('1.0','end')
        clicks = re.sub(r'(\W)'+old_name+r'(\W)',r'\1'+name+r'\2',clicks) # change the old name to the new name in clicks
        clicks = re.sub(r'(\W)'+old_name+r'_click(\W)',r'\1'+name+r'_click\2',clicks) # change the old name to the new name in clicks
        clicks_window.delete('1.0','end')
        clicks_window.insert('end',clicks)
# end shell not in app


    def set_text(self,text):
      self.text = text
      self.button.config(text=self.get_text())
      self.set_width(len(self.get_text()))
      if self.id:
          save_gui4sher() # update the save file
          root.update()

    def get_text(self):
        return self.text

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def get_anchor(self):
        return self.anchor.clone()

    def clone(self):
        other = Button(self.anchor, self.get_text())
        other.config = self.config.copy()
        other.set_name(self.name)
        other.text = self.text
        return other

    def set_justify(self,justify):
      self.justify = justify
      if self.id:
          self.button.config(justify=self.get_justify())
          save_gui4sher() # update the save file
          root.update()

    def get_justify(self):
      return self.justify

    def set_font(self,font):
      self.font = font
      if self.id:
          self.button.config(font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.button.config(bg=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.button.config(fg=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.button.config(width=self.get_width())
          save_gui4sher() # update the save file
          root.update()



    def to_exec(self):
      ''' creates commands to create the line '''
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),"'+str(self.get_text())+'","'+self.get_name()+'")',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_text('"+ self.get_text()+ "')",
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.set_justify(\''+self.get_justify() + '\')',
                     self.name + '.draw()'
                     ]
      return '''
'''.join(exec_lines)

class Check(GraphicsObject):

    def __init__(self, p, text, name):
        GraphicsObject.__init__(self)
        self.name = name
        self.anchor = p.clone()
        #print self.anchor
        self.text = text
        self.anchor = p.clone()
        self.set_fill('#EEEEEE')
        self.set_outline("black")
        self.set_font(("sanserif", 14,'bold'))
        self.set_justify('center')
        self.frm = tk.Frame(graphics.master)
        self.set_width(len(text))
        self.checked = tk.BooleanVar()
        self.set_checked(False)
# begin shell not in app
        # put an empty definition for the click handler into the clicks window if no definition is already in the clicks window
        clicks = clicks_window.get('1.0','end')
        if clicks.find('def '+self.get_name()+'_click') == -1:
          debug_print('Putting click definition in ')
          debug_print('for '+self.get_name(),end='\n')
          clicks_window.insert('end','\ndef '+self.get_name()+'_click():\n\tpass\n')
        debug_print('Clicks:\n'+clicks_window.get('1.0','end'))
# end shell not in app
        self.button = tk.Checkbutton(self.frm,
                              width = len(text),
                              text=text,
                              bg = self.get_fill(),
                              fg = self.get_outline(),
                              font = self.get_font(),
                              justify = self.get_justify(),
                              variable=self.checked,
                              onvalue=True,offvalue=False,
                              command = self.handle_click)
          

    def __repr__(self):
        return "Button({}, {})".format(self.anchor, self.text)

    def _draw(self, canvas):
        p = self.anchor
        try:
          the_button = canvas.create_window(p.x,p.y,window=self.frm,anchor='nw')
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        self.button.pack()
        return the_button

    def handle_click(self):
      ''' if it exists call the return function from the clicks file '''
      # do a return command if the return function exists
      try:
        try:
          globals()[self.get_name()+'_click']()
        except Exception as e:
          say(str(e),color='red')
      except (NameError, AttributeError): return None # otherwise no return behavior
      except Error as e: say(e,color='red',font=('Consolas', 12, 'bold')) # output error
      except Exception as exp: say(exp,color='red',font=('Consolas', 12, 'bold')) # output Exception

    def get_checked(self):
      ''' gets whether the button is checked '''
      return self.checked.get()

    def set_checked(self,value):
      ''' sets the check to either true or false '''
      self.checked.set(value)
      if self.id:
        save_gui4sher() # update the save file
        root.update()
      

    def set_name(self, name):
        """Set name of button to name"""
        old_name = self.name
        self.name = name
        # add a click command if one exists
        try: exec('self.command = '+self.get_name()+'_click')
        except (NameError, AttributeError): self.command = None # otherwise no command
        if self.command != None:
          self.button.config(command=self.command)
        if self.id:
            save_gui4sher() # update the save file
            root.update()
# begin shell not in app
       # translate old name to new name in clicks_window
        clicks = clicks_window.get('1.0','end')
        clicks = re.sub(r'(\W)'+old_name+r'(\W)',r'\1'+name+r'\2',clicks) # change the old name to the new name in clicks
        clicks = re.sub(r'(\W)'+old_name+r'_click(\W)',r'\1'+name+r'_click\2',clicks) # change the old name to the new name in clicks
        clicks_window.delete('1.0','end')
        clicks_window.insert('end',clicks)
# end shell not in app


    def set_text(self,text):
      self.text = text
      self.button.config(text=self.get_text())
      self.set_width(len(self.get_text()))
      if self.id:
          save_gui4sher() # update the save file
          root.update()

    def get_text(self):
        return self.text

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def get_anchor(self):
        return self.anchor.clone()

    def clone(self):
        other = Button(self.anchor, self.get_text())
        other.config = self.config.copy()
        other.set_name(self.name)
        other.text = self.text
        return other

    def set_justify(self,justify):
      self.justify = justify
      if self.id:
          self.button.config(justify=self.get_justify())
          save_gui4sher() # update the save file
          root.update()

    def get_justify(self):
      return self.justify

    def set_font(self,font):
      self.font = font
      if self.id:
          self.button.config(font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.button.config(bg=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.button.config(fg=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.button.config(width=self.get_width())
          save_gui4sher() # update the save file
          root.update()



    def to_exec(self):
      ''' creates commands to create the line '''
      exec_lines = [ self.name+ ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),"'+str(self.get_text())+'","'+self.get_name()+'")',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_text('"+ self.get_text()+ "')",
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.set_justify(\''+self.get_justify() + '\')',
                     self.name + '.set_checked(\''+str(self.get_checked()) + '\')',
                     self.name + '.draw()'
                     ]
      return '''
'''.join(exec_lines)


class List(GraphicsObject):

    def __init__(self, p, items, name):
        GraphicsObject.__init__(self)
        self.name = name
        self.anchor = p.clone()
        #print self.anchor
        self.anchor = p.clone()
        self.set_fill("yellow")
        self.set_outline("black")
        self.set_font(("arial", 12,'bold'))
        self.set_justify('left')
        self.frm = tk.Frame(graphics.master)
        # height is the number of items but it is at least 1 and <= 5
        self.set_height(len(items))
        if int(self.get_height()) == 0: self.set_height(1)
        elif int(self.get_height()) > 5 : self.set_height(5)
        self.set_width(1)
        self.scroll = tk.Scrollbar(self.frm)
        self.scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.list = tk.Listbox(self.frm,
                              bg = self.get_fill(),
                              fg = self.get_outline(),
                              font = self.get_font(),
                              justify = self.get_justify(),
                              height = self.get_height(),
                              selectmode = tk.SINGLE,   # one one item selected at a time
                              yscrollcommand=self.scroll.set)
        self.scroll.config(command=self.list.yview)
        # add the items to a list
        self.set_items(items)
        self.list.bind("<<ListboxSelect>>",self.handle_select)
# begin shell not in app
        # put an empty definition for the click handler into the clicks window if no definition is already in the clicks window
        clicks = clicks_window.get('1.0','end')
        if clicks.find('def '+self.get_name()+'_select') == -1:
          debug_print('Putting click definition in ')
          debug_print('for '+self.get_name(),end='\n')
          clicks_window.insert('end','\ndef '+self.get_name()+'_select():\n\tpass\n')
        debug_print('Clicks:\n'+clicks_window.get('1.0','end'))
# end shell not in app
    def __repr__(self):
        to_return = "List({}, {})".format(self.anchor, self.width)
        return "List({}, {})".format(self.anchor, self.width)

    def _draw(self, canvas):
        p = self.anchor
        try:
          the_listbox = canvas.create_window(p.x,p.y,window=self.frm,anchor='nw')
        except Exception as e:
          say(str(e),color='red') # tell user about problem drawing
          return None
        self.list.pack()
        return the_listbox

    def handle_select(self,event):
      ''' if it exists call the select function from the clicks file '''
      # do a return command if the return function exists
      try:
        try:
          globals()[self.get_name()+'_select']()
        except Exception as e:
          say(str(e),color='red')
      except (NameError, AttributeError): return None # otherwise no return behavior
      except Error as e: say(e,color='red',font=('Consolas', 12, 'bold')) # output error
      except Exception as exp: say(exp,color='red',font=('Consolas', 12, 'bold')) # output Exception


    def get_items(self):
        ''' List of items in List. '''
        to_return = []
        # make a list of items in the list
        for item in self.list.get(0,self.list.size()-1):
          to_return.append(item)
        return to_return

    def set_items(self,items):
      ''' Change items in List. '''
      # first empty the list
      self.list.delete(0,self.list.size()-1)
      # then put new list in
      for item in items:
        self.add(item)

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def get_anchor(self):
        return self.anchor.clone()

    def clone(self):
        other = List(self.anchor, self.width)
        other.config = self.config.copy()
        other.set_name(self.name)
        other.set_items(self.get_items())
        other.set_outline(self.get_outline())
        other.set_fill(self.get_fill())
        other.set_font(self.get_font())
        other.set_justify(self.get_justify())
        other.set_height(self.get_height())
        return other

    def add(self, item):
      ''' Adds item into list. '''
      self.list.insert(tk.END,item)
      # if item is wider than list make list wider
      if len(str(item)) > int(self.get_width()) : self.set_width(len(str(item)))
      if self.id:
        save_gui4sher() # update the save file
        root.update()

    def delete(self, item):
      ''' Deletes item from list. '''
      try:
        self.list.delete(self.get_items().index(item))
      except ValueError as ve: say(str(ve),color='red',font=('Consolas', 12, 'bold'))
      if self.id:
        save_gui4sher() # update the save file
        root.update()

    def selected(self):
      ''' Returns the selected item or None if none selected. '''
      tup = self.list.curselection()  # a tuple either empty or with selected item
      if len(tup) == 0:
        return None
      else:
        return self.list.get(tup)

    def select(self,item):
      ''' Selects item in list. '''
      self.list.activate(self.data.index(item))
            
    def get_height(self): return self.height

    def set_height(self,height):
      self.height = height
      if self.id:
          self.list.config(height=self.get_height())
          save_gui4sher() # update the save file
          root.update()
            
    def set_justify(self,justify):
      self.justify = justify
      if self.id:
          self.list.config(justify=self.get_justify())
          save_gui4sher() # update the save file
          root.update()

    def get_justify(self):
      return self.justify

    def set_font(self,font):
      self.font = font
      if self.id:
          self.list.config(font=self.get_font())
          save_gui4sher() # update the save file
          root.update()

    def get_font(self):
      return self.font

    def set_fill(self, color):
        """Set interior color to color"""
        self.fill = color
        if self.id:
          self.list.config(bg=self.get_fill())
          save_gui4sher() # update the save file
          root.update()

    def set_outline(self, color):
        """Set outline color to color"""
        self.outline = color
        if self.id:
          self.list.config(fg=self.get_outline())
          save_gui4sher() # update the save file
          root.update()

    def set_width(self, width):
        """Set line weight to width"""
        self.width = width
        if self.id:
          self.list.config(width=self.get_width())
          save_gui4sher() # update the save file
          root.update()

    def get_width(self):
      return self.width

    def set_name(self, name):
        """Set name of select to name"""
        old_name = self.name
        self.name = name
        # add a click command if one exists
        try: exec('self.command = '+self.get_name()+'_select')
        except (NameError, AttributeError): self.command = None # otherwise no command
        if self.command != None:
          self.button.config(command=self.command)
        if self.id:
            save_gui4sher() # update the save file
            root.update()
# begin shell not in app
        # translate old name to new name in clicks_window
        clicks = clicks_window.get('1.0','end')
        clicks = re.sub(r'(\W)'+old_name+r'(\W)',r'\1'+name+r'\2',clicks) # change the old name to the new name in clicks
        clicks = re.sub(r'(\W)'+old_name+r'_select(\W)',r'\1'+name+r'_select\2',clicks) # change the old name to the new name in clicks
        clicks_window.delete('1.0','end')
        clicks_window.insert('end',clicks)
# end shell not in app


    def to_exec(self):
      debug_print('Creating string to execute for Entry')
      ''' creates commands to create the line '''
      exec_lines = [ self.name + ' = ' + self.__class__.__name__ +'(Point('+str(self.anchor.x)+','+str(self.anchor.y)+'),'+str(self.get_items())+',"'+self.get_name()+'")',
                     self.name + '.set_fill(\''+ self.get_fill() + '\')',
                     self.name + ".set_outline('"+ self.get_outline() + "')",
                     self.name + ".set_width('"+ str(self.get_width())+ "')",
                     self.name + ".set_height('"+ str(self.get_height())+ "')",
                     self.name + ".set_font(" + font_string(self.get_font()) + ")",
                     self.name + '.set_justify(\''+self.get_justify() + '\')',
                     self.name + '.draw()']
      return '''
'''.join(exec_lines)

def names():
  ''' returns a list of object names for all the objects drawn on screen '''
  to_return = []
  for thing in objects:
     to_return.append(thing.get_name())
  return(to_return)
  

''' controls the title '''


def change_title(titler):
  root.title(titler)

''' common colors '''
red = 'red'
green = 'green'
blue = 'blue'
white = 'white'
black = 'black'
gray = 'gray'
orange = 'orange'
purple = 'purple'
violet = 'violet'
yellow = 'yellow'
brown = 'brown'
cyan = 'cyan'
magenta = 'magenta'
pink = 'pink'

''' common fonts '''
serif = 'serif'
sans_serif = 'sans-serif'
monospaced = 'monospaced'
courier = 'courier'
helvetica = 'helvetica'
times = 'times'



# begin shell not in app
# end shell not in app

# begin shell not in app
def save_gui4sher():
  ''' save_gui4sher creates a gui4sher with all the current objects '''
  global read_file
  global save_file
  global NO_SAVE
  # open the basic gui4sher
  reader = open(read_file,mode='r')
  debug_print('Reading from ')
  debug_print(read_file)
  debug_print('''
''')
  # string to put lines to write to the save file
  save_lines = ''
  # put in copyright line info
  save_lines += NO_SAVE+"\n''' code here manages copyright notice '''"
  save_lines += NO_SAVE+'\nauthors = "'+authors+'"'
  save_lines += NO_SAVE+'\nthanks = "'+thanks+'"'
  save_lines += NO_SAVE+'\nyear = "'+year+'"\n'
  save_lines += NO_SAVE+'\nNO_SAVE = \'\'\'\n# not saved\'\'\'\n\n'
  # put in the save file name
  save_lines += NO_SAVE+"\nsave_file = __file__\n\n"
  # copy all the lines from reader to saver except code lines with comment # not saved
  for line in reader:
    if 0 == line.find('# not to copy'): break # everything afterwards are objects and stuff that will be automatically updated and copied
    if 0 == line.find('# not saved'):
      # don't write this line or the next
      reader.readline()
    else:
      save_lines += line
  # insert comment to indicate what shouldn't be copied
  save_lines += '\n# not to copy'
  # set up clicks window in save file
  debug_print('clicks_window.insert(\'end\','+repr(clicks_window.get('1.0','end'))+')\n')
  save_lines += NO_SAVE+'\nclicks_window.insert(\'end\','+repr(clicks_window.get('1.0','end'))+')\n'

  # put in comment establishing objects
  save_lines +="''' All the objects in the graphics are below '''"+ '''
'''
  # put commands to put every object drawn on graphics window into saver
  for obj in objects:
    save_lines += obj.to_exec()+ '''
'''
    debug_print('Saving Object: ')
    debug_print(obj.to_exec())
    debug_print('''
''')
  debug_print('try:\n\texec(clicks_window.get(\'1.0\',\'end\'))\nexcept:\n\tsay(sys.exc_info(),color=red,font=("courier",14,"bold"))\n')
  save_lines +='''
my_exec(clicks_window.get(\'1.0\',\'end\'),globals())
'''
  # read all lines from original file 
  reader.close()
  # open the file to save to 
  saver = open(save_file,mode='w+')
  debug_print('Saving to ')
  debug_print(save_file)
  debug_print('''
''')
  print(save_lines,file=saver, flush = True)
  # needed to make gui work right
  print(NO_SAVE+"\nroot.mainloop()",file=saver,flush=True)
  debug_print('Done Saving')
  debug_print('''
''')
  # finish saving files
  saver.close()



''' creates a py file that generates an app with the graphics and gui but no shell '''  
def make_app():
  global read_file
  global save_file
    
  root.withdraw()  # GUI4sher window dissapears
  app_file = tk.filedialog.asksaveasfilename(title='Select or enter name for app',filetypes = (("python files","*.py"),("all files","*.*")))
  root.deiconify() # Get GUI4sher window back

  if len(app_file) == 0: # dialog was cancelled
    say('Not making an app!',color='red')
    return
  if not app_file.endswith('.py'):  # add .py extension to files without any extension
    app_file += '.py'

  # open the basic gui4sher
  reader = open(read_file,mode='r')
  # open the file to save to 
  saver = open(app_file,mode='w+')

  # put in copyright line info
  print("''' code here manages copyright notice '''",file=saver,flush = True)
  print('\nauthors = "'+authors+'"',file=saver,flush = True)
  print('\nthanks = "'+thanks+'"',file=saver,flush = True)
  print('\nyear = "'+year+'"',file=saver,flush = True)

  # don't do debug_print's in app
  print("def debug_print(to_print,end=''):\n\tpass\n",file=saver,flush = True)


  read_lines = True # this is true when one should copy lines from the file into the app
  # copy all the lines from reader to saver except code lines with comment # not saved
  for line in reader:
    if read_lines:
      if 0 == line.find(NO_SAVE):
        # don't write this line or the next
        reader.readline()
      elif 0 == line.find('# begin shell not in app'):
        # don't write line until # end shell not in app
        read_lines = False
      else:
        print(line,end='',file=saver,flush=True)
        debug_print('''Copied {}
'''.format(line))
    else:
      if 0 == line.find('# end shell not in app'):
        # start copying lines again
        read_lines = True
  # don't do any saving since app won't modify
  print("def save_gui4sher(): return None\n",file=saver,flush=True)
  # set up app title
  print('change_title("'+os.path.basename(app_file)+'")',file=saver,flush = True)
  
  # put in comment establishing objects
  print("''' All the objects in the graphics are below '''",file=saver,flush=True)
  # put commands to put every object drawn on graphics window into saver
  for obj in objects:
    debug_print('Saving object in app: '+obj.to_exec())
    print(obj.to_exec(),file=saver,flush=True)
  # needed to make gui work right
  debug_print('Saving clicks in app: '+clicks_window.get('1.0','end'))
  print(clicks_window.get('1.0','end'),file=saver,flush=True)
  print("root.mainloop()",file=saver,flush=True)
  # finish files
  reader.close()
  saver.close()
  debug_print('''Done make_app
''')
  # run the app
  debug_print('''python "{}"
'''.format(app_file))
  system('python "{}"'.format(app_file))


def get_save():
  ''' gets a file to save changes to.
      file will be saved after each graphics draw command
  '''
  global save_file
  global root
  debug_print('In get_save',end='\n')
  save_file = ''
  counter = 0
  # keep demanding a save file until the user provides one
  while len(save_file)==0:
    root.withdraw()  # GUI4sher window dissapears
    debug_print('Updated root\n')
    counter+=1
    debug_print('getting save file '+str(counter),end='\n')
    save_file = tk.filedialog.asksaveasfilename(title='Select or enter project file',filetypes = (("python files","*.py"),("all files","*.*")))
    root.deiconify() # Get GUI4sher window back
  
  debug_print('Got save file',end='\n')
  if not save_file.endswith('.py'):  # add .py extension to files without a .py extension
    save_file += '.py'
  change_title('Project in '+save_file)
  save_gui4sher()
  shell.focus_set()
# end shell not in app



# source
read_file = __file__

# begin shell not in app
# end shell not in app


# begin shell not in app
''' set up button clicks for buttons '''
edit_mode = 'SHELL'
def toggle_edit():
  global edit_mode
  global clicks_window
  global shell
  if edit_mode == 'SHELL':
    edit_mode = 'CLICKS'
    click_toggle.config(text='Change\nClicks')
    shell.pack_forget()
    clicks_window.pack(fill=tk.BOTH, expand = tk.YES, side="left") 
    shell_scroll.config(command=clicks_window.yview)
    shell_hscroll.config(command=clicks_window.xview)
  else:
    edit_mode = 'SHELL'
    debug_print('Changing clicks',end='\n')
    click_toggle.config(text='Edit\nClicks')
    clicks_window.pack_forget()
    shell.pack(fill=tk.BOTH, expand = tk.YES, side="left")
    shell_scroll.config(command=shell.yview)
    shell_hscroll.config(command=shell.xview)
    debug_print('executing changing clicks functions',end='\n')
    debug_print('Executing:\n'+clicks_window.get('1.0','end'))
    my_exec(clicks_window.get('1.0','end'),globals())
    debug_print('Widget Actions Changed\n')
    say('Widget Actions Changed\n',color='gray')
    save_gui4sher()

click_toggle.config(command=toggle_edit)
make_app_button.config(command=make_app)

def names_command():
  for name in names():
    say(name)

names_button.config(command=names_command)



''' interactive functions to put down graphics and gui '''
def valid_name(name,thing,prefix=''):
  ''' Interactively dialogs with the user until a valid name is acquired and then returns it. '''
  if name == '':
    name = ask('Name of '+thing)
  while not (prefix+name).isidentifier() or iskeyword(prefix+name) or prefix+name in names():
    if not name.isidentifier():
      name = ask(name+' is not a valid python variable name, Enter a new name')
    elif iskeyword(name):
      name = ask(name+' is a python keyword, Enter a new name')
    elif name in names():
      name = ask('You already used '+name+', Enter a new name')
    else:
      name = ask('Something is wrong with '+name+', Enter a new name')
  return name

def mouse_ask(to_print,color='darkgreen',font=('serif',12),end=': '):
  ''' Prompts the user and returns a point that the user clicked on in the graphics window. '''
  graphics.toggle_tracking()
  say(to_print,color=color,font=font)
  to_return = graphics.get_mouse_click()
  graphics.toggle_tracking()
  return to_return

def place_rectangle(name='',fill='',outline='black',width=1):
  ''' Interactive placement of a rectangle. '''
  global objects
  name = valid_name(name,'Rectangle') # make sure the name of the object is valid
  # get the corners of the rectangle
  corner = mouse_ask('Click on a corner of rectangle "'+name+'"')
  dot = Circle(corner,3) # dot to put on screen
  dot.set_fill('darkgray')
  dot.draw()
  opposite = mouse_ask('Click on the opposite corner of rectangle "'+name+'"')
  dot.undraw() # don't need dot anymore
  # make the rectangle
  rect = Rectangle(corner,opposite)
  rect.set_name(name)
  rect.set_fill(fill)
  rect.set_outline(outline)
  rect.set_width(width)
  rect.draw()
  exec(name+'=objects[-1]',globals())

''' interactive functions to put down graphics and gui '''
def place_oval(name='',fill='',outline='black',width=1):
  ''' Interactive placement of a oval. '''
  name = valid_name(name,'Oval') # make sure the name of the object is valid
  # get the corners of the rectangle enclosing
  corner = mouse_ask('Click on a corner of rectangle that encloses the oval "'+name+'"')
  dot = Circle(corner,3) # dot to put on screen
  dot.set_fill('darkgray')
  dot.draw()
  opposite = mouse_ask('Click on the opposite corner of rectangle that encloses the oval "'+name+'"')
  dot.undraw() # don't need dot anymore
  # make the oval
  oval = Oval(corner,opposite)
  oval.set_name(name)
  oval.set_fill(fill)
  oval.set_outline(outline)
  oval.set_width(width)
  oval.draw()
  exec(name+'=objects[-1]',globals())
  
''' interactive functions to put down graphics and gui '''
def place_line(name='',fill='',outline='black',width=1):
  ''' Interactive placement of a line. '''
  name = valid_name(name,'Line') # make sure the name of the object is valid
  # get the corners of the rectangle enclosing
  corner = mouse_ask('Click on an endpoint of "'+name+'"')
  dot = Circle(corner,3) # dot to put on screen
  dot.set_fill('darkgray')
  dot.draw()
  opposite = mouse_ask('Click on the other endpoint of "'+name+'"')
  dot.undraw() # don't need dot anymore
  # make the Line
  line = Line(corner,opposite)
  line.set_name(name)
  line.set_fill(fill)
  line.set_outline(outline)
  line.set_width(width)
  line.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_dashed_line(name='',fill='',outline='black',width=1,dash=(5,5)):
  ''' Interactive placement of a line. '''
  name = valid_name(name,'Dashed_Line') # make sure the name of the object is valid
  # get the corners of the rectangle enclosing
  corner = mouse_ask('Click on an endpoint of "'+name+'"')
  dot = Circle(corner,3) # dot to put on screen
  dot.set_fill('darkgray')
  dot.draw()
  opposite = mouse_ask('Click on the other endpoint of "'+name+'"')
  dot.undraw() # don't need dot anymore
  # make the Line
  line = Dashed_Line(corner,opposite)
  line.set_name(name)
  line.set_fill(fill)
  line.set_outline(outline)
  line.set_width(width)
  line.set_dash(dash)
  line.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_circle(name='',fill='',outline='black',width=1):
  ''' Interactive placement of a circle. '''
  name = valid_name(name,'Circle') # make sure the name of the object is valid
  # get the center and radius
  center = mouse_ask('Click on the center of the circle "'+name+'"')
  dot = Circle(center,3) # dot to put on screen
  dot.set_fill('darkgray')
  dot.draw()
  circumference = mouse_ask('Click on the circumference of the circle "'+name+'"')
  dot.undraw() # don't need dot anymore
  # find the radius
  x_difference = center.get_x() - circumference.get_x()
  y_difference = center.get_y() - circumference.get_y()
  radius = sqrt(x_difference*x_difference + y_difference*y_difference)
  # make the circle
  circ = Circle(center,radius)
  circ.set_name(name)
  circ.set_fill(fill)
  circ.set_outline(outline)
  circ.set_width(width)
  circ.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_polygon(name='',fill='',outline='black',width=1):
  ''' Interactive placement of a circle. '''
  name = valid_name(name,'Polygon') # make sure the name of the object is valid
  # holds all the corners of the polygon
  corners = []
  circles = []
  while True:
    # get the first corner of the polygon
    first = mouse_ask('Click on the a corner of the polygon "'+name+'"',color='orange')
    first_circle = Circle(first,5)
    first_circle.set_fill('orange')
    first_circle.draw()
    corners.append(first)
    circles.append(first_circle)
    # get more corners of the polygon
    while True:
      another = mouse_ask('Click on another corner of the polygon "'+name+'"',color='#444444')
      # find if the new point is near the first one
      x_difference = first.get_x() - another.get_x()
      y_difference = first.get_y() - another.get_y()
      distance = sqrt(x_difference*x_difference + y_difference*y_difference)
      if distance < 5:
        break
      corners.append(another)
      another_circle = Circle(another,2)
      another_circle.set_fill('#444444')
      another_circle.draw()
      circles.append(another_circle)
    # clear the points
    for circle in circles:
      circle.undraw()
    if len(corners) < 3:
      say('You need at least 3 points for a polygon, try again',color='red')
    else: break # finished the points
  # make the polygon
  poly = Polygon(corners)
  poly.set_name(name)
  poly.set_fill(fill)
  poly.set_outline(outline)
  poly.set_width(width)
  poly.draw()
  exec(name+'=objects[-1]',globals())
    
    
''' interactive functions to put down graphics and gui '''
def place_label(text,name='',fill='',outline='black',font=('times',14)):
    ''' Interactive placement of a label. '''
    try:
      name = valid_name(name,'Label') # make sure the name of the object is valid
      # get position of upper left corner of label
      anchor = mouse_ask('Click on the position of the Label "'+name+'"')
      # make the label
      labl = Label(anchor,text,name)
      labl.set_name(name)
      labl.set_fill(fill)
      labl.set_outline(outline)
      labl.set_font(font)
      labl.draw()
      exec(name+'=objects[-1]',globals())
    except: pass
    
''' interactive functions to put down graphics and gui '''
def place_entry(width,name='',fill='white',outline='black',font=('times',14)):
    ''' Interactive placement of a label. '''
    try:
      name = valid_name(name,'Entry') # make sure the name of the object is valid
      # get position of upper left corner of Entry
      anchor = mouse_ask('Click on the position of the Entry "'+name+'"')
      # make the Entry
      entr = Entry(anchor,width,name)
      entr.set_name(name)
      entr.set_fill(fill)
      entr.set_outline(outline)
      entr.set_font(font)
      entr.draw()
      exec(name+'=objects[-1]',globals())
    except: pass

''' interactive functions to put down graphics and gui '''
def place_text(width,height,name='',fill='white',outline='black',font=('times',10)):
  ''' Interactive placement of a label. '''
  name = valid_name(name,'Text') # make sure the name of the object is valid
  # get position of upper left corner of Entry
  anchor = mouse_ask('Click on the position of the Text "'+name+'"')
  # make the Entry
  box = Text(anchor,width,height,name)
  box.set_name(name)
  box.set_fill(fill)
  box.set_outline(outline)
  box.set_font(font)
  debug_print('Executing text box insert:\n'+box.to_exec())
  box.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_button(text,name='',fill='cyan',outline='black',font=('times',14)):
  ''' Interactive placement of a Button. '''
  name = valid_name(name,'Button') # make sure the name of the object is valid
  # get position of upper left corner of Button
  anchor = mouse_ask('Click on the position of the Button "'+name+'"')
  # make the button
  debug_print('Creating Buttton',end='\n')
  butn = Button(anchor,text,name)
  debug_print('Button created',end='\n')
  butn.set_name(name)
  debug_print('Button named',end='\n')
  butn.set_fill(fill)
  butn.set_outline(outline)
  butn.set_font(font)
  # initialize and draw the object with the name specified
  butn.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_check(text,name='',fill='#EEEEEE',outline='black',font=('times',14)):
  ''' Interactive placement of a Check (checkbox). '''
  name = valid_name(name,'Check') # make sure the name of the object is valid
  # get position of upper left corner of Button
  anchor = mouse_ask('Click on the position of the Check "'+name+'"')
  # make the button
  butn = Check(anchor,text,name)
  butn.set_name(name)
  butn.set_fill(fill)
  butn.set_outline(outline)
  butn.set_font(font)
  butn.draw()
  exec(name+'=objects[-1]',globals())
    
''' interactive functions to put down graphics and gui '''
def place_list(items,name='',fill='yellow',outline='black',font=('times',14)):
  ''' Interactive placement of a Button. '''
  name = valid_name(name,'List') # make sure the name of the object is valid
  # get position of upper left corner of List
  anchor = mouse_ask('Click on the position of the List "'+name+'"')
  # make the List
  lst = List(anchor,items,name)
  lst.set_name(name)
  lst.set_fill(fill)
  lst.set_outline(outline)
  lst.set_font(font)
  lst.draw()
  exec(name+'=objects[-1]',globals())
    
      



  
# end shell not in app




# not to copy
# not saved
clicks_window.insert('end','\n')
''' All the objects in the graphics are below '''

my_exec(clicks_window.get('1.0','end'),globals())


# not saved
root.mainloop()
import tkinter
from tkinter import *
win = Tk()
win.geometry("400x600")
def something():
    data = input("Enter the word to be printed : ")
    print(data)
b = Button(win,text="Button1",command=something,activeforeground="red")
b.grid(row=1, column=1)
c = Canvas(win,height=250,width=300,bg='blue')
coordinates = 10,50,240,210
arc = c.create_arc(coordinates,start=0,extent=150,fill='red')
c.grid(row=0, column=0)
c1 = IntVar()
c2 = IntVar()
cb1 = Checkbutton(win,text='Music',offvalue=0,onvalue=1,height=2,width=6,variable=c1,bg="yellow")
cb1.grid(row=4, column=1)
cb2 = Checkbutton(win,text='Video',offvalue=0,onvalue=1,height=2,width=6,variable=c2,bg="blue")
cb2.grid(row=6, column=1)
val = IntVar()
rb1 = Radiobutton(win,text="Option1",variable=val,value=1)
rb1.grid(row=8, column=1)
rb2 = Radiobutton(win,text="Option2",variable=val,value=2)
rb2.grid(row=10, column=1)
rb3 = Radiobutton(win,text="Option3",variable=val,value=3)
rb3.grid(row=12, column=1)
win.mainloop()
from tkinter import filedialog
from tkinter import *
import threadedCopy as tc

# Globals
DEFAULT_FILE_PATH = r"C:\Users\m0pxnn\Documents\Python"
WINDOW_TITLE = "Fast Copy (Brought to you by @SpanielMaximus)"
HEADING = "Multithreaded copy"


# FastCopy class

class FastCopy:
    def __init__(self, root):

        
        # Create a frame
        
        frame = Frame(root, padx=5, pady=5)
        frame.grid()

        
        # Heading text
        
        self.lblHeading = Label(
            frame,
            text=HEADING,
            padx=5,
            pady=5,
            fg="Blue",
            font="Verdana 15 bold underline",
        )
        self.lblHeading.grid(columnspan=3)

        
        # Source
        
        self.lblSource = Label(frame, text="Source path")
        self.lblSource.grid(row=2, column=0, sticky=E)

        self.inpSource = Entry(frame, width=100)
        self.inpSource.insert(0, "")
        self.inpSource.grid(row=2, column=1)

        self.btnSource = Button(
            frame,
            text="Source",
            width=10,
            command=lambda: self.LaunchDirBrowser(self.inpSource, "Source"),
        )
        self.btnSource.grid(row=2, column=3, pady=2)

        
        # Destination
        
        self.lblDest = Label(frame, text="Destination path")
        self.lblDest.grid(row=3, column=0, sticky=E)

        self.inpDest = Entry(frame, width=100)
        self.inpDest.insert(0, "")
        self.inpDest.grid(row=3, column=1)

        self.btnDest = Button(
            frame,
            text="Destination",
            width=10,
            command=lambda: self.LaunchDirBrowser(self.inpDest, "Destination"),
        )
        self.btnDest.grid(row=3, column=3, pady=2)

        
        # Copy button
        
        self.btnCopy = Button(
            frame, text="Start Copy", padx=2, width=10, command=self.DoCopy
        )
        self.btnCopy.grid(row=5, column=3, pady=2)

        
        # Quit button
        
        self.btnCopy = Button(frame, text="Close", width=10, command=root.quit)
        self.btnCopy.grid(row=6, column=3, pady=2)

        
        # Status bar
        
        self.lblStatusBar = Label(
            root, text="Welcome to fast copy", width=100, bd=2, relief=SUNKEN
        )
        self.lblStatusBar.grid(row=6, columnspan=4, pady=1)

    
    # Launch folder browser
    
    def LaunchDirBrowser(self, entry, id):
        dirName = filedialog.askdirectory(
            initialdir=DEFAULT_FILE_PATH, title="Select folder"
        )
        entry.delete(0, "end")
        entry.insert(0, dirName)
        self.WriteToStatusBar("{} path updated".format(id))

    
    # Copy
    
    def DoCopy(self):
        if self.inpSource.get() == "" or self.inpDest.get() == "":
            self.WriteToStatusBar("Cannot copy. Source/Destination not specified")
        else:
            self.WriteToStatusBar("Beginning to copy...")
            tc.CopySourceToDest(self.inpSource.get(), self.inpDest.get())

    
    # API to write status
    
    def WriteToStatusBar(self, msg):
        self.lblStatusBar["text"] = msg



# Create main window

root = Tk()
root.title(WINDOW_TITLE)
fastCopy = FastCopy(root)
root.mainloop()
from tkinter import filedialog
from tkinter import *

DEFAULT_FILE_PATH = r"C:\Users\m0pxnn\Documents\Python"
filename = "<NOTHING SELECTED>"
folderName = "<Folder not selected>"


def BrowseDir():
    folderName = filedialog.askdirectory(
        initialdir=DEFAULT_FILE_PATH, title="Select folder"
    )
    print("Folder selected: ", folderName)
    lblFilename["text"] = "Folder selected: " + folderName


def BrowseFile():
    filename = filedialog.askopenfilename(
        initialdir=DEFAULT_FILE_PATH,
        title="Select file",
        filetypes=(("jpeg files", "*.jpg"), ("all files", "*.*")),
    )
    print("File selected: ", filename)
    lblFilename["text"] = "File selected: " + filename


#
root = Tk()

btnBrowseFile = Button(root, text="Browse File", command=BrowseFile)
btnBrowseFile.pack()

btnBrowseDir = Button(root, text="Browse Folder", command=BrowseDir)
btnBrowseDir.pack()

lblFilename = Label(root, text=filename, width=100, padx=2, pady=2, bd=2, relief=RIDGE)
lblFilename.pack()

"""
# Relief styles
B1 = Button(root, text ="FLAT", relief=FLAT )
B2 = Button(root, text ="RAISED", relief=RAISED )
B3 = Button(root, text ="SUNKEN", relief=SUNKEN )
B4 = Button(root, text ="GROOVE", relief=GROOVE )
B5 = Button(root, text ="RIDGE", relief=RIDGE )

B1.pack()
B2.pack()
B3.pack()
B4.pack()
B5.pack()
"""


root.mainloop()
# Importing Path from pathlib2 module
from pathlib2 import Path

# Creating a function to
# replace the text
def replacetext(search_text, replace_text):

    # Opening the file using the Path function
    file = Path(r"SampleFile.txt")

    # Reading and storing the content of the file in
    # a data variable
    data = file.read_text()

    # Replacing the text using the replace function
    data = data.replace(search_text, replace_text)

    # Writing the replaced data
    # in the text file
    file.write_text(data)

    # Return "Text replaced" string
    return "Text replaced"


# Creating a variable and storing
# the text that we want to search
search_text = "dummy"

# Creating a variable and storing
# the text that we want to update
replace_text = "replaced"

# Calling the replacetext function
# and printing the returned statement
print(replacetext(search_text, replace_text))
#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk
from tkinter import Canvas, Frame
from tkinter import *

root = tk.Tk()
notebook = ttk.Notebook(root)
notebook.grid(row=0, column=0)

f2 = ttk.Frame(notebook)
f2.grid(row=0, column=0)

notebook.add(f2, text="2")


def checkered(canvas, line_distance):
    # vertical lines at an interval of "line_distance" pixel
    for x in range(line_distance, canvas_width, line_distance):
        canvas.create_line(x, 0, x, canvas_height, fill="#476042")
    # horizontal lines at an interval of "line_distance" pixel
    for y in range(line_distance, canvas_height, line_distance):
        canvas.create_line(0, y, canvas_width, y, fill="#476042")


canvas_width = 1800
canvas_height = 900
wow = Canvas(f2, width=canvas_width, height=canvas_height)
wow.grid(row=0, column=0)
wow.create_line(10, 450, 1800, 450, fill="black", width=4)
wow.create_line(900, 10, 900, 900, fill="black", width=4)


wow.create_line(50, 440, 50, 460, fill="blue", width=4)
wow.create_line(100, 440, 100, 460, fill="blue", width=4)
wow.create_line(150, 440, 150, 460, fill="blue", width=4)
wow.create_line(200, 440, 200, 460, fill="blue", width=4)
wow.create_line(250, 440, 250, 460, fill="blue", width=4)
wow.create_line(300, 440, 300, 460, fill="blue", width=4)
wow.create_line(350, 440, 350, 460, fill="blue", width=4)
wow.create_line(400, 440, 400, 460, fill="blue", width=4)
wow.create_line(450, 440, 450, 460, fill="blue", width=4)
wow.create_line(500, 440, 500, 460, fill="blue", width=4)
wow.create_line(550, 440, 550, 460, fill="blue", width=4)
wow.create_line(600, 440, 600, 460, fill="blue", width=4)
wow.create_line(650, 440, 650, 460, fill="blue", width=4)
wow.create_line(700, 440, 700, 460, fill="blue", width=4)
wow.create_line(750, 440, 750, 460, fill="blue", width=4)
wow.create_line(800, 440, 800, 460, fill="blue", width=4)
wow.create_line(850, 440, 850, 460, fill="blue", width=4)
wow.create_line(900, 440, 900, 460, fill="blue", width=4)
wow.create_line(950, 440, 950, 460, fill="blue", width=4)
wow.create_line(1000, 440, 1000, 460, fill="blue", width=4)
wow.create_line(1050, 440, 1050, 460, fill="blue", width=4)
wow.create_line(1100, 440, 1100, 460, fill="blue", width=4)
wow.create_line(1150, 440, 1150, 460, fill="blue", width=4)
wow.create_line(1200, 440, 1200, 460, fill="blue", width=4)
wow.create_line(1250, 440, 1250, 460, fill="blue", width=4)
wow.create_line(1300, 440, 1300, 460, fill="blue", width=4)
wow.create_line(1350, 440, 1350, 460, fill="blue", width=4)
wow.create_line(1400, 440, 1400, 460, fill="blue", width=4)
wow.create_line(1450, 440, 1450, 460, fill="blue", width=4)
wow.create_line(1500, 440, 1500, 460, fill="blue", width=4)
wow.create_line(1550, 440, 1550, 460, fill="blue", width=4)
wow.create_line(1600, 440, 1600, 460, fill="blue", width=4)
wow.create_line(1650, 440, 1650, 460, fill="blue", width=4)
wow.create_line(1700, 440, 1700, 460, fill="blue", width=4)
wow.create_line(1750, 440, 1750, 460, fill="blue", width=4)
wow.create_line(1800, 440, 1800, 460, fill="blue", width=4)


wow.create_line(890, 20, 910, 20, fill="blue", width=4)
wow.create_line(890, 30, 910, 30, fill="blue", width=4)
wow.create_line(890, 50, 910, 50, fill="blue", width=4)
wow.create_line(890, 100, 910, 100, fill="blue", width=4)
wow.create_line(890, 150, 910, 150, fill="blue", width=4)
wow.create_line(890, 200, 910, 200, fill="blue", width=4)
wow.create_line(890, 250, 910, 250, fill="blue", width=4)
wow.create_line(890, 300, 910, 300, fill="blue", width=4)
wow.create_line(890, 350, 910, 350, fill="blue", width=4)
wow.create_line(890, 400, 910, 400, fill="blue", width=4)
wow.create_line(890, 450, 910, 450, fill="blue", width=4)
wow.create_line(890, 500, 910, 500, fill="blue", width=4)
wow.create_line(890, 550, 910, 550, fill="blue", width=4)
wow.create_line(890, 600, 910, 600, fill="blue", width=4)
wow.create_line(890, 650, 910, 650, fill="blue", width=4)
wow.create_line(890, 700, 910, 700, fill="blue", width=4)
wow.create_line(890, 750, 910, 750, fill="blue", width=4)
wow.create_line(890, 800, 910, 800, fill="blue", width=4)
wow.create_line(890, 850, 910, 850, fill="blue", width=4)
wow.create_line(890, 900, 910, 900, fill="blue", width=4)
wow.create_line(890, 950, 910, 950, fill="blue", width=4)
wow.create_line(900, 1000, 910, 1000, fill="blue", width=4)

#
wow.create_text(300, 50, text="300x50", fill="black", font=("URW Chancery L", 15))
wow.create_text(300, 450, text="300x450", fill="black", font=("URW Chancery L", 15))
wow.create_text(50, 450, text="50x450", fill="black", font=("URW Chancery L", 15))
wow.create_text(800, 800, text="800x800", fill="black", font=("URW Chancery L", 15))
wow.create_text(400, 600, text="400x600", fill="black", font=("URW Chancery L", 15))
wow.create_text(200, 150, text="200x150", fill="black", font=("URW Chancery L", 15))
wow.create_text(1300, 500, text="1300x500", fill="black", font=("URW Chancery L", 15))
wow.create_text(1700, 800, text="1700x800", fill="black", font=("URW Chancery L", 15))
wow.create_text(1600, 250, text="1600x250", fill="black", font=("URW Chancery L", 15))
wow.create_text(1500, 150, text="1500x150", fill="black", font=("URW Chancery L", 15))
wow.create_text(1400, 650, text="1400x650", fill="black", font=("URW Chancery L", 15))

wow.create_text(1200, 700, text="1200x700", fill="black", font=("URW Chancery L", 15))
wow.create_text(1100, 900, text="1100x900", fill="black", font=("URW Chancery L", 15))
wow.create_text(1000, 50, text="1000x50", fill="black", font=("URW Chancery L", 15))
wow.create_text(900, 750, text="900x750", fill="black", font=("URW Chancery L", 15))


checkered(wow, 10)
from tkinter import *
from tkinter.messagebox import *
import random
from combinatorics import all_colours


def inconsistent(p, guesses):
    """the function checks, if a permutation p, i.e. a list of
    colours like p = ['pink', 'yellow', 'green', 'red'] is consistent
    with the previous colours. Each previous colour permuation guess[0]
    compared (check()) with p has to return the same amount of blacks
    (rightly positioned colours) and whites (right colour at wrong
    position) as the corresponding evaluation (guess[1] in the
    list guesses)"""
    for guess in guesses:
        res = check(guess[0], p)
        (rightly_positioned, permutated) = guess[1]
        if res != [rightly_positioned, permutated]:
            return True  # inconsistent
    return False  # i.e. consistent


def answer_ok(a):
    """checking of an evaulation given by the human player makes
    sense. 3 blacks and 1 white make no sense, for example."""
    (rightly_positioned, permutated) = a
    if (rightly_positioned + permutated > number_of_positions) or (
        rightly_positioned + permutated < len(colours) - number_of_positions
    ):
        return False
    if rightly_positioned == 3 and permutated == 1:
        return False
    return True


def get_evaluation():
    """get evaluation from entry fields"""
    rightly_positioned = int(entryWidget_both.get())
    permutated = int(entryWidget_only_colours.get())
    return (rightly_positioned, permutated)


def new_evaluation(current_colour_choices):
    """This funtion gets an evaluation of the current guess, checks
    the consistency of this evaluation, adds the guess together with
    the evaluation to the list of guesses, shows the previous guesses
    and creates a ne guess"""
    rightly_positioned, permutated = get_evaluation()
    if rightly_positioned == number_of_positions:
        return (current_colour_choices, (rightly_positioned, permutated))

    if not answer_ok((rightly_positioned, permutated)):
        print("Input Error: Sorry, the input makes no sense")
        return (current_colour_choices, (-1, permutated))
    guesses.append((current_colour_choices, (rightly_positioned, permutated)))
    view_guesses()

    current_colour_choices = create_new_guess()
    show_current_guess(current_colour_choices)
    if not current_colour_choices:
        return (current_colour_choices, (-1, permutated))
    return (current_colour_choices, (rightly_positioned, permutated))


def check(p1, p2):
    """check() calcualtes the number of bulls (blacks) and cows (whites)
    of two permutations"""
    blacks = 0
    whites = 0
    for i in range(len(p1)):
        if p1[i] == p2[i]:
            blacks += 1
        else:
            if p1[i] in p2:
                whites += 1
    return [blacks, whites]


def create_new_guess():
    """a new guess is created, which is consistent to the
    previous guesses"""
    next_choice = next(permutation_iterator)
    while inconsistent(next_choice, guesses):
        try:
            next_choice = next(permutation_iterator)
        except StopIteration:
            print("Error: Your answers were inconsistent!")
            return ()
    return next_choice


def new_evaluation_tk():
    global current_colour_choices
    res = new_evaluation(current_colour_choices)
    current_colour_choices = res[0]


def show_current_guess(new_guess):
    row = 1
    Label(root, text="   New Guess:   ").grid(row=row, column=0, columnspan=4)
    row += 1
    col_count = 0
    for c in new_guess:
        print(c)
        l = Label(root, text="    ", bg=c)
        l.grid(row=row, column=col_count, sticky=W, padx=2)
        col_count += 1


def view_guesses():
    row = 3
    Label(root, text="Old Guesses").grid(row=row, column=0, columnspan=4)
    Label(root, text="c&p").grid(row=row, padx=5, column=number_of_positions + 1)
    Label(root, text="p").grid(row=row, padx=5, column=number_of_positions + 2)
    # dummy label for distance:
    Label(root, text="         ").grid(row=row, column=number_of_positions + 3)

    row += 1
    # vertical dummy label for distance:
    Label(root, text="             ").grid(row=row, column=0, columnspan=5)

    for guess in guesses:
        guessed_colours = guess[0]
        col_count = 0
        row += 1
        for c in guessed_colours:
            print(guessed_colours[col_count])
            l = Label(root, text="    ", bg=guessed_colours[col_count])
            l.grid(row=row, column=col_count, sticky=W, padx=2)
            col_count += 1
        # evaluation:
        for i in (0, 1):
            l = Label(root, text=str(guess[1][i]))
            l.grid(row=row, column=col_count + i + 1, padx=2)


if __name__ == "__main__":
    colours = ["red", "green", "blue", "yellow", "orange", "pink"]
    guesses = []
    number_of_positions = 4

    permutation_iterator = all_colours(colours, number_of_positions)
    current_colour_choices = next(permutation_iterator)

    new_guess = (current_colour_choices, (0, 0))

    row_offset = 1
    root = Tk()
    root.title("Mastermind")
    root["padx"] = 30
    root["pady"] = 20

    entryLabel = Label(root)
    entryLabel["text"] = "Completely Correct:"
    entryLabel.grid(row=row_offset, sticky=E, padx=5, column=number_of_positions + 4)
    entryWidget_both = Entry(root)
    entryWidget_both["width"] = 5
    entryWidget_both.grid(row=row_offset, column=number_of_positions + 5)

    entryLabel = Label(root)
    entryLabel["text"] = "Wrong Position:"
    entryLabel.grid(
        row=row_offset + 1, sticky=E, padx=5, column=number_of_positions + 4
    )
    entryWidget_only_colours = Entry(root)
    entryWidget_only_colours["width"] = 5
    entryWidget_only_colours.grid(row=row_offset + 1, column=number_of_positions + 5)

    submit_button = Button(root, text="Submit", command=new_evaluation_tk)
    submit_button.grid(row=4, column=number_of_positions + 4)

    quit_button = Button(root, text="Quit", command=root.quit)
    quit_button.grid(row=4, column=number_of_positions + 5)
    show_current_guess(current_colour_choices)

    root.mainloop()
from tkinter import *

inputFieldNames = ["First Name", "Last Name", "Address", "City", "State", "Pincode"]
buttonNames = ["Submit", "Reset", "Close"]
INPUT_FIELD_WIDTH = 20
STATUS_BAR_WIDTH = 40


# Application class

class Application:
    # Widget variable dictionary
    widget = {}

    # List of Widgets
    label = []
    entry = []
    button = []

    # Constructor
    def __init__(self, root):
        rowIndex = 0
        columnIndex = 0

        # Create label and entry field
        for inputFieldName in inputFieldNames:
            # Label
            columnIndex = 0
            # print("Adding label at ({},{})".format(rowIndex,columnIndex))
            self.label.append(
                Label(root, text=inputFieldName, padx=2, pady=2, anchor=E)
            )
            self.label[rowIndex].grid(row=rowIndex, column=0)

            # Entry field
            columnIndex = 1
            # print("Adding entry field at ({},{})".format(rowIndex, columnIndex))
            self.widget[inputFieldName] = StringVar()
            self.widget[inputFieldName].trace("w", self.callbackEntryField)
            self.entry.append(
                Entry(
                    root,
                    text="",
                    width=INPUT_FIELD_WIDTH,
                    textvariable=self.widget[inputFieldName],
                )
            )
            self.entry[rowIndex].grid(row=rowIndex, column=1)

            rowIndex = rowIndex + 1

        # Create buttons
        columnIndex = 0
        for buttonName in buttonNames:
            # print("Adding button at ({},{})".format(rowIndex,columnIndex))
            self.widget[buttonName] = StringVar()
            print("Registering callback for [{}]".format(buttonName))
            self.button.append(
                Button(
                    root,
                    text=buttonName,
                    padx=2,
                    pady=2,
                    command=self.makeCallback(buttonName),
                )
            )
            self.button[len(self.button) - 1].grid(row=rowIndex, column=columnIndex)
            columnIndex = columnIndex + 1

        # Create status bar
        columnIndex = 0
        rowIndex = rowIndex + 1
        self.lblStatusBarTitle = Label(root, text="Status: ")
        self.lblStatusBarTitle.grid(row=rowIndex, column=columnIndex)

        columnIndex = columnIndex + 1
        self.lblStatusBar = Label(
            root, text="Welcome", width=STATUS_BAR_WIDTH, bd=1, relief=SUNKEN
        )
        self.lblStatusBar.grid(row=rowIndex, column=columnIndex)

        self.DisplayWidgets()

    # Function to set status bar message
    def SetStatusBarMsg(self, msg):
        self.lblStatusBar.config(text=msg)

    # Directly using the body of this function at the time of registering callback
    # in button doesn't work! Don't know why. It keeps on registering only the last
    # registered buttonName.
    def makeCallback(self, buttonName):
        return lambda: self.callbackFunc(buttonName)

    def makeEntryFieldCallback(self, *args):
        return lambda: self.callbackEntryField()

    # Called when entry field is updated
    def callbackEntryField(self, *args):
        self.SetStatusBarMsg("[{}] updated".format(args[0]))

    # callback function for button
    def callbackFunc(self, buttonName):
        # print("{} button was pressed".format(buttonName))
        self.SetStatusBarMsg("{} button was pressed".format(buttonName))

        if buttonName == "Submit":
            self.SetStatusBarMsg("Thank you for submitting details".format(buttonName))
        elif buttonName == "Reset":
            for e in self.entry:
                print("Clearing field [{}]".format(e.get()))
                e.delete(0, "end")
            self.SetStatusBarMsg("Clearing input fields".format(buttonName))
        elif buttonName == "Close":
            root.quit()

    # Display what all widgets have been registered in this application
    def DisplayWidgets(self):
        print("Available Widgets:")
        index = 0
        for widget in self.widget:
            print("{}) {}".format(index, widget))
            index = index + 1


#
# Main
#
root = Tk()
root.title("Generic Window Example")

app = Application(root)
root.mainloop()
from tkinter import *
from tkinter import messagebox

def extract_data():
    print(text_box.get('1.0', 'end'))


ws = Tk()
ws.title('PythonGuides')
ws.geometry('400x300')
ws.config(bg='#84BF04')


message ='''
You are invited to a Birthday Party

venue: Az Resort
Timing: 7 pm, wednesday

Please visit with family.

Regards,
James


'''

text_box = Text(
    ws,
    height=13,
    width=40,
    wrap='word'
)
text_box.pack(expand=True)
text_box.insert('end', message)

Button(
    ws,
    text='Change Text',
    command=extract_data
).pack(expand=True)

ws.mainloop()
from tkinter import *
from tkinter import messagebox

def extract_data():
    print(text_box.get('1.0', 'end'))


ws = Tk()
ws.title('PythonGuides')
ws.geometry('400x300')
ws.config(bg='#84BF04')


message ='''
You are invited to a Birthday Party

venue: Az Resort
Timing: 7 pm, wednesday

Please visit with family.

Regards,
James


'''

text_box = Text(
    ws,
    height=13,
    width=40,
    wrap='word'
)
text_box.pack(expand=True)
text_box.insert('end', message)

Button(
    ws,
    text='Change Text',
    command=extract_data
).pack(expand=True)

ws.mainloop()
from tkinter import *
def add():
    s1=e1.get()
    s2=e2.get()
    if s1=='' or s2=='':
        err.set("Field cannot be empty")
    else:
        try:
            x=int(s1)
            y=int(s2)
            z=x+y
            res.set(str(z))
        except ValueError:
            err.set("Invalid Input...")
    return
window=Tk()
window.title("Calculator")
res=StringVar()
err=StringVar()
l1=Label(window,text="Enter Input:",font="Times 20")
e1=Entry(window,font="Times 20")

l2=Label(window,text="+",font="Times 20")
e2=Entry(window,font="Times 20")

l3=Label(window,text="=",font="Times 20")
e3=Entry(window,font="Times 20",textvariable=res)

b1=Button(window,text="add",command=add,font="Times 20")
l4=Label(window,textvariable=err,font='Times 20',fg='red')

l1.grid(row=0,column=0)
e1.grid(row=0,column=1)

l2.grid(row=0,column=2)
e2.grid(row=0,column=3)

l3.grid(row=0,column=4)
e3.grid(row=0,column=5)

b1.grid(row=0,column=6)
l4.grid(row=1,column=3)

#graphics.py
"""Simple object oriented graphics library  
The library is designed to make it very easy for novice programmers to
experiment with computer graphics in an object oriented fashion. It is
written by John Zelle for use with the book "Python Programming: An
Introduction to Computer Science" (Franklin, Beedle & Associates).
LICENSE: This is open-source software released under the terms of the
GPL (http://www.gnu.org/licenses/gpl.html).
PLATFORMS: The package is a wrapper around Tkinter and should run on
any platform where Tkinter is available.
INSTALLATION: Put this file somewhere where Python can see it.
OVERVIEW: There are two kinds of objects in the library. The GraphWin
class implements a window where drawing can be done and various
GraphicsObjects are provided that can be drawn into a GraphWin. As a
simple example, here is a complete program to draw a circle of radius
10 centered in a 100x100 window:
--------------------------------------------------------------------
from graphics import *
def main():
    win = GraphWin("My Circle", 100, 100)
    c = Circle(Point(50,50), 10)
    c.draw(win)
    win.getMouse() # Pause to view result
    win.close()    # Close window when done
main()
--------------------------------------------------------------------
GraphWin objects support coordinate transformation through the
setCoords method and pointer-based input through getMouse.
The library provides the following graphical objects:
    Point
    Line
    Circle
    Oval
    Rectangle
    Polygon
    Text
    Entry (for text-based input)
    Image
Various attributes of graphical objects can be set such as
outline-color, fill-color and line-width. Graphical objects also
support moving and hiding for animation effects.
The library also provides a very simple class for pixel-based image
manipulation, Pixmap. A pixmap can be loaded from a file and displayed
using an Image object. Both getPixel and setPixel methods are provided
for manipulating the image.
DOCUMENTATION: For complete documentation, see Chapter 4 of "Python
Programming: An Introduction to Computer Science" by John Zelle,
published by Franklin, Beedle & Associates.  Also see
http://mcsp.wartburg.edu/zelle/python for a quick reference"""

# Version 4.1 12/29/2009
#     * Merged Pixmap and Image class. Old Pixmap removed, use Image.
# Version 4.0.1 10/08/2009
#     * Modified the autoflush on GraphWin to default to True
#     * Autoflush check on close, setBackground
#     * Fixed getMouse to flush pending clicks at entry
# Version 4.0 08/2009
#     * Reverted to non-threaded version. The advantages (robustness,
#         efficiency, ability to use with other Tk code, etc.) outweigh
#         the disadvantage that interactive use with IDLE is slightly more
#         cumbersome.
#     * Modified to run in either Python 2.x or 3.x (same file).
#     * Added Image.getPixmap()
#     * Added update() -- stand alone function to cause any pending
#           graphics changes to display.
#
# Version 3.4 10/16/07
#     Fixed GraphicsError to avoid "exploded" error messages.
# Version 3.3 8/8/06
#     Added checkMouse method to GraphWin
# Version 3.2.3
#     Fixed error in Polygon init spotted by Andrew Harrington
#     Fixed improper threading in Image constructor
# Version 3.2.2 5/30/05
#     Cleaned up handling of exceptions in Tk thread. The graphics package
#     now raises an exception if attempt is made to communicate with
#     a dead Tk thread.
# Version 3.2.1 5/22/05
#     Added shutdown function for tk thread to eliminate race-condition
#        error "chatter" when main thread terminates
#     Renamed various private globals with _
# Version 3.2 5/4/05
#     Added Pixmap object for simple image manipulation.
# Version 3.1 4/13/05
#     Improved the Tk thread communication so that most Tk calls
#        do not have to wait for synchonization with the Tk thread.
#        (see _tkCall and _tkExec)
# Version 3.0 12/30/04
#     Implemented Tk event loop in separate thread. Should now work
#        interactively with IDLE. Undocumented autoflush feature is
#        no longer necessary. Its default is now False (off). It may
#        be removed in a future version.
#     Better handling of errors regarding operations on windows that
#       have been closed.
#     Addition of an isClosed method to GraphWindow class.

# Version 2.2 8/26/04
#     Fixed cloning bug reported by Joseph Oldham.
#     Now implements deep copy of config info.
# Version 2.1 1/15/04
#     Added autoflush option to GraphWin. When True (default) updates on
#        the window are done after each action. This makes some graphics
#        intensive programs sluggish. Turning off autoflush causes updates
#        to happen during idle periods or when flush is called.
# Version 2.0
#     Updated Documentation
#     Made Polygon accept a list of Points in constructor
#     Made all drawing functions call TK update for easier animations
#          and to make the overall package work better with
#          Python 2.3 and IDLE 1.0 under Windows (still some issues).
#     Removed vestigial turtle graphics.
#     Added ability to configure font for Entry objects (analogous to Text)
#     Added setTextColor for Text as an alias of setFill
#     Changed to class-style exceptions
#     Fixed cloning of Text objects

# Version 1.6
#     Fixed Entry so StringVar uses _root as master, solves weird
#            interaction with shell in Idle
#     Fixed bug in setCoords. X and Y coordinates can increase in
#           "non-intuitive" direction.
#     Tweaked wm_protocol so window is not resizable and kill box closes.

# Version 1.5
#     Fixed bug in Entry. Can now define entry before creating a
#     GraphWin. All GraphWins are now toplevel windows and share
#     a fixed root (called _root).

# Version 1.4
#     Fixed Garbage collection of Tkinter images bug.
#     Added ability to set text atttributes.
#     Added Entry boxes.

import time, os, sys

try:  # import as appropriate for 2.x vs. 3.x
   import tkinter as tk
except:
   import Tkinter as tk



# Module Exceptions

class GraphicsError(Exception):
    """Generic error class for graphics module exceptions."""
    pass

OBJ_ALREADY_DRAWN = "Object currently drawn"
UNSUPPORTED_METHOD = "Object doesn't support operation"
BAD_OPTION = "Illegal option value"
DEAD_THREAD = "Graphics thread quit unexpectedly"

_root = tk.Tk()
_root.withdraw()

def update():
    _root.update()


# Graphics classes start here
        
class GraphWin(tk.Canvas):

    """A GraphWin is a toplevel window for displaying graphics."""

    def __init__(self, title="Graphics Window",
                 width=200, height=200, autoflush=True):
        master = tk.Toplevel(_root)
        master.protocol("WM_DELETE_WINDOW", self.close)
        tk.Canvas.__init__(self, master, width=width, height=height)
        self.master.title(title)
        self.pack()
        master.resizable(0,0)
        self.foreground = "black"
        self.items = []
        self.mouseX = None
        self.mouseY = None
        self.bind("<Button-1>", self._onClick)
        self.height = height
        self.width = width
        self.autoflush = autoflush
        self._mouseCallback = None
        self.trans = None
        self.closed = False
        master.lift()
        if autoflush: _root.update()
     
    def __checkOpen(self):
        if self.closed:
            raise GraphicsError("window is closed")

    def setBackground(self, color):
        """Set background color of the window"""
        self.__checkOpen()
        self.config(bg=color)
        self.__autoflush()
        
    def setCoords(self, x1, y1, x2, y2):
        """Set coordinates of window to run from (x1,y1) in the
        lower-left corner to (x2,y2) in the upper-right corner."""
        self.trans = Transform(self.width, self.height, x1, y1, x2, y2)

    def close(self):
        """Close the window"""

        if self.closed: return
        self.closed = True
        self.master.destroy()
        self.__autoflush()


    def isClosed(self):
        return self.closed


    def isOpen(self):
        return not self.closed


    def __autoflush(self):
        if self.autoflush:
            _root.update()

    
    def plot(self, x, y, color="black"):
        """Set pixel (x,y) to the given color"""
        self.__checkOpen()
        xs,ys = self.toScreen(x,y)
        self.create_line(xs,ys,xs+1,ys, fill=color)
        self.__autoflush()
        
    def plotPixel(self, x, y, color="black"):
        """Set pixel raw (independent of window coordinates) pixel
        (x,y) to color"""
        self.__checkOpen()
        self.create_line(x,y,x+1,y, fill=color)
        self.__autoflush()
      
    def flush(self):
        """Update drawing to the window"""
        self.__checkOpen()
        self.update_idletasks()
        
    def getMouse(self):
        """Wait for mouse click and return Point object representing
        the click"""
        self.update()      # flush any prior clicks
        self.mouseX = None
        self.mouseY = None
        while self.mouseX == None or self.mouseY == None:
            self.update()
            if self.isClosed(): raise GraphicsError("getMouse in closed window")
            time.sleep(.1) # give up thread
        x,y = self.toWorld(self.mouseX, self.mouseY)
        self.mouseX = None
        self.mouseY = None
        return Point(x,y)

    def checkMouse(self):
        """Return last mouse click or None if mouse has
        not been clicked since last call"""
        if self.isClosed():
            raise GraphicsError("checkMouse in closed window")
        self.update()
        if self.mouseX != None and self.mouseY != None:
            x,y = self.toWorld(self.mouseX, self.mouseY)
            self.mouseX = None
            self.mouseY = None
            return Point(x,y)
        else:
            return None
            
    def getHeight(self):
        """Return the height of the window"""
        return self.height
        
    def getWidth(self):
        """Return the width of the window"""
        return self.width
    
    def toScreen(self, x, y):
        trans = self.trans
        if trans:
            return self.trans.screen(x,y)
        else:
            return x,y
                      
    def toWorld(self, x, y):
        trans = self.trans
        if trans:
            return self.trans.world(x,y)
        else:
            return x,y
        
    def setMouseHandler(self, func):
        self._mouseCallback = func
        
    def _onClick(self, e):
        self.mouseX = e.x
        self.mouseY = e.y
        if self._mouseCallback:
            self._mouseCallback(Point(e.x, e.y)) 
                      
class Transform:

    """Internal class for 2-D coordinate transformations"""
    
    def __init__(self, w, h, xlow, ylow, xhigh, yhigh):
        # w, h are width and height of window
        # (xlow,ylow) coordinates of lower-left [raw (0,h-1)]
        # (xhigh,yhigh) coordinates of upper-right [raw (w-1,0)]
        xspan = (xhigh-xlow)
        yspan = (yhigh-ylow)
        self.xbase = xlow
        self.ybase = yhigh
        self.xscale = xspan/float(w-1)
        self.yscale = yspan/float(h-1)
        
    def screen(self,x,y):
        # Returns x,y in screen (actually window) coordinates
        xs = (x-self.xbase) / self.xscale
        ys = (self.ybase-y) / self.yscale
        return int(xs+0.5),int(ys+0.5)
        
    def world(self,xs,ys):
        # Returns xs,ys in world coordinates
        x = xs*self.xscale + self.xbase
        y = self.ybase - ys*self.yscale
        return x,y


# Default values for various item configuration options. Only a subset of
#   keys may be present in the configuration dictionary for a given item
DEFAULT_CONFIG = {"fill":"",
      "outline":"black",
      "width":"1",
      "arrow":"none",
      "text":"",
      "justify":"center",
                  "font": ("helvetica", 12, "normal")}

class GraphicsObject:

    """Generic base class for all of the drawable objects"""
    # A subclass of GraphicsObject should override _draw and
    #   and _move methods.
    
    def __init__(self, options):
        # options is a list of strings indicating which options are
        # legal for this object.
        
        # When an object is drawn, canvas is set to the GraphWin(canvas)
        #    object where it is drawn and id is the TK identifier of the
        #    drawn shape.
        self.canvas = None
        self.id = None

        # config is the dictionary of configuration options for the widget.
        config = {}
        for option in options:
            config[option] = DEFAULT_CONFIG[option]
        self.config = config
        
    def setFill(self, color):
        """Set interior color to color"""
        self._reconfig("fill", color)
        
    def setOutline(self, color):
        """Set outline color to color"""
        self._reconfig("outline", color)
        
    def setWidth(self, width):
        """Set line weight to width"""
        self._reconfig("width", width)

    def draw(self, graphwin):

        """Draw the object in graphwin, which should be a GraphWin
        object.  A GraphicsObject may only be drawn into one
        window. Raises an error if attempt made to draw an object that
        is already visible."""

        if self.canvas and not self.canvas.isClosed(): raise GraphicsError(OBJ_ALREADY_DRAWN)
        if graphwin.isClosed(): raise GraphicsError("Can't draw to closed window")
        self.canvas = graphwin
        self.id = self._draw(graphwin, self.config)
        if graphwin.autoflush:
            _root.update()

            
    def undraw(self):

        """Undraw the object (i.e. hide it). Returns silently if the
        object is not currently drawn."""
        
        if not self.canvas: return
        if not self.canvas.isClosed():
            self.canvas.delete(self.id)
            if self.canvas.autoflush:
                _root.update()
        self.canvas = None
        self.id = None


    def move(self, dx, dy):

        """move object dx units in x direction and dy units in y
        direction"""
        
        self._move(dx,dy)
        canvas = self.canvas
        if canvas and not canvas.isClosed():
            trans = canvas.trans
            if trans:
                x = dx/ trans.xscale 
                y = -dy / trans.yscale
            else:
                x = dx
                y = dy
            self.canvas.move(self.id, x, y)
            if canvas.autoflush:
                _root.update()
           
    def _reconfig(self, option, setting):
        # Internal method for changing configuration of the object
        # Raises an error if the option does not exist in the config
        #    dictionary for this object
        if option not in self.config:
            raise GraphicsError(UNSUPPORTED_METHOD)
        options = self.config
        options[option] = setting
        if self.canvas and not self.canvas.isClosed():
            self.canvas.itemconfig(self.id, options)
            if self.canvas.autoflush:
                _root.update()


    def _draw(self, canvas, options):
        """draws appropriate figure on canvas with options provided
        Returns Tk id of item drawn"""
        pass # must override in subclass


    def _move(self, dx, dy):
        """updates internal state of object to move it dx,dy units"""
        pass # must override in subclass

         
class Point(GraphicsObject):
    def __init__(self, x, y):
        GraphicsObject.__init__(self, ["outline", "fill"])
        self.setFill = self.setOutline
        self.x = x
        self.y = y
        
    def _draw(self, canvas, options):
        x,y = canvas.toScreen(self.x,self.y)
        return canvas.create_rectangle(x,y,x+1,y+1,options)
        
    def _move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy
        
    def clone(self):
        other = Point(self.x,self.y)
        other.config = self.config.copy()
        return other
                
    def getX(self): return self.x
    def getY(self): return self.y

class _BBox(GraphicsObject):
    # Internal base class for objects represented by bounding box
    # (opposite corners) Line segment is a degenerate case.
    
    def __init__(self, p1, p2, options=["outline","width","fill"]):
        GraphicsObject.__init__(self, options)
        self.p1 = p1.clone()
        self.p2 = p2.clone()

    def _move(self, dx, dy):
        self.p1.x = self.p1.x + dx
        self.p1.y = self.p1.y + dy
        self.p2.x = self.p2.x + dx
        self.p2.y = self.p2.y  + dy
                
    def getP1(self): return self.p1.clone()

    def getP2(self): return self.p2.clone()
    
    def getCenter(self):
        p1 = self.p1
        p2 = self.p2
        return Point((p1.x+p2.x)/2.0, (p1.y+p2.y)/2.0)
    
class Rectangle(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)
    
    def _draw(self, canvas, options):
        p1 = self.p1
        p2 = self.p2
        x1,y1 = canvas.toScreen(p1.x,p1.y)
        x2,y2 = canvas.toScreen(p2.x,p2.y)
        return canvas.create_rectangle(x1,y1,x2,y2,options)
        
    def clone(self):
        other = Rectangle(self.p1, self.p2)
        other.config = self.config.copy()
        return other
        
class Oval(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2)
        
    def clone(self):
        other = Oval(self.p1, self.p2)
        other.config = self.config.copy()
        return other
   
    def _draw(self, canvas, options):
        p1 = self.p1
        p2 = self.p2
        x1,y1 = canvas.toScreen(p1.x,p1.y)
        x2,y2 = canvas.toScreen(p2.x,p2.y)
        return canvas.create_oval(x1,y1,x2,y2,options)
    
class Circle(Oval):
    
    def __init__(self, center, radius):
        p1 = Point(center.x-radius, center.y-radius)
        p2 = Point(center.x+radius, center.y+radius)
        Oval.__init__(self, p1, p2)
        self.radius = radius
        
    def clone(self):
        other = Circle(self.getCenter(), self.radius)
        other.config = self.config.copy()
        return other
        
    def getRadius(self):
        return self.radius
              
class Line(_BBox):
    
    def __init__(self, p1, p2):
        _BBox.__init__(self, p1, p2, ["arrow","fill","width"])
        self.setFill(DEFAULT_CONFIG['outline'])
        self.setOutline = self.setFill
   
    def clone(self):
        other = Line(self.p1, self.p2)
        other.config = self.config.copy()
        return other
  
    def _draw(self, canvas, options):
        p1 = self.p1
        p2 = self.p2
        x1,y1 = canvas.toScreen(p1.x,p1.y)
        x2,y2 = canvas.toScreen(p2.x,p2.y)
        return canvas.create_line(x1,y1,x2,y2,options)
        
    def setArrow(self, option):
        if not option in ["first","last","both","none"]:
            raise GraphicsError(BAD_OPTION)
        self._reconfig("arrow", option)
        

class Polygon(GraphicsObject):
    
    def __init__(self, *points):
        # if points passed as a list, extract it
        if len(points) == 1 and type(points[0]) == type([]):
            points = points[0]
        self.points = list(map(Point.clone, points))
        GraphicsObject.__init__(self, ["outline", "width", "fill"])
        
    def clone(self):
        other = Polygon(*self.points)
        other.config = self.config.copy()
        return other

    def getPoints(self):
        return list(map(Point.clone, self.points))

    def _move(self, dx, dy):
        for p in self.points:
            p.move(dx,dy)
   
    def _draw(self, canvas, options):
        args = [canvas]
        for p in self.points:
            x,y = canvas.toScreen(p.x,p.y)
            args.append(x)
            args.append(y)
        args.append(options)
        return GraphWin.create_polygon(*args) 

class Text(GraphicsObject):
    
    def __init__(self, p, text):
        GraphicsObject.__init__(self, ["justify","fill","text","font"])
        self.setText(text)
        self.anchor = p.clone()
        self.setFill(DEFAULT_CONFIG['outline'])
        self.setOutline = self.setFill
        
    def _draw(self, canvas, options):
        p = self.anchor
        x,y = canvas.toScreen(p.x,p.y)
        return canvas.create_text(x,y,options)
        
    def _move(self, dx, dy):
        self.anchor.move(dx,dy)
        
    def clone(self):
        other = Text(self.anchor, self.config['text'])
        other.config = self.config.copy()
        return other

    def setText(self,text):
        self._reconfig("text", text)
        
    def getText(self):
        return self.config["text"]
            
    def getAnchor(self):
        return self.anchor.clone()

    def setFace(self, face):
        if face in ['helvetica','arial','courier','times roman']:
            f,s,b = self.config['font']
            self._reconfig("font",(face,s,b))
        else:
            raise GraphicsError(BAD_OPTION)

    def setSize(self, size):
        if 5 <= size <= 36:
            f,s,b = self.config['font']
            self._reconfig("font", (f,size,b))
        else:
            raise GraphicsError(BAD_OPTION)

    def setStyle(self, style):
        if style in ['bold','normal','italic', 'bold italic']:
            f,s,b = self.config['font']
            self._reconfig("font", (f,s,style))
        else:
            raise GraphicsError(BAD_OPTION)

    def setTextColor(self, color):
        self.setFill(color)


class Entry(GraphicsObject):

    def __init__(self, p, width):
        GraphicsObject.__init__(self, [])
        self.anchor = p.clone()
        #print self.anchor
        self.width = width
        self.text = tk.StringVar(_root)
        self.text.set("")
        self.fill = "gray"
        self.color = "black"
        self.font = DEFAULT_CONFIG['font']
        self.entry = None

    def _draw(self, canvas, options):
        p = self.anchor
        x,y = canvas.toScreen(p.x,p.y)
        frm = tk.Frame(canvas.master)
        self.entry = tk.Entry(frm,
                              width=self.width,
                              textvariable=self.text,
                              bg = self.fill,
                              fg = self.color,
                              font=self.font)
        self.entry.pack()
        #self.setFill(self.fill)
        return canvas.create_window(x,y,window=frm)

    def getText(self):
        return self.text.get()

    def _move(self, dx, dy):
        self.anchor.move(dx,dy)

    def getAnchor(self):
        return self.anchor.clone()

    def clone(self):
        other = Entry(self.anchor, self.width)
        other.config = self.config.copy()
        other.text = tk.StringVar()
        other.text.set(self.text.get())
        other.fill = self.fill
        return other

    def setText(self, t):
        self.text.set(t)

            
    def setFill(self, color):
        self.fill = color
        if self.entry:
            self.entry.config(bg=color)

            
    def _setFontComponent(self, which, value):
        font = list(self.font)
        font[which] = value
        self.font = tuple(font)
        if self.entry:
            self.entry.config(font=self.font)


    def setFace(self, face):
        if face in ['helvetica','arial','courier','times roman']:
            self._setFontComponent(0, face)
        else:
            raise GraphicsError(BAD_OPTION)

    def setSize(self, size):
        if 5 <= size <= 36:
            self._setFontComponent(1,size)
        else:
            raise GraphicsError(BAD_OPTION)

    def setStyle(self, style):
        if style in ['bold','normal','italic', 'bold italic']:
            self._setFontComponent(2,style)
        else:
            raise GraphicsError(BAD_OPTION)

    def setTextColor(self, color):
        self.color=color
        if self.entry:
            self.entry.config(fg=color)


class Image(GraphicsObject):

    idCount = 0
    imageCache = {} # tk photoimages go here to avoid GC while drawn 
    
    def __init__(self, p, *pixmap):
        GraphicsObject.__init__(self, [])
        self.anchor = p.clone()
        self.imageId = Image.idCount
        Image.idCount = Image.idCount + 1
        if len(pixmap) == 1: # file name provided
            self.img = tk.PhotoImage(file=pixmap[0], master=_root)
        else: # width and height provided
            width, height = pixmap
            self.img = tk.PhotoImage(master=_root, width=width, height=height)
                
    def _draw(self, canvas, options):
        p = self.anchor
        x,y = canvas.toScreen(p.x,p.y)
        self.imageCache[self.imageId] = self.img # save a reference  
        return canvas.create_image(x,y,image=self.img)
    def _move(self, dx, dy):
        self.anchor.move(dx,dy)
        
    def undraw(self):
        del self.imageCache[self.imageId]  # allow gc of tk photoimage
        GraphicsObject.undraw(self)

    def getAnchor(self):
        return self.anchor.clone()
        
    def clone(self):
        other = Image(Point(0,0), 0, 0)
        other.img = self.img.copy()
        other.anchor = self.anchor.clone()
        other.config = self.config.copy()
        return other

    def getWidth(self):
        """Returns the width of the image in pixels"""
        return self.img.width() 

    def getHeight(self):
        """Returns the height of the image in pixels"""
        return self.img.height()

    def getPixel(self, x, y):
        """Returns a list [r,g,b] with the RGB color values for pixel (x,y)
        r,g,b are in range(256)
        """
        
        value = self.img.get(x,y) 
        if type(value) ==  type(0):
            return [value, value, value]
        else:
            return list(map(int, value.split())) 

    def setPixel(self, x, y, color):
        """Sets pixel (x,y) to the given color
        
        """
        self.img.put("{" + color +"}", (x, y))
        

    def save(self, filename):
        """Saves the pixmap image to filename.
        The format for the save image is determined from the filname extension.
        """
        
        path, name = os.path.split(filename)
        ext = name.split(".")[-1]
        self.img.write( filename, format=ext)

        
def color_rgb(root,g,b):
    """r,g,b are intensities of red, green, and blue in range(256)
    Returns color specifier string for the resulting color"""
    return "#%02x%02x%02x" % (root,g,b)

def test():
    win = GraphWin()
    win.setCoords(0,0,10,10)
    t = Text(Point(5,5), "Centered Text")
    t.draw(win)
    p = Polygon(Point(1,1), Point(5,3), Point(2,7))
    p.draw(win)
    e = Entry(Point(5,6), 10)
    e.draw(win)
    win.getMouse()
    p.setFill("red")
    p.setOutline("blue")
    p.setWidth(2)
    s = ""
    for pt in p.getPoints():
        s = s + "(%0.1f,%0.1f) " % (pt.getX(), pt.getY())
    t.setText(e.getText())
    e.setFill("green")
    e.setText("Spam!")
    e.move(2,0)
    win.getMouse()
    p.move(2,3)
    s = ""
    for pt in p.getPoints():
        s = s + "(%0.1f,%0.1f) " % (pt.getX(), pt.getY())
    t.setText(s)
    win.getMouse()
    p.undraw()
    e.undraw()
    t.setStyle("bold")
    win.getMouse()
    t.setStyle("normal")
    win.getMouse()
    t.setStyle("italic")
    win.getMouse()
    t.setStyle("bold italic")
    win.getMouse()
    t.setSize(14)
    win.getMouse()
    t.setFace("arial")
    t.setSize(20)
    win.getMouse()
    win.close()

if __name__ == "__main__":
    test()
#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk
from tkinter import Canvas, Frame
from tkinter import *

root = tk.Tk()
notebook = ttk.Notebook(root)
notebook.grid(row=0, column=0)

f2 = ttk.Frame(notebook)
f2.grid(row=0, column=0)

notebook.add(f2, text="2")


def checkered(canvas, line_distance):
    # vertical lines at an interval of "line_distance" pixel
    for x in range(line_distance, canvas_width, line_distance):
        canvas.create_line(x, 0, x, canvas_height, fill="#476042")
    # horizontal lines at an interval of "line_distance" pixel
    for y in range(line_distance, canvas_height, line_distance):
        canvas.create_line(0, y, canvas_width, y, fill="#476042")


canvas_width = 1800
canvas_height = 900
wow = Canvas(f2, width=canvas_width, height=canvas_height)
wow.grid(row=0, column=0)
wow.create_line(10, 450, 1800, 450, fill="black", width=4)
wow.create_line(900, 10, 900, 900, fill="black", width=4)


wow.create_line(50, 440, 50, 460, fill="blue", width=4)
wow.create_line(100, 440, 100, 460, fill="blue", width=4)
wow.create_line(150, 440, 150, 460, fill="blue", width=4)
wow.create_line(200, 440, 200, 460, fill="blue", width=4)
wow.create_line(250, 440, 250, 460, fill="blue", width=4)
wow.create_line(300, 440, 300, 460, fill="blue", width=4)
wow.create_line(350, 440, 350, 460, fill="blue", width=4)
wow.create_line(400, 440, 400, 460, fill="blue", width=4)
wow.create_line(450, 440, 450, 460, fill="blue", width=4)
wow.create_line(500, 440, 500, 460, fill="blue", width=4)
wow.create_line(550, 440, 550, 460, fill="blue", width=4)
wow.create_line(600, 440, 600, 460, fill="blue", width=4)
wow.create_line(650, 440, 650, 460, fill="blue", width=4)
wow.create_line(700, 440, 700, 460, fill="blue", width=4)
wow.create_line(750, 440, 750, 460, fill="blue", width=4)
wow.create_line(800, 440, 800, 460, fill="blue", width=4)
wow.create_line(850, 440, 850, 460, fill="blue", width=4)
wow.create_line(900, 440, 900, 460, fill="blue", width=4)
wow.create_line(950, 440, 950, 460, fill="blue", width=4)
wow.create_line(1000, 440, 1000, 460, fill="blue", width=4)
wow.create_line(1050, 440, 1050, 460, fill="blue", width=4)
wow.create_line(1100, 440, 1100, 460, fill="blue", width=4)
wow.create_line(1150, 440, 1150, 460, fill="blue", width=4)
wow.create_line(1200, 440, 1200, 460, fill="blue", width=4)
wow.create_line(1250, 440, 1250, 460, fill="blue", width=4)
wow.create_line(1300, 440, 1300, 460, fill="blue", width=4)
wow.create_line(1350, 440, 1350, 460, fill="blue", width=4)
wow.create_line(1400, 440, 1400, 460, fill="blue", width=4)
wow.create_line(1450, 440, 1450, 460, fill="blue", width=4)
wow.create_line(1500, 440, 1500, 460, fill="blue", width=4)
wow.create_line(1550, 440, 1550, 460, fill="blue", width=4)
wow.create_line(1600, 440, 1600, 460, fill="blue", width=4)
wow.create_line(1650, 440, 1650, 460, fill="blue", width=4)
wow.create_line(1700, 440, 1700, 460, fill="blue", width=4)
wow.create_line(1750, 440, 1750, 460, fill="blue", width=4)
wow.create_line(1800, 440, 1800, 460, fill="blue", width=4)


wow.create_line(890, 20, 910, 20, fill="blue", width=4)
wow.create_line(890, 30, 910, 30, fill="blue", width=4)
wow.create_line(890, 50, 910, 50, fill="blue", width=4)
wow.create_line(890, 100, 910, 100, fill="blue", width=4)
wow.create_line(890, 150, 910, 150, fill="blue", width=4)
wow.create_line(890, 200, 910, 200, fill="blue", width=4)
wow.create_line(890, 250, 910, 250, fill="blue", width=4)
wow.create_line(890, 300, 910, 300, fill="blue", width=4)
wow.create_line(890, 350, 910, 350, fill="blue", width=4)
wow.create_line(890, 400, 910, 400, fill="blue", width=4)
wow.create_line(890, 450, 910, 450, fill="blue", width=4)
wow.create_line(890, 500, 910, 500, fill="blue", width=4)
wow.create_line(890, 550, 910, 550, fill="blue", width=4)
wow.create_line(890, 600, 910, 600, fill="blue", width=4)
wow.create_line(890, 650, 910, 650, fill="blue", width=4)
wow.create_line(890, 700, 910, 700, fill="blue", width=4)
wow.create_line(890, 750, 910, 750, fill="blue", width=4)
wow.create_line(890, 800, 910, 800, fill="blue", width=4)
wow.create_line(890, 850, 910, 850, fill="blue", width=4)
wow.create_line(890, 900, 910, 900, fill="blue", width=4)
wow.create_line(890, 950, 910, 950, fill="blue", width=4)
wow.create_line(900, 1000, 910, 1000, fill="blue", width=4)

if __name__ == "__main__":
    checkered(wow, 10)
    root.mainloop()
def auto2():
        pg.hotkey('F4')
        pg.press('enter')
        pg.typewrite('sudo apt install update')
        pg.press('enter', interval=1)
        
        pc.paste
        pg.press('enter')
        
def auto3():
         pg.hotkey('F4')
         pg.press('enter')
         pg.write('cd /media/jh/Python_Backup')
         pg.press('enter')
         pg.write('pwd')
         pg.press('enter')
         pg.write("find . -name '*.py' | xargs cp -t /home/jh/Desktop/PYDUMP")
         pg.press('enter')

def auto4():
         var_one = e1.get()
         var_two = e2.get()
         print(var_one)
         print(var_two)
         pg.hotkey('F4')
         pg.press('enter')
         pg.write(var_one)                          
         pg.press('enter')
         pg.write(var_two)
         pg.press('enter')

def githubsnag():
    pg.keyDown('alt')
    pg.press('tab')
    pg.keyUp('alt')
    pg.hotkey('alt','9', interval=0.25) 
    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()



    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=0.5) 
    pg.moveTo(1201, 400, 1)
    pg.click(1201, 400)
    pg.moveTo(1198, 400, 1)
    pg.click()
    pg.click()
    pg.moveTo(935, 600, 1)
    pg.click(935, 600)
    pg.moveTo(935, 600, 1)
    pg.click()
















    pg.hotkey('ctrl','pgup', interval=2) 
    pg.moveTo(1200, 344, 2)
    pg.click()
    pg.moveTo(935, 550, 2)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=2) 
    pg.moveTo(1200, 344, 2)
    pg.click()
    pg.moveTo(935, 550, 2)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=2) 
    pg.moveTo(1200, 344, 2)
    pg.click()
    pg.moveTo(935, 550, 2)
    pg.click()

    pg.hotkey('ctrl','pgup', interval=2) 
    pg.moveTo(1200, 344, 2)
    pg.click()
    pg.moveTo(935, 550, 2)
    pg.click()


    pg.hotkey('ctrl','pgup', interval=2) 
    pg.moveTo(1200, 344, 2)
    pg.click()
    pg.moveTo(935, 550, 2)
    pg.click()

   
def test():
    pg.keyDown('alt')
    pg.press('tab')
    pg.press('tab')
    pg.press('tab')
    pg.press('tab')
    pg.press('tab')
    pg.keyUp('alt')
    #pg.hotkey('alt', 'tab', interval=0.25)

def auto_term():
    pg.hotkey('ctrl', 'alt', 't')
    pg.write('ssudo apt-get update', interval=0.5)
    pg.press('enter', interval=1)
    pg.write('uname', interval=1)
    pg.press('enter', interval=1)
    pg.write('sudo dpkg --configure -a', interval=1)
    pg.press('enter', interval=1)
    pg.write('sudo nmap 192.168.5.115/24', interval=1)
    pg.press('enter', interval=1)
    pg.write('mount nfs', interval=1)
    pg.press('enter', interval=1)
    pg.write('pwd', interval=1)
    pg.presss('enter', interval=1)
   btn1 = tk.Button(frm2, text="2nd power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=xsq)
btn1.grid(row=5, column=0, sticky="w")
btn2 = tk.Button(frm2, text="3rd power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow",  command=xcu)
btn2.grid(row=6, column=0)

btn4 = tk.Button(frm2, text="4th power",width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow",  command=pow4)
btn4.grid(row=7, column=0)
btn5 = tk.Button(frm2, text="5th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow5)
btn5.grid(row=8, column=0)
btn6 = tk.Button(frm2, text="6th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow6)
btn6.grid(row=9, column=0)
btn7 = tk.Button(frm2, text="7th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow7)
btn7 .grid(row=10, column=0)
btn8 = tk.Button(frm2, text="8th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow8)
btn8.grid(row=11, column=0)
btn9 = tk.Button(frm2, text="9th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow9)
btn9.grid(row=12, column=0)
btn10 = tk.Button(frm2, text="10th power", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=pow10)
btn10.grid(row=13, column=0)
btn19 = tk.Button(frm2, text="num_pow_of", bg='lavender', command=pow_of)
btn19.grid(row=14, column=0)

btn47 = tk.Button(frm2, text="ClearTop All", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clearall)
btn47.grid(row=5, column=1)
btn48 = tk.Button(frm2, text="Clear1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear1)
btn48.grid(row=6, column=1)
btn49 = tk.Button(frm2, text="Clear2", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear2)
btn49.grid(row=7, column=1)
btn50 = tk.Button(frm2, text="Clear3", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear3)
btn50.grid(row=8, column=1)
 
btn51 = tk.Button(frm2, text="Clear4", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear4)
btn51.grid(row=9, column=1)
btn52 = tk.Button(frm2, text="Clear Answer", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear6)
btn52.grid(row=10, column=1)
btn53 =  tk.Button(frm2, text="Clear", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear6)
btn53.grid(row=11, column=1)
btn54 = tk.Button(frm2, text="Store answer", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",command=sto5)
btn54.grid(row=12, column=1)
btn55 = tk.Button(frm2, text="Get Memory", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=get_mem)
btn55.grid(row=13, column=1)

btn62 = tk.Button(frm2, text="  7   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=seven)
btn62.grid(row=14, column=1)
btn63 = tk.Button(frm2, text="  4   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=four)
btn63.grid(row=15, column=1)
btn0064 = tk.Button(frm2, text="  1   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="yellow", command=one)
btn0064.grid(row=16, column=1)
gg260 = tk.Button(frm2, text="Store1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=sto1)
gg260.grid(row=17, column=1)
gg261 = tk.Button(frm2, text="Store2", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=sto2)
gg261.grid(row=18, column=1)
ggc42 = tk.Button(frm2, text="Store3", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=sto3)
ggc42.grid(row=19, column=1)
ggc43 = tk.Button(frm2, text="Store4", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",command=sto4)
ggc43.grid(row=20, column=1)

#


btn93 = tk.Button(frm2, text="pi", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=pi_val)
btn93.grid(row=3, column=3)
btn94 = tk.Button(frm2, text="2pi  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=pi2)
btn94.grid(row=4, column=3)
btn95 = tk.Button(frm2, text="pi/2  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=half_pi)
btn95.grid(row=5, column=3)
btn96 = tk.Button(frm2, text="pi/4", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=quarter_pi)
btn96.grid(row=6, column=3)
btn97 = tk.Button(frm2, text="pi/8", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=eighth_pi)
btn97.grid(row=7, column=3)
btn98 = tk.Button(frm2, text="pi/16", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=pi_div16)
btn98.grid(row=8, column=3)

btn100 = tk.Button(frm2, text="p1/32", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=pidiv32)
btn100.grid(row=9, column=3)
btn101 = tk.Button(frm2, text="pi/64", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=pidiv64)
btn101.grid(row=10, column=3)
btn106 = tk.Button(frm2, text="pi Squared", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=pisqu)
btn106.grid(row=11, column=3)
btn107 = tk.Button(frm2, text="pi to the pi", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lime green", command=pi2pi)
btn107.grid(row=13, column=3)
btn108 = tk.Button(frm2, text="  8  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=eight)
btn108.grid(row=14, column=3)
btn109 = tk.Button(frm2, text="  5  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=five)
btn109.grid(row=15, column=3)
btn909 = tk.Button(frm2, text="  2  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=two)
btn909.grid(row=16, column=3)
btn189 = tk.Button(frm2, text="  0   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=zero)
btn189.grid(row=17, column=3)





btn143 = tk.Button(frm2, text="   e ", bg='white', font=('arial',20,'bold'), command=just_e)
btn143.grid(row=5, column=4)
btn99 = tk.Button(frm2, text="e pow x", bg='cornsilk4',font=('arial',20,'bold'), command=e_pow_x)
btn99.grid(row=6, column=4)

btn145 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn145.grid(row=7, column=4)
btn146 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn146.grid(row=8, column=4)

btn147 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn147.grid(row=9, column=4)
btn150 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn150.grid(row=10, column=4)
btn151 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn151.grid(row=11, column=4)
btn152 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",command=cmd)
btn152.grid(row=12, column=4)
btn153 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",command=cmd)
btn153.grid(row=13, column=4)
btn160 = tk.Button(frm2, text="  9   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=nine)
btn160.grid(row=14, column=4)
btn161 = tk.Button(frm2, text="   6   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=six)
btn161.grid(row=15, column=4)
btn1777 = tk.Button(frm2, text="  3   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=three)
btn1777.grid(row=16, column=4)
qq259 = tk.Button(frm2, text="shift 4-1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=bshift4)
qq259.grid(row=17, column=4)
qq260 = tk.Button(frm2, text="shift 4-3", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",  command=bshift3)
qq260.grid(row=18, column=4)
qq261 = tk.Button(frm2, text="shift 3-2", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=bshift2)
qq261.grid(row=19, column=4)
qqc42 = tk.Button(frm2, text="shift 2-1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=bshift1)
qqc42.grid(row=20, column=4)

btn167 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn167.grid(row=5, column=5)
btn168 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn168.grid(row=6, column=5)
btn169 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn169.grid(row=7, column=5)
btn170 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn170.grid(row=8, column=5)
btn171 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn171.grid(row=9, column=5)
btn172 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn172.grid(row=10, column=5)                                                                                       

btn192 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn192.grid(row=11, column=5)
btn193 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn193.grid(row=12, column=5)

btn199 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="violet", command=cmd)
btn199.grid(row=13, column=5)                                                                                      
btn200 = tk.Button(frm2, text="    /    ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="cornsilk", command=div)
btn200.grid(row=14, column=5)
btn1499 = tk.Button(frm2, text="   X   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=mul)
btn1499.grid(row=15, column=5)
btn109 = tk.Button(frm2, text="   -   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=subtract)
btn109.grid(row=16, column=5)
btn140 = tk.Button(frm2, text="   +   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="pink", command=add)
btn140.grid(row=17, column=5)



gge243 = tk.Button(frm2, text="ClearTop All", width=8,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clearall)
gge243.grid(row=5, column=6)
gge244 = tk.Button(frm2, text="Clear1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear1)
gge244.grid(row=6, column=6)
gge245 = tk.Button(frm2, text="Clear2", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear2)
gge245.grid(row=7, column=6)
gge246 = tk.Button(frm2, text="Clear3", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear3)
gge246.grid(row=8, column=6)
gge247 = tk.Button(frm2, text="Clear4", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear4)
gge247.grid(row=9, column=6)
gge250 = tk.Button(frm2, text="Clear Answer", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear5)
gge250.grid(row=10, column=6)
gge251 = tk.Button(frm2, text="Clear op", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear6)
gge251.grid(row=11, column=6)
gge252 = tk.Button(frm2, text="Store Answer", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=sto5)
gge252.grid(row=12, column=6)
gge253 = tk.Button(frm2, text="Clear Experimental", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear_lb3)
gge253.grid(row=13, column=6)
gge254 = tk.Button(frm2, text="Clear Store Value", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=clear_lb2)
gge254.grid(row=14, column=6)
gge255 = tk.Button(frm2, text="Clear Memory List", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="cornsilk", command=clear_mem)
gge255.grid(row=15, column=6)
gge256= tk.Button(frm2, text="ValueLst", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=shift4)
gge256.grid(row=16, column=6)

btn110 = tk.Button(frm2,text=chr(67), width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn110.grid(row=5, column=7)
btn111 = tk.Button(frm2, text=chr(67)+chr(69), width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn111.grid(row=6, column=7)
btn112 = tk.Button(frm2,text=chr(67)+chr(69), width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn112.grid(row=7, column=7)
btn113 = tk.Button(frm2,text=u'\u221A', width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn113.grid(row=8, column=7)
btn114 = tk.Button(frm2,text=u'\u03C0', width=6,height=1,font=('arial',12,'bold'),bd=4,bg="LightCyan2", command=cmd)
btn114.grid(row=9, column=7)
btn115 = tk.Button(frm2, text=chr(177), width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn115.grid(row=10, column=7)
btn116= tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure", command=cmd)
btn116.grid(row=11, column=7)
btn117 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn117.grid(row=12, column=7)
btn118 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn118.grid(row=13, column=7)
btn119 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn119.grid(row=14, column=7)
btn120 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn120.grid(row=15, column=7)

btn121 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn121.grid(row=16, column=7)
btn122 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn122.grid(row=17, column=7)
btn123 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn123.grid(row=18, column=7)


#


btn189 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn189.grid(row=5, column=8)
btn190 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn190.grid(row=6, column=8)
btn191 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)


btn67 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn67.grid(row=7, column=8)
btn68 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn68.grid(row=8, column=8)
btn69 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn69.grid(row=9, column=8)
btn70 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn70.grid(row=10, column=8)
btn71 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn71.grid(row=11, column=8)
btn72 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn72.grid(row=12, column=8)
btn73 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn73.grid(row=13, column=8)
btn74 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn74.grid(row=14, column=8)
btn75 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn75.grid(row=15, column=8)
btn76 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn76.grid(row=16, column=8)
btn77 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn77.grid(row=17, column=8)
btn78 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn78.grid(row=18, column=8)


btn30 = tk.Button(frm2, text="Btn1", bg='green', command=cmd)
btn30.grid(row=5, column=9)
btn31 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn31.grid(row=6, column=9)
btn32 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn32.grid(row=7, column=9)
btn33 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn33.grid(row=8, column=9)
btn34 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn34.grid(row=9, column=9)
btn35 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn35.grid(row=10, column=9)
btn36 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn36.grid(row=11, column=9)
btn37 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn37.grid(row=12, column=9)
btn38 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn38.grid(row=13, column=9)
btn39= tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn39.grid(row=14, column=9)
btn40 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn40.grid(row=15, column=9)
btn41 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn41.grid(row=16, column=9)
btn42 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn42.grid(row=17, column=9)
btn43 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn43.grid(row=18, column=9)


btn21 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn21.grid(row=5, column=10)
btn22 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn22.grid(row=6, column=10)
btn23= tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn23.grid(row=7, column=10)
btn24 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn24.grid(row=8, column=10)
btn25 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn25.grid(row=9, column=10)
btn26 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn26.grid(row=10, column=10)
btn27 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn27.grid(row=11, column=10)
btn28 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn28.grid(row=12, column=10)
btn29 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn29.grid(row=13, column=10)
btn79 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn79.grid(row=14, column=10)
btn80 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",  command=cmd)
btn80.grid(row=15, column=10)
btn81 = tk.Button(frm2, text="  7 ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=seven)
btn81.grid(row=16, column=10)
btn82 = tk.Button(frm2, text="  4  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=four)
btn82.grid(row=17, column=10)
btn83 = tk.Button(frm2, text="  1  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=one)
btn83.grid(row=18, column=10)

#
b2243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2243.grid(row=5, column=11)
b2244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2244.grid(row=6, column=11)
b2245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2245.grid(row=7, column=11)
b2246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2246.grid(row=8, column=11)
b2247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2247.grid(row=9, column=11)
b2250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2250.grid(row=10, column=11)
b2251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2251.grid(row=11, column=11)
b2252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2252.grid(row=12, column=11)
b2253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2253.grid(row=13, column=11)
b2254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2254.grid(row=14, column=11)
b2255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
b2255.grid(row=15, column=11)
b2256= tk.Button(frm2, text="   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=eight)
b2256.grid(row=16, column=11)
b2257 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=five)
b2257.grid(row=17, column=11)
b2258= tk.Button(frm2, text="   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=two)
b2258.grid(row=18, column=11)





btn89 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn89.grid(row=5, column=12)
btn90 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn90.grid(row=6, column=12)
btn91 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn91.grid(row=7, column=12)
btn92= tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn92.grid(row=8, column=12)
btn64 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn64.grid(row=9, column=12)
btn65 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn65.grid(row=10, column=12)
btn162 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn162.grid(row=11, column=12)
btn19 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn19.grid(row=12, column=12)
btn20= tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn20.grid(row=13, column=12)
btn87 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn87.grid(row=14, column=12)
btn88 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn88.grid(row=15, column=12)
b2262 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=nine)
b2262.grid(row=16, column=12)
btn30 = tk.Button(frm2, text="   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=six)
btn30.grid(row=17, column=12)
b2263 = tk.Button(frm2, text="   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=three)
b2263.grid(row=18, column=12)




btn1127 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=add)
btn1127.grid(row=5, column=13)
btn1128 = tk.Button(frm2, text="   ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1128.grid(row=6, column=13)
btn1129 = tk.Button(frm2, text="    ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1129.grid(row=7, column=13)
btn1130 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
btn1130.grid(row=8, column=13)
btn1131 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1131.grid(row=9, column=13)
btn1132 = tk.Button(frm2, text="  ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1132.grid(row=10, column=13)
btn1133 = tk.Button(frm2, text="    ", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1133.grid(row=11, column=13)
btn1134 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1134.grid(row=12, column=13)
btn1135 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1135.grid(row=13, column=13)
btn1136 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1136.grid(row=14, column=13)
btn1137 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1137.grid(row=15, column=13)
btn1138 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1138.grid(row=16, column=13)
btn1139 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1139.grid(row=17, column=13)
btn1140 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1140.grid(row=18, column=13)

#

btn1143 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1143.grid(row=5, column=14)
btn1144 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1144.grid(row=6, column=14)
btn1145 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1145.grid(row=7, column=14)
btn1146 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1146.grid(row=8, column=14)
btn1143 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
btn1143.grid(row=5, column=14)
btn1144 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1144.grid(row=6, column=14)
btn1145 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1145.grid(row=7, column=14)
btn1461 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender",command=cmd)
btn1461.grid(row=8, column=14)
btn1417 = tk.Button(frm2, text="Btn1", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
btn1417.grid(row=9, column=14)
btn1510 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure", command=cmd)
btn1510.grid(row=10, column=14)
btn1511 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1511.grid(row=11, column=14)
btn1512 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1512.grid(row=12, column=14)
btn1513 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1513.grid(row=13, column=14)
btn1514 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1514.grid(row=14, column=14)
btn1155 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1155.grid(row=15, column=14)
btn1516= tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1516.grid(row=16, column=14)
btn1157 = tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1157.grid(row=17, column=14)
btn1518= tk.Button(frm2, width=6,height=1,font=('arial',20,'bold'),bd=2,text="BTN", bg="azure",command=cmd)
btn1518.grid(row=18, column=14)


bb243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb243.grid(row=5, column=15)
bb244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb244.grid(row=6, column=15)
bb245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb245.grid(row=7, column=15)
bb246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb246.grid(row=8, column=15)
bb247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb247.grid(row=9, column=15)
bb250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb250.grid(row=10, column=15)
bb251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb251.grid(row=11, column=15)
bb252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb252.grid(row=12, column=15)
bb253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb253.grid(row=13, column=15)
bb254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb254.grid(row=14, column=15)
bb255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb255.grid(row=15, column=15)
bb256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb256.grid(row=16, column=15)
bb257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine",  command=cmd)
bb257.grid(row=17, column=15)
bb258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4, bg="aquamarine",  command=cmd)
bb258.grid(row=18, column=15)

#
aa243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa243.grid(row=5, column=16)
aa244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa244.grid(row=6, column=16)
aa245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa245.grid(row=7, column=16)
aa246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa246.grid(row=8, column=16)
aa247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa247.grid(row=9, column=16)
aa250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa250.grid(row=10, column=16)
aa251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa251.grid(row=11, column=16)
aa252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa252.grid(row=12, column=16)
aa253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa253.grid(row=13, column=16)
aa254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa254.grid(row=14, column=16)
aa255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa255.grid(row=15, column=16)
aa256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa256.grid(row=16, column=16)
aa257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa257.grid(row=17, column=16)
aa258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
aa258.grid(row=18, column=16)



cc243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc243.grid(row=5, column=17)
cc244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc244.grid(row=6, column=17)
cc245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc245.grid(row=7, column=17)
cc246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc246.grid(row=8, column=17)
cc247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc247.grid(row=9, column=17)
cc250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc250.grid(row=10, column=17)
cc251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc251.grid(row=11, column=17)
cc252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc252.grid(row=12, column=17)
cc253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc253.grid(row=13, column=17)
cc254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc254.grid(row=14, column=17)
cc255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc255.grid(row=15, column=17)
cc256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc256.grid(row=16, column=17)
cc257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc257.grid(row=17, column=17)
cc258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
cc258.grid(row=18, column=17)

#
ddd243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd243.grid(row=5, column=18)
ddd244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd244.grid(row=6, column=18)
ddd245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd245.grid(row=7, column=18)
ddd246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd246.grid(row=8, column=18)
ddd247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd247.grid(row=9, column=18)
ddd250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd250.grid(row=10, column=18)
ddd251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd251.grid(row=11, column=18)
ddd252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd252.grid(row=12, column=18)
ddd253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd253.grid(row=13, column=18)
ddd254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd254.grid(row=14, column=18)
ddd255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd255.grid(row=15, column=18)
ddd256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd256.grid(row=16, column=18)
ddd257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd257.grid(row=17, column=18)
ddd258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ddd258.grid(row=18, column=18)
#
ff243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff243.grid(row=5, column=19)
ff244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff244.grid(row=6, column=19)
ff245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff245.grid(row=7, column=19)
ff246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff246.grid(row=8, column=19)
ff247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff247.grid(row=9, column=19)
ff250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff250.grid(row=10, column=19)
ff251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff251.grid(row=11, column=19)
ff252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff252.grid(row=12, column=19)
ff253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff253.grid(row=13, column=19)
ff254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff254.grid(row=14, column=19)
ff255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff255.grid(row=15, column=19)
ff256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff256.grid(row=16, column=19)
ff257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff257.grid(row=17, column=19)
ff258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="aquamarine", command=cmd)
ff258.grid(row=18, column=19)
#

qq243 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq243.grid(row=5, column=20)
qq244 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq244.grid(row=6, column=20)
qq245 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq245.grid(row=7, column=20)
qq246 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq246.grid(row=8, column=20)
qq247 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq247.grid(row=9, column=20)
qq250 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq250.grid(row=10, column=20)
qq251 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq251.grid(row=11, column=20)
qq252 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq252.grid(row=12, column=20)
qq253 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq253.grid(row=13, column=20)
qq254 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq254.grid(row=14, column=20)
qq255 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq255.grid(row=15, column=20)
qq256= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq256.grid(row=16, column=20)
qq257 = tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="orange", command=cmd)
qq257.grid(row=17, column=20)
qq258= tk.Button(frm2, text="b22", width=6,height=1,font=('arial',12,'bold'),bd=4,bg="lavender", command=cmd)
qq258.grid(row=18, column=20)

 
    
import tkinter as tk
from tkinter import *
from tkinter import ttk
import os, sys, subprocess
from tkinter.filedialog import askopenfilename, asksaveasfilename

root = Tk()
root.geometry("500x500")
notebook = ttk.Notebook(root)

notebook.grid(row=0, column=0)
frame1 = ttk.Frame(notebook)

def open_file():
    '''Open a file for editing.'''
    filepath = askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')]
    )
    if not filepath:
        return
    text1.delete(1.0, tk.END)
    with open(filepath, 'r') as input_file:
        text = input_file.read()
        text1.insert(tk.END, text)





def save_file():

    filepath = asksaveasfilename(defaultextension='txt',
                                 filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')]),
    if not filepath:
        return
    with open(filepath, 'w') as output_file:
        text = text1.get(1.0, tk.END)
        output_file.write(text)



frame1.rowconfigure(0, minsize=800, weight=1)
frame1.columnconfigure(1, minsize=800, weight=1)

fr_buttons = tk.Frame(frame1, relief=tk.RAISED, bd=2)
btn_open = tk.Button(fr_buttons, text='Open', command=open_file)
btn_save = tk.Button(fr_buttons, text='Save As...', command=save_file)

btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

fr_buttons.grid(row=0, column=0, sticky='ns')
text1 = tk.Text(frame1)
text1.grid(row=0, column=1, sticky="nsew")
frame2 = ttk.Frame(notebook)
notebook.add(frame1, text="1")
notebook.add(frame2, text="2")

fr_buttons2 = tk.Frame(frame2, relief=tk.RAISED, bd=2)
fr_buttons2.grid(row=0, column=0, sticky='ns')
btn_save = tk.Button(fr_buttons2, text='Save As...', command=save_file)
btn_open = tk.Button(fr_buttons2, text='Open others', command=op)
btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

frame2.rowconfigure(0, minsize=800, weight=1)
frame2.columnconfigure(1, minsize=800, weight=1)

text2 = tk.Text(frame2)
text2.grid(row=0, column=1, sticky="nsew")

f3 = ttk.Frame(notebook)
notebook.add(f3, text="3")


text3 = tk.Text(f3, height=250, width=100, bg="wheat")
text3.insert("1.0", tk.END)
text3.grid(row=0, column=4, rowspan=25, columnspan=10)
f4 = ttk.Frame(notebook)
notebook.add(f4, text="4")
f5 = ttk.Frame(notebook)


notebook.add(f5, text="5")
f6 = ttk.Frame(notebook)
notebook.add(f6, text="6")
f7 = ttk.Frame(notebook)
notebook.add(f7, text="7")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f9 = ttk.Frame(notebook)
notebook.add(f9, text="9")
f10 = ttk.Frame(notebook)
notebook.add(f10, text="10")
f11 = ttk.Frame(notebook)
notebook.add(f11, text="11")
text10 = tk.Text(f10, height=250, width=100, bg="wheat")
text10.insert("1.0", tk.END)
text10.grid(row=0, column=4, rowspan=25, columnspan=10)
text11 = tk.Text(f11, height=250, width=100, bg="wheat")
text11.insert("1.0", tk.END)
text11.grid(row=0, column=4, rowspan=25, columnspan=10)
text4 = tk.Text(f4, height=250, width=300, bg="orange")
text4.insert("1.0", tk.END)

text4.grid(row=0, column=4, rowspan=25, columnspan=10)
text5 = tk.Text(f5, height=250, width=300, bg="white")
text5.insert("1.0", tk.END)
text5.grid(row=0, column=4, rowspan=25, columnspan=10)
text6 = tk.Text(f6, height=250, width=100, bg="white")
text6.insert("1.0", tk.END)
text6.grid(row=0, column=4, rowspan=25, columnspan=10)
text7 = tk.Text(f7, height=250, width=100, bg="light blue")
text7.insert("1.0", tk.END)
text7.grid(row=0, column=4, rowspan=25, columnspan=10)
text8 = tk.Text(f8, height=250, width=100, bg="pink")
text8.insert("1.0", tk.END)
text8.grid(row=0, column=4, rowspan=25, columnspan=10)
text9 = tk.Text(f9, height=250, width=100, bg="light green")
text9.insert("1.0", tk.END)
text9.grid(row=0, column=4, rowspan=25, columnspan=10)

# disables the tab
# notebook.tab(0, state = 'disabled')
# entering and displaying multiple lines with the text widget

top = tk.Toplevel()
top.geometry("600x400")
fr1 = tk.Frame(top)
fr1.grid(row=1, column=0, rowspan=20, columnspan=7)


def select_save(ss):

    if ss == 1:
        text = text1.get("1.0", tk.END)
    elif ss == 2:
        text = text2.get("1.0", tk.END)
    elif ss == 3:
        text = text3.get("1.0", tk.END)
    elif ss == 4:
        text = text4.get("1.0", tk.END)
    elif ss == 5:
        text = text5.get("1.0", tk.END)
    elif ss == 6:
        text = text6.get("1.0", tk.END)
    elif ss == 7:
        text = text7.get("1.0", tk.END)
    elif ss == 8:
        text = text8.get("1.0", tk.END)
    elif ss == 9:
        text = text9.get("1.0", tk.END)
    elif ss == 10:
        text = text10.get("1.0", tk.END)
    elif ss == 11:
        text = text10.get("1.0", tk.END)

    text11.insert("1.0", text)
    filepath = asksaveasfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    with open(filepath, "w") as f:
        f.write(text)


r1 = ttk.Radiobutton(fr1, text="save1", variable=1, value="Text Tab 1")
r1.config(command=lambda: select_save(1))
r2 = ttk.Radiobutton(fr1, text="save2", variable=2, value="Text Tab 1")
r2.config(command=lambda: select_save(2))
r3 = ttk.Radiobutton(fr1, text="save3", variable=3, value="Text Tab 2")
r3.config(command=lambda: select_save(3))
r4 = ttk.Radiobutton(fr1, text="save4", variable=4, value="Text Tab 3")
r4.config(command=lambda: select_save(4))
r5 = ttk.Radiobutton(fr1, text="save5", variable=5, value="Text Tab 4")
r5.config(command=lambda: select_save(5))
r6 = ttk.Radiobutton(fr1, text="save6", variable=6, value="Text Tab 5")
r6.config(command=lambda: select_save(6))
r7 = ttk.Radiobutton(fr1, text="save7", variable=7, value="Text Tab 6")
r7.config(command=lambda: select_save(7))
r8 = ttk.Radiobutton(fr1, text="save8", variable=8, value="Text Tab 7")
r8.config(command=lambda: select_save(8))
r9 = ttk.Radiobutton(fr1, text="save9", variable=9, value="Text Tab 8")
r9.config(command=lambda: select_save(9))
r10 = ttk.Radiobutton(fr1, text="save10", variable=10, value="Text Tab 9")
r10.config(command=lambda: select_save(10))
r11 = ttk.Radiobutton(fr1, text="save11", variable=11, value="Text Tab 10")
r11.config(command=lambda: select_save(11))
r1.grid(row=1, column=3)
r2.grid(row=2, column=3)
r3.grid(row=3, column=3)
r4.grid(row=4, column=3)
r5.grid(row=5, column=3)
r6.grid(row=6, column=3)
r7.grid(row=7, column=3)
r8.grid(row=8, column=3)
r9.grid(row=9, column=3)
r10.grid(row=10, column=3)
r11.grid(row=11, column=3)


def select_open(ss):

    if ss == 1:
        text = text1
    elif ss == 2:
        text = text2
    elif ss == 3:
        text = text3
    elif ss == 4:
        text = text4
    elif ss == 5:
        text = text5
    elif ss == 6:
        text = text6
    elif ss == 7:
        text = text7
    elif ss == 8:
        text = text8
    elif ss == 9:
        text = text9
    elif ss == 10:
        text = text10
    elif ss == 11:
        text = text10

    filepath = askopenfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, "r") as f:
        content = f.read()
        text.insert("1.0", content)


r11 = ttk.Radiobutton(fr1, text="open1", variable=1, value="Text Tab 1")
r11.config(command=lambda: select_open(1))
r12 = ttk.Radiobutton(fr1, text="open2", variable=2, value="Text Tab 1")
r12.config(command=lambda: select_open(2))
r13 = ttk.Radiobutton(fr1, text="open3", variable=3, value="Text Tab 2")
r13.config(command=lambda: select_open(3))
r14 = ttk.Radiobutton(fr1, text="open4", variable=4, value="Text Tab 3")
r14.config(command=lambda: select_open(4))
r15 = ttk.Radiobutton(fr1, text="open5", variable=5, value="Text Tab 4")
r15.config(command=lambda: select_open(5))
r16 = ttk.Radiobutton(fr1, text="open6", variable=6, value="Text Tab 5")
r16.config(command=lambda: select_open(6))
r17 = ttk.Radiobutton(fr1, text="open7", variable=7, value="Text Tab 6")
r17.config(command=lambda: select_open(7))
r18 = ttk.Radiobutton(fr1, text="open8", variable=8, value="Text Tab 7")
r18.config(command=lambda: select_open(8))
r19 = ttk.Radiobutton(fr1, text="open9", variable=9, value="Text Tab 8")
r19.config(command=lambda: select_open(9))
r20 = ttk.Radiobutton(fr1, text="open10", variable=10, value="Text Tab 9")
r20.config(command=lambda: select_open(10))
r21 = ttk.Radiobutton(fr1, text="open11", variable=11, value="Text Tab 10")
r21.config(command=lambda: select_open(11))
r11.grid(row=1, column=1)
r12.grid(row=2, column=1)
r13.grid(row=3, column=1)
r14.grid(row=4, column=1)
r15.grid(row=5, column=1)
r16.grid(row=6, column=1)
r17.grid(row=7, column=1)
r18.grid(row=8, column=1)
r19.grid(row=9, column=1)
r20.grid(row=10, column=1)
r20.grid(row=11, column=1)


root.mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk
import os, sys, subprocess
from tkinter.filedialog import askopenfilename, asksaveasfilename

root = Tk()
root.geometry("500x500")
notebook = ttk.Notebook(root)

notebook.grid(row=0, column=0)
frame1 = ttk.Frame(notebook)

def open_file():
    '''Open a file for editing.'''
    filepath = askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')]
    )
    if not filepath:
        return
    text1.delete(1.0, tk.END)
    with open(filepath, 'r') as input_file:
        text = input_file.read()
        text1.insert(tk.END, text)





def save_file():

    filepath = asksaveasfilename(defaultextension='txt',
                                 filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')]),
    if not filepath:
        return
    with open(filepath, 'w') as output_file:
        text = text1.get(1.0, tk.END)
        output_file.write(text)



frame1.rowconfigure(0, minsize=800, weight=1)
frame1.columnconfigure(1, minsize=800, weight=1)

fr_buttons = tk.Frame(frame1, relief=tk.RAISED, bd=2)
btn_open = tk.Button(fr_buttons, text='Open', command=open_file)
btn_save = tk.Button(fr_buttons, text='Save As...', command=save_file)

btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

fr_buttons.grid(row=0, column=0, sticky='ns')
text1 = tk.Text(frame1)
text1.grid(row=0, column=1, sticky="nsew")
frame2 = ttk.Frame(notebook)
notebook.add(frame1, text="1")
notebook.add(frame2, text="2")

fr_buttons2 = tk.Frame(frame2, relief=tk.RAISED, bd=2)
fr_buttons2.grid(row=0, column=0, sticky='ns')
btn_save = tk.Button(fr_buttons2, text='Save As...', command=save_file)
btn_open = tk.Button(fr_buttons2, text='Open others', command=op)
btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

frame2.rowconfigure(0, minsize=800, weight=1)
frame2.columnconfigure(1, minsize=800, weight=1)

text2 = tk.Text(frame2)
text2.grid(row=0, column=1, sticky="nsew")

f3 = ttk.Frame(notebook)
notebook.add(f3, text="3")


text3 = tk.Text(f3, height=250, width=100, bg="wheat")
text3.insert("1.0", tk.END)
text3.grid(row=0, column=4, rowspan=25, columnspan=10)
f4 = ttk.Frame(notebook)
notebook.add(f4, text="4")
f5 = ttk.Frame(notebook)


notebook.add(f5, text="5")
f6 = ttk.Frame(notebook)
notebook.add(f6, text="6")
f7 = ttk.Frame(notebook)
notebook.add(f7, text="7")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f9 = ttk.Frame(notebook)
notebook.add(f9, text="9")
f10 = ttk.Frame(notebook)
notebook.add(f10, text="10")
f11 = ttk.Frame(notebook)
notebook.add(f11, text="11")
text10 = tk.Text(f10, height=250, width=100, bg="wheat")
text10.insert("1.0", tk.END)
text10.grid(row=0, column=4, rowspan=25, columnspan=10)
text11 = tk.Text(f11, height=250, width=100, bg="wheat")
text11.insert("1.0", tk.END)
text11.grid(row=0, column=4, rowspan=25, columnspan=10)
text4 = tk.Text(f4, height=250, width=300, bg="orange")
text4.insert("1.0", tk.END)

text4.grid(row=0, column=4, rowspan=25, columnspan=10)
text5 = tk.Text(f5, height=250, width=300, bg="white")
text5.insert("1.0", tk.END)
text5.grid(row=0, column=4, rowspan=25, columnspan=10)
text6 = tk.Text(f6, height=250, width=100, bg="white")
text6.insert("1.0", tk.END)
text6.grid(row=0, column=4, rowspan=25, columnspan=10)
text7 = tk.Text(f7, height=250, width=100, bg="light blue")
text7.insert("1.0", tk.END)
text7.grid(row=0, column=4, rowspan=25, columnspan=10)
text8 = tk.Text(f8, height=250, width=100, bg="pink")
text8.insert("1.0", tk.END)
text8.grid(row=0, column=4, rowspan=25, columnspan=10)
text9 = tk.Text(f9, height=250, width=100, bg="light green")
text9.insert("1.0", tk.END)
text9.grid(row=0, column=4, rowspan=25, columnspan=10)

# disables the tab
# notebook.tab(0, state = 'disabled')
# entering and displaying multiple lines with the text widget

top = tk.Toplevel()
top.geometry("600x400")
fr1 = tk.Frame(top)
fr1.grid(row=1, column=0, rowspan=20, columnspan=7)


def select_save(ss):

    if ss == 1:
        text = text1.get("1.0", tk.END)
    elif ss == 2:
        text = text2.get("1.0", tk.END)
    elif ss == 3:
        text = text3.get("1.0", tk.END)
    elif ss == 4:
        text = text4.get("1.0", tk.END)
    elif ss == 5:
        text = text5.get("1.0", tk.END)
    elif ss == 6:
        text = text6.get("1.0", tk.END)
    elif ss == 7:
        text = text7.get("1.0", tk.END)
    elif ss == 8:
        text = text8.get("1.0", tk.END)
    elif ss == 9:
        text = text9.get("1.0", tk.END)
    elif ss == 10:
        text = text10.get("1.0", tk.END)
    elif ss == 11:
        text = text10.get("1.0", tk.END)

    text11.insert("1.0", text)
    filepath = asksaveasfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    with open(filepath, "w") as f:
        f.write(text)


r1 = ttk.Radiobutton(fr1, text="save1", variable=1, value="Text Tab 1")
r1.config(command=lambda: select_save(1))
r2 = ttk.Radiobutton(fr1, text="save2", variable=2, value="Text Tab 1")
r2.config(command=lambda: select_save(2))
r3 = ttk.Radiobutton(fr1, text="save3", variable=3, value="Text Tab 2")
r3.config(command=lambda: select_save(3))
r4 = ttk.Radiobutton(fr1, text="save4", variable=4, value="Text Tab 3")
r4.config(command=lambda: select_save(4))
r5 = ttk.Radiobutton(fr1, text="save5", variable=5, value="Text Tab 4")
r5.config(command=lambda: select_save(5))
r6 = ttk.Radiobutton(fr1, text="save6", variable=6, value="Text Tab 5")
r6.config(command=lambda: select_save(6))
r7 = ttk.Radiobutton(fr1, text="save7", variable=7, value="Text Tab 6")
r7.config(command=lambda: select_save(7))
r8 = ttk.Radiobutton(fr1, text="save8", variable=8, value="Text Tab 7")
r8.config(command=lambda: select_save(8))
r9 = ttk.Radiobutton(fr1, text="save9", variable=9, value="Text Tab 8")
r9.config(command=lambda: select_save(9))
r10 = ttk.Radiobutton(fr1, text="save10", variable=10, value="Text Tab 9")
r10.config(command=lambda: select_save(10))
r11 = ttk.Radiobutton(fr1, text="save11", variable=11, value="Text Tab 10")
r11.config(command=lambda: select_save(11))
r1.grid(row=1, column=3)
r2.grid(row=2, column=3)
r3.grid(row=3, column=3)
r4.grid(row=4, column=3)
r5.grid(row=5, column=3)
r6.grid(row=6, column=3)
r7.grid(row=7, column=3)
r8.grid(row=8, column=3)
r9.grid(row=9, column=3)
r10.grid(row=10, column=3)
r11.grid(row=11, column=3)


def select_open(ss):

    if ss == 1:
        text = text1
    elif ss == 2:
        text = text2
    elif ss == 3:
        text = text3
    elif ss == 4:
        text = text4
    elif ss == 5:
        text = text5
    elif ss == 6:
        text = text6
    elif ss == 7:
        text = text7
    elif ss == 8:
        text = text8
    elif ss == 9:
        text = text9
    elif ss == 10:
        text = text10
    elif ss == 11:
        text = text10

    filepath = askopenfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, "r") as f:
        content = f.read()
        text.insert("1.0", content)


r11 = ttk.Radiobutton(fr1, text="open1", variable=1, value="Text Tab 1")
r11.config(command=lambda: select_open(1))
r12 = ttk.Radiobutton(fr1, text="open2", variable=2, value="Text Tab 1")
r12.config(command=lambda: select_open(2))
r13 = ttk.Radiobutton(fr1, text="open3", variable=3, value="Text Tab 2")
r13.config(command=lambda: select_open(3))
r14 = ttk.Radiobutton(fr1, text="open4", variable=4, value="Text Tab 3")
r14.config(command=lambda: select_open(4))
r15 = ttk.Radiobutton(fr1, text="open5", variable=5, value="Text Tab 4")
r15.config(command=lambda: select_open(5))
r16 = ttk.Radiobutton(fr1, text="open6", variable=6, value="Text Tab 5")
r16.config(command=lambda: select_open(6))
r17 = ttk.Radiobutton(fr1, text="open7", variable=7, value="Text Tab 6")
r17.config(command=lambda: select_open(7))
r18 = ttk.Radiobutton(fr1, text="open8", variable=8, value="Text Tab 7")
r18.config(command=lambda: select_open(8))
r19 = ttk.Radiobutton(fr1, text="open9", variable=9, value="Text Tab 8")
r19.config(command=lambda: select_open(9))
r20 = ttk.Radiobutton(fr1, text="open10", variable=10, value="Text Tab 9")
r20.config(command=lambda: select_open(10))
r21 = ttk.Radiobutton(fr1, text="open11", variable=11, value="Text Tab 10")
r21.config(command=lambda: select_open(11))
r11.grid(row=1, column=1)
r12.grid(row=2, column=1)
r13.grid(row=3, column=1)
r14.grid(row=4, column=1)
r15.grid(row=5, column=1)
r16.grid(row=6, column=1)
r17.grid(row=7, column=1)
r18.grid(row=8, column=1)
r19.grid(row=9, column=1)
r20.grid(row=10, column=1)
r20.grid(row=11, column=1)


root.mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk
import os, sys, subprocess
from tkinter.filedialog import askopenfilename, asksaveasfilename
root = Tk()
root.geometry('500x500')
notebook = ttk.Notebook(root)

notebook.grid(row=0, column=0)
frame1 = ttk.Frame(notebook)

def open_file():
    '''Open a file for editing.'''
    filepath = askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')]
    )
    if not filepath:
        return
    text1.delete(1.0, tk.END)
    with open(filepath, 'r') as input_file:
        text = input_file.read()
        text1.insert(tk.END, text)





def save_file():
   
    filepath = asksaveasfilename(defaultextension='txt',
                                 filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')]),
    if not filepath:
        return
    with open(filepath, 'w') as output_file:
        text = text1.get(1.0, tk.END)
        output_file.write(text)
  


frame1.rowconfigure(0, minsize=800, weight=1)
frame1.columnconfigure(1, minsize=800, weight=1)

fr_buttons = tk.Frame(frame1, relief=tk.RAISED, bd=2)
btn_open = tk.Button(fr_buttons, text='Open', command=open_file)
btn_save = tk.Button(fr_buttons, text='Save As...', command=save_file)

btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

fr_buttons.grid(row=0, column=0, sticky='ns')
text1 = tk.Text(frame1)
text1.grid(row=0, column=1, sticky='nsew')
frame2 = ttk.Frame(notebook)
notebook.add(frame1, text='1')
notebook.add(frame2, text='2')

fr_buttons2 = tk.Frame(frame2, relief=tk.RAISED, bd=2)
fr_buttons2.grid(row=0, column=0, sticky='ns')
btn_save = tk.Button(fr_buttons2, text='Save As...', command=save_file)
btn_open = tk.Button(fr_buttons2, text='Open others', command=op)
btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

frame2.rowconfigure(0, minsize=800, weight=1)
frame2.columnconfigure(1, minsize=800, weight=1)

text2 = tk.Text(frame2)
text2.grid(row=0, column=1, sticky='nsew')

f3 = ttk.Frame(notebook)
notebook.add(f3, text='3')



text3 = tk.Text(f3, height=250, width=100, bg='wheat')
text3.insert('1.0', tk.END)
text3.grid(row=0, column=4, rowspan=25, columnspan=10)
f4 = ttk.Frame(notebook)
notebook.add(f4, text='4')
f5 = ttk.Frame(notebook)
        

notebook.add(f5, text='5')
f6 = ttk.Frame(notebook)
notebook.add(f6, text='6')
f7 = ttk.Frame(notebook)
notebook.add(f7, text='7')
f8 = ttk.Frame(notebook)
notebook.add(f8, text='8')
f9 = ttk.Frame(notebook)
notebook.add(f9, text='9')
f10 = ttk.Frame(notebook)
notebook.add(f10, text='10')
f11 = ttk.Frame(notebook)
notebook.add(f11, text='11')
text10 = tk.Text(f10, height=250, width=100, bg='wheat')
text10.insert('1.0', tk.END)
text10.grid(row=0, column=4, rowspan=25, columnspan=10)
text11 = tk.Text(f11, height=250, width=100, bg='wheat')
text11.insert('1.0', tk.END)
text11.grid(row=0, column=4, rowspan=25, columnspan=10)
text4 = tk.Text(f4, height=250, width=300, bg='orange')
text4.insert('1.0', tk.END)

text4.grid(row=0, column=4, rowspan=25, columnspan=10)
text5 = tk.Text(f5, height=250, width=300, bg='white')
text5.insert('1.0', tk.END)
text5.grid(row=0, column=4, rowspan=25, columnspan=10)
text6 = tk.Text(f6, height=250, width=100, bg='white')
text6.insert('1.0', tk.END)
text6.grid(row=0, column=4, rowspan=25, columnspan=10)
text7 = tk.Text(f7, height=250, width=100, bg='light blue')
text7.insert('1.0', tk.END)
text7.grid(row=0, column=4, rowspan=25, columnspan=10)
text8 = tk.Text(f8, height=250, width=100, bg='pink')
text8.insert('1.0', tk.END)
text8.grid(row=0, column=4, rowspan=25, columnspan=10)
text9 = tk.Text(f9, height=250, width=100, bg='light green')
text9.insert('1.0', tk.END)
text9.grid(row=0, column=4, rowspan=25, columnspan=10)

# disables the tab
# notebook.tab(0, state = 'disabled')
# entering and displaying multiple lines with the text widget

top = tk.Toplevel()
top.geometry('600x400')
fr1 = tk.Frame(top)
fr1.grid(row=1, column=0, rowspan=20, columnspan=7)



def select_open(ss):
    if ss == 1:
        text = text1.insert('1.0', tk.END)
    elif ss == 2:
        text = text2.insert('1.0', tk.END)
    elif ss == 3:
        text = text3.insert('1.0', tk.END) 
    elif ss == 4:
        text = text4.insert('1.0', tk.END)
    elif ss == 5:
        text = text5.insert('1.0' ,tk.END)
    elif ss == 6:
        text = text6.insert('1.0', tk.END)
    elif ss == 7:
        text = text7.insert('1.0', tk.END)
    elif ss == 8:
        text = text8.insert('1.0', tk.END)
    elif ss == 9:
        text = text9.insert('1.0', tk.END)
    elif ss == 10:
        text = text10.insert('1.0', tk.END)
    elif ss == 11:
        text = text10.insert('1.0', tk.END)


    
    
    



def select_save(ss):
    if ss == 1:
        text = text1.get('1.0', tk.END)
    elif ss == 2:
        text = text2.get('1.0', tk.END)
    elif ss == 3:
        text = text3.get('1.0', tk.END) 
    elif ss == 4:
        text = text4.get('1.0', tk.END)
    elif ss == 5:
        text = text5.get('1.0' ,tk.END)
    elif ss == 6:
        text = text6.get('1.0', tk.END)
    elif ss == 7:
        text = text7.get('1.0', tk.END)
    elif ss == 8:
        text = text8.get('1.0', tk.END)
    elif ss == 9:
        text = text9.get('1.0', tk.END)
    elif ss == 10:
        text = text10.get('1.0', tk.END)
    elif ss == 11:
        text = text10.get('1.0', tk.END)

    text11.insert('1.0', text)
    filepath = asksaveasfilename(defaultextension='txt', filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')])
    if not filepath:
            return
    with open(filepath, 'w') as f:
        f.write(text)
        f.close(text)

def sa():


    r1 = ttk.Radiobutton(fr1, text = 'save1', variable=1, value = 'Text Tab 1')
    r1.config(command = select_save(1))
    r2 = ttk.Radiobutton(fr1, text = 'save1', variable=2, value = 'Text Tab 1')
    r2.config(command = select_save(2))
    r3 = ttk.Radiobutton(fr1, text = 'save2', variable=3, value = 'Text Tab 2')
    r3.config(command = select_save(3))
    r4 = ttk.Radiobutton(fr1, text = 'save3', variable=4, value = 'Text Tab 3')
    r4.config(command = select_save(4))
    r5 = ttk.Radiobutton(fr1, text = 'save4', variable=5, value = 'Text Tab 4')
    r5.config(command = select_save(5))
    r6 = ttk.Radiobutton(fr1, text = 'save5', variable=6, value = 'Text Tab 5')
    r6.config(command = select_save(6))
    r7 = ttk.Radiobutton(fr1, text = 'save6', variable=7, value = 'Text Tab 6')
    r7.config(command = select_save(7))
    r8 = ttk.Radiobutton(fr1, text = 'save7', variable=8, value = 'Text Tab 7')
    r8.config(command = select_save(8))
    r9 = ttk.Radiobutton(fr1, text = 'save8', variable=9, value = 'Text Tab 8')
    r9.config(command = select_save(9))
    r10 = ttk.Radiobutton(fr1, text = 'save9', variable=10, value = 'Text Tab 9')
    r10.config(command = select_save(10))
    r11 = ttk.Radiobutton(fr1, text = 'save10', variable=11, value = 'Text Tab 10')
    r11.config(command = select_save(11))
    r1.grid(row=1, column=3)
    r2.grid(row=2, column=3)
    r3.grid(row=3, column=3)
    r4.grid(row=4, column=3)
    r5.grid(row=5, column=3)
    r6.grid(row=6, column=3)
    r7.grid(row=7, column=3)
    r8.grid(row=8, column=3)
    r9.grid(row=9, column=3)
    r10.grid(row=10, column=3)
    r11.grid(row=11, column=3)

    
def op():
    filepath = askopenfilename(filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')])
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, 'r') as f:
        text = f.read()
        return

    r11 = ttk.Radiobutton(fr1, text = 'open1', variable=1, value = 'Text Tab 1')
    r11.config(command = select_open(1))
    r12 = ttk.Radiobutton(fr1, text = 'open1', variable=2, value = 'Text Tab 1')
    r12.config(command = select_open(2))
    r13 = ttk.Radiobutton(fr1, text = 'open2', variable=3, value = 'Text Tab 2')
    r13.config(command = select_open(3))
    r14 = ttk.Radiobutton(fr1, text = 'open3', variable=4, value = 'Text Tab 3')
    r14.config(command = select_open(4))
    r15 = ttk.Radiobutton(fr1, text = 'open4', variable=5, value = 'Text Tab 4')
    r15.config(command = select_open(5))
    r16 = ttk.Radiobutton(fr1, text = 'open5', variable=6, value = 'Text Tab 5')
    r16.config(command = select_open(6))
    r17 = ttk.Radiobutton(fr1, text = 'open6', variable=7, value = 'Text Tab 6')
    r17.config(command = select_open(7))
    r18 = ttk.Radiobutton(fr1, text = 'open7', variable=8, value = 'Text Tab 7')
    r18.config(command = select_open(8))
    r19 = ttk.Radiobutton(fr1, text = 'open8', variable=9, value = 'Text Tab 8')
    r19.config(command = select_open(9))
    r20 = ttk.Radiobutton(fr1, text = 'open9', variable=10, value = 'Text Tab 9')
    r20.config(command = select_open(10))
    r21 = ttk.Radiobutton(fr1, text = 'open10', variable=11, value = 'Text Tab 10')
    r21.config(command = select_open(11))
    r11.grid(row=1, column=1)
    r12.grid(row=2, column=1)
    r13.grid(row=3, column=1)
    r14.grid(row=4, column=1)
    r15.grid(row=5, column=1)
    r16.grid(row=6, column=1)
    r17.grid(row=7, column=1)
    r18.grid(row=8, column=1)
    r19.grid(row=9, column=1)
    r20.grid(row=10, column=1)
    r20.grid(row=11, column=1)
    
    

  
   


btn_sav3 = tk.Button(fr1, text='--SAVE--', command=sa)
btn_sav3.grid(row=7, column=3, sticky='ew', padx=5, pady=5)

btn_open3 = tk.Button(fr1, text='--OPEN--', command=op)
btn_open3.grid(row=7, column=2, sticky='ew', padx=5, pady=5)










   
root.mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import *
from tkinter.ttk import *
import math

r = tk.Tk()
r.geometry("1200x800")
r.title("APPS")
notebook = ttk.Notebook(r)
notebook.grid(row=0, column=0)
f0 = ttk.Frame(notebook)
notebook.add(f0, text="MAIN")
f1 = ttk.Frame(notebook)
f2 = ttk.Frame(notebook)
notebook.add(f1, text="1")
notebook.add(f2, text="2")

f3 = ttk.Frame(notebook)
notebook.add(f3, text="3")
f4 = ttk.Frame(notebook, height=100, width=100)
notebook.add(f4, text="4")
f5 = ttk.Frame(notebook)
notebook.add(f5, text=" 5 ")
f6 = ttk.Frame(notebook)
notebook.add(f6, text="6")
f7 = ttk.Frame(notebook)
notebook.add(f7, text="7")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f9 = ttk.Frame(notebook)
notebook.add(f9, text="9")
f10 = ttk.Frame(notebook)
notebook.add(f10, text="10")


def c():

    pass


num1 = tk.StringVar()
num2 = tk.StringVar()
num3 = tk.StringVar()
num4 = tk.StringVar()
tk.Label(f1, text="").grid(row=0, column=0)
tk.Label(f1, text="").grid(row=1, column=0)
tk.Label(f1, text="").grid(row=2, column=0)
tk.Label(f1, text="").grid(row=3, column=0)

tk.Entry(f1, textvariable=num1).grid(row=0, column=1)
tk.Entry(f1, textvariable=num2).grid(row=1, column=1)
tk.Entry(f1, textvariable=num3).grid(row=2, column=1)
tk.Entry(f1, textvariable=num4).grid(row=3, column=1)
lb1 = tk.Listbox(f1)
lb1.grid(row=6, column=1)


btn1 = tk.Button(f1, text="Calculate", command=c)
btn1.grid(row=4, column=1)


btn2 = tk.Button(f1, text="Send txt", command=c)
btn2.grid(row=5, column=1)


num5 = tk.StringVar()
num6 = tk.StringVar()
num7 = tk.StringVar()
num8 = tk.StringVar()
tk.Label(f2, text=" ").grid(row=0, column=0)
tk.Label(f2, text="").grid(row=1, column=0)
tk.Label(f2, text="").grid(row=2, column=0)
tk.Label(f2, text="").grid(row=3, column=0)

tk.Entry(f2, textvariable=num5).grid(row=0, column=1)
tk.Entry(f2, textvariable=num6).grid(row=1, column=1)
tk.Entry(f2, textvariable=num7).grid(row=2, column=1)
tk.Entry(f2, textvariable=num8).grid(row=3, column=1)
lb2 = tk.Listbox(f2)
lb2.grid(row=6, column=1)


def show2(*args):
    a = num5.get()
    b = num6.get()
    c = num7.get()
    d = num8.get()


btn4 = tk.Button(f2, text="Calculate", command=c)
btn4.grid(row=4, column=1)


btn6 = tk.Button(f2, text="Send txt", command=c)
btn6.grid(row=5, column=1)


num11 = tk.StringVar()
num22 = tk.StringVar()
num33 = tk.StringVar()
nume44 = tk.StringVar()
tk.Label(f3, text="").grid(row=0, column=0)
tk.Label(f3, text="").grid(row=1, column=0)
tk.Label(f3, text="").grid(row=2, column=0)
tk.Label(f3, text="").grid(row=3, column=0)

tk.Entry(f3, textvariable=num11).grid(row=0, column=1)
tk.Entry(f3, textvariable=num22).grid(row=1, column=1)
tk.Entry(f3, textvariable=num33).grid(row=2, column=1)
tk.Entry(f3, textvariable=nume44).grid(row=3, column=1)
text = tk.Text(f3, width=300, height=200)
text.grid(row=6, column=1)


btn22 = tk.Button(f3, text="Calculate", command=c)
btn22.grid(row=4, column=1)


btn33 = tk.Button(f3, text="Send txt", command=c)
btn33.grid(row=5, column=1)

num222 = tk.StringVar()
num333 = tk.StringVar()
num444 = tk.StringVar()
numout33 = tk.StringVar()
numout44 = tk.StringVar()
vvv1 = tk.StringVar()
vdiv1 = tk.StringVar()
tk.Label(f5, text=" ").grid(row=0, column=0)
tk.Label(f5, text="   ").grid(row=1, column=0)
tk.Label(f5, text="  ").grid(row=2, column=0)
tk.Entry(f5, textvariable=num111, bg="yellow").grid(row=0, column=1)
tk.Entry(f5, textvariable=num222, bg="yellow").grid(row=1, column=1)

tk.Entry(f5, textvariable=vvv1, bg="yellow").grid(row=2, column=1)
lb7 = tk.Listbox(f5, height=20)
lb7.grid(row=6, column=2)
lb9 = tk.Listbox(f5, height=20)
lb9.grid(row=6, column=1)
b1 = tk.Button(f5, text="Calculate", command=c)
b1.grid(row=6, column=0)
b3 = tk.Button(f5, text="Clear", command=c)
b3.grid(row=7, column=0)
num1234 = tk.StringVar()
num4567 = tk.StringVar()
num7891 = tk.StringVar()
num1112 = tk.StringVar()
vvv2 = tk.StringVar()
num9999 = tk.StringVar()
num8888 = tk.StringVar()
num7777 = tk.StringVar()
num6666 = tk.StringVar()

vdiv2 = tk.StringVar()
tk.Label(f5, text="  ").grid(row=0, column=4)
tk.Label(f5, text=" ").grid(row=1, column=4)
tk.Label(f5, text=" ").grid(row=2, column=4)
tk.Label(f5, text=" ").grid(row=3, column=4)
tk.Label(f5, text=" ").grid(row=4, column=4)
tk.Entry(f5, textvariable=num1234, bg="yellow").grid(row=0, column=5)
tk.Entry(f5, textvariable=num4567, bg="yellow").grid(row=1, column=5)
tk.Entry(f5, textvariable=num7891, bg="yellow").grid(row=2, column=5)
tk.Entry(f5, textvariable=num1112, bg="yellow").grid(row=3, column=5)
tk.Entry(f5, textvariable=vvv2, bg="yellow").grid(row=4, column=5)

b2 = tk.Button(f5, text="   ", command=c)
b2.grid(row=6, column=5)
b4 = tk.Button(f5, text="Clear", command=c)
b4.grid(row=7, column=5)


if __name__ == "__main__":
    r.mainloop()
#!/usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Dec 29, 2021 09:42:27 AM MST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *


class Toplevel1(tk.Tk):
    def __init__(self, master):
        """This class configures and populates the masterlevel window.
        master is the masterlevel containing window."""
        _bgcolor = "#d9d9d9"  # X11 color: 'gray85'
        _fgcolor = "#000000"  # X11 color: 'black'
        _compcolor = "#d9d9d9"  # X11 color: 'gray85'
        _ana1color = "#d9d9d9"  # X11 color: 'gray85'
        _ana2color = "#ececec"  # Closest X11 color: 'gray92'

             master.geometry("600x800")
             master.minsize(1, 1)
             master.maxsize(1905, 1050)
             master.resizable(1,  1)
             master.title("masterlevel 0")

        self.master = master
        self.selectedButton = tk.IntVar()

        self.Frame1 = tk.Frame(self.master)
        self.Frame1.place(relx=0.75, rely=0.022, relheight=0.922, relwidth=0.208)

        self.Frame1.configure(relief="groove")
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(cursor="fleur")

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.24, rely=0.108, height=33, width=73)
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(compound="left")
        self.Button1.configure(text="""Button""")

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.24, rely=0.265, height=33, width=73)
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(compound="left")
        self.Button2.configure(text="""Button""")

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.24, rely=0.386, height=33, width=73)
        self.Button3.configure(borderwidth="2")
        self.Button3.configure(compound="left")
        self.Button3.configure(text="""Button""")

        self.Button4 = tk.Button(self.Frame1)
        self.Button4.place(relx=0.24, rely=0.545, height=33, width=73)
        self.Button4.configure(borderwidth="2")
        self.Button4.configure(compound="left")
        self.Button4.configure(text="""Button""")

        self.Button5 = tk.Button(self.Frame1)
        self.Button5.place(relx=0.24, rely=0.728, height=33, width=73)
        self.Button5.configure(borderwidth="2")
        self.Button5.configure(compound="left")
        self.Button5.configure(text="""Button""")

        self.Button6 = tk.Button(self.Frame1)
        self.Button6.place(relx=0.24, rely=0.872, height=33, width=73)
        self.Button6.configure(borderwidth="2")
        self.Button6.configure(compound="left")
        self.Button6.configure(text="""Button""")

        self.Button13 = tk.Button(self.Frame1)
        self.Button13.place(relx=0.24, rely=0.634, height=33, width=73)
        self.Button13.configure(borderwidth="2")
        self.Button13.configure(compound="left")
        self.Button13.configure(text="""Button""")

        self.Button14 = tk.Button(self.Frame1)
        self.Button14.place(relx=0.24, rely=0.024, height=33, width=73)
        self.Button14.configure(borderwidth="2")
        self.Button14.configure(compound="left")
        self.Button14.configure(text="""Button""")

        self.Button15 = tk.Button(self.Frame1)
        self.Button15.place(relx=0.24, rely=0.193, height=33, width=73)
        self.Button15.configure(borderwidth="2")
        self.Button15.configure(compound="left")
        self.Button15.configure(text="""Button""")

        self.Button16 = tk.Button(self.Frame1)
        self.Button16.place(relx=0.24, rely=0.458, height=33, width=73)
        self.Button16.configure(borderwidth="2")
        self.Button16.configure(compound="left")
        self.Button16.configure(text="""Button""")

        self.Entry1 = tk.Entry(self.master)
        self.Entry1.place(relx=0.067, rely=0.133, height=23, relwidth=0.143)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.Entry2 = tk.Entry(self.master)
        self.Entry2.place(relx=0.367, rely=0.133, height=23, relwidth=0.143)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")

        self.Label1 = tk.Label(self.master)
        self.Label1.place(relx=0.083, rely=0.089, height=21, width=39)
        self.Label1.configure(anchor="w")
        self.Label1.configure(compound="left")
        self.Label1.configure(text="""Label""")

        self.Label2 = tk.Label(self.master)
        self.Label2.place(relx=0.4, rely=0.089, height=21, width=39)
        self.Label2.configure(anchor="w")
        self.Label2.configure(compound="left")
        self.Label2.configure(text="""Label""")

        self.Entry3 = tk.Entry(self.master)
        self.Entry3.place(relx=0.6, rely=0.133, height=23, relwidth=0.143)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")

        self.Label3 = tk.Label(self.master)
        self.Label3.place(relx=0.667, rely=0.089, height=21, width=39)
        self.Label3.configure(anchor="w")
        self.Label3.configure(compound="left")
        self.Label3.configure(text="""Label""")

        self.Spinbox1 = tk.Spinbox(self.master, from_=1.0, to=100.0)
        self.Spinbox1.place(relx=0.067, rely=0.2, relheight=0.051, relwidth=0.147)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(selectbackground="blue")
        self.Spinbox1.configure(selectforeground="white")

        self.Spinbox2 = tk.Spinbox(self.master, from_=1.0, to=100.0)
        self.Spinbox2.place(relx=0.383, rely=0.2, relheight=0.051, relwidth=0.113)
        self.Spinbox2.configure(activebackground="#f9f9f9")
        self.Spinbox2.configure(background="white")
        self.Spinbox2.configure(font="TkDefaultFont")
        self.Spinbox2.configure(highlightbackground="black")
        self.Spinbox2.configure(selectbackground="blue")
        self.Spinbox2.configure(selectforeground="white")

        self.Radiobutton1 = tk.Radiobutton(self.master)
        self.Radiobutton1.place(relx=0.6, rely=0.289, relheight=0.051, relwidth=0.113)
        self.Radiobutton1.configure(anchor="w")
        self.Radiobutton1.configure(compound="left")
        self.Radiobutton1.configure(justify="left")
        self.Radiobutton1.configure(text="""Radio""")
        self.Radiobutton1.configure(variable=self.selectedButton)

        self.Radiobutton2 = tk.Radiobutton(self.master)
        self.Radiobutton2.place(relx=0.6, rely=0.356, relheight=0.051, relwidth=0.113)
        self.Radiobutton2.configure(anchor="w")
        self.Radiobutton2.configure(compound="left")
        self.Radiobutton2.configure(justify="left")
        self.Radiobutton2.configure(text="""Radio""")
        self.Radiobutton2.configure(variable=self.selectedButton)

        self.Radiobutton3 = tk.Radiobutton(self.master)
        self.Radiobutton3.place(relx=0.6, rely=0.422, relheight=0.051, relwidth=0.113)
        self.Radiobutton3.configure(anchor="w")
        self.Radiobutton3.configure(compound="left")
        self.Radiobutton3.configure(justify="left")
        self.Radiobutton3.configure(text="""Radio""")
        self.Radiobutton3.configure(variable=self.selectedButton)

        self.Radiobutton4 = tk.Radiobutton(self.master)
        self.Radiobutton4.place(relx=0.6, rely=0.489, relheight=0.051, relwidth=0.113)
        self.Radiobutton4.configure(anchor="w")
        self.Radiobutton4.configure(compound="left")
        self.Radiobutton4.configure(justify="left")
        self.Radiobutton4.configure(text="""Radio""")
        self.Radiobutton4.configure(variable=self.selectedButton)

        self.Button7 = tk.Button(self.master)
        self.Button7.place(relx=0.083, rely=0.289, height=33, width=73)
        self.Button7.configure(borderwidth="2")
        self.Button7.configure(compound="left")
        self.Button7.configure(text="""Button""")

        self.Button8 = tk.Button(self.master)
        self.Button8.place(relx=0.083, rely=0.4, height=33, width=73)
        self.Button8.configure(borderwidth="2")
        self.Button8.configure(compound="left")
        self.Button8.configure(text="""Button""")

        self.Button9 = tk.Button(self.master)
        self.Button9.place(relx=0.083, rely=0.511, height=33, width=73)
        self.Button9.configure(borderwidth="2")
        self.Button9.configure(compound="left")
        self.Button9.configure(text="""Button""")

        self.Button10 = tk.Button(self.master)
        self.Button10.place(relx=0.367, rely=0.289, height=33, width=73)
        self.Button10.configure(borderwidth="2")
        self.Button10.configure(compound="left")
        self.Button10.configure(text="""Button""")

        self.Button11 = tk.Button(self.master)
        self.Button11.place(relx=0.367, rely=0.378, height=33, width=73)
        self.Button11.configure(borderwidth="2")
        self.Button11.configure(compound="left")
        self.Button11.configure(text="""Button""")

        self.Button12 = tk.Button(self.master)
        self.Button12.place(relx=0.367, rely=0.489, height=33, width=73)
        self.Button12.configure(borderwidth="2")
        self.Button12.configure(compound="left")
        self.Button12.configure(text="""Button""")

        self.Listbox1 = tk.Listbox(self.master)
        self.Listbox1.place(relx=0.083, rely=0.622, relheight=0.169, relwidth=0.14)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font="TkFixedFont")

        self.Listbox2 = tk.Listbox(self.master)
        self.Listbox2.place(relx=0.367, rely=0.6, relheight=0.169, relwidth=0.14)

        self.Listbox2.configure(background="white")
        self.Listbox2.configure(font="TkFixedFont")


class masterlevel2:
    def __init__(self, master=None):
        """This class configures and populates the masterlevel window.
        master is the masterlevel containing window."""
        _bgcolor = "#d9d9d9"  # X11 color: 'gray85'
        _fgcolor = "#000000"  # X11 color: 'black'
        _compcolor = "#d9d9d9"  # X11 color: 'gray85'
        _ana1color = "#d9d9d9"  # X11 color: 'gray85'
        _ana2color = "#ececec"  # Closest X11 color: 'gray92'

        master.geometry("600x450+539+723")
        master.minsize(1, 1)
        master.maxsize(1905, 1050)
        master.resizable(1, 1)
        master.title("masterlevel 1")

        self.master = master

        self.Text1 = tk.Text(self.master)
        self.Text1.place(relx=0.183, rely=0.067, relheight=0.898, relwidth=0.777)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")


class masterlevel3:
    def __init__(self, master=None):
        """This class configures and populates the masterlevel window.
        master is the masterlevel containing window."""
        _bgcolor = "#d9d9d9"  # X11 color: 'gray85'
        _fgcolor = "#000000"  # X11 color: 'black'
        _compcolor = "#d9d9d9"  # X11 color: 'gray85'
        _ana1color = "#d9d9d9"  # X11 color: 'gray85'
        _ana2color = "#ececec"  # Closest X11 color: 'gray92'

        master.geometry("600x450+620+820")
        master.minsize(1, 1)
        master.maxsize(1905, 1050)
        master.resizable(1, 1)
        master.title("masterlevel 2")

        self.master = master

        self.Canvas1 = tk.Canvas(self.master)
        self.Canvas1.place(relx=0.05, rely=0.022, relheight=0.958, relwidth=0.935)
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")


if __name__ == "__main__":
    t = Toplevel1()
    t.mainloop()
from tkinter import *

# Create tkinter
root = Tk()

# lb = Label(root, text="Here goes label")
# lb.pack()

# topFrame = Frame(root)
# topFrame.pack()

# bottomFrame = Frame(root)
# bottomFrame.pack(side=BOTTOM)


def SubmitButton(event):
    newWindow = Tk()
    # newWindow.mainloop()
    if event == "<Button-1>":
        print("Clicked!")
    elif event == "<Enter>":
        print("Mouse Over")


# Widgets
lbl1 = Label(root, text="Name")
lbl2 = Label(root, text="Password")

entry1 = Entry(root)
entry2 = Entry(root)

btn1 = Button(root, text="Click Me")
btn1.bind("<Button-1>", SubmitButton)
btn1.bind("<Enter>", SubmitButton)

btn2 = Button(root, text="Quit", command=root.quit)

chk1 = Checkbutton(root, text="Keep me logged in")

# Widget layout
lbl1.grid(row=0, column=0, sticky=E)
lbl2.grid(row=1, column=0, sticky=E)
entry1.grid(row=0, column=1)
entry2.grid(row=1, column=1)
btn1.grid(row=2, column=0, columnspan=2)
btn2.grid(row=2, column=1)
chk1.grid(row=3)


# Main event loop
root.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 600
        height = 500
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GRadio_531 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_531["font"] = ft
        GRadio_531["fg"] = "#333333"
        GRadio_531["justify"] = "center"
        GRadio_531["text"] = "RadioButton"
        GRadio_531.place(x=440, y=30, width=85, height=25)
        GRadio_531["command"] = self.GRadio_531_command

        GRadio_122 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_122["font"] = ft
        GRadio_122["fg"] = "#333333"
        GRadio_122["justify"] = "center"
        GRadio_122["text"] = "RadioButton"
        GRadio_122.place(x=440, y=60, width=85, height=25)
        GRadio_122["command"] = self.GRadio_122_command

        GRadio_918 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_918["font"] = ft
        GRadio_918["fg"] = "#333333"
        GRadio_918["justify"] = "center"
        GRadio_918["text"] = "RadioButton"
        GRadio_918.place(x=440, y=90, width=85, height=25)
        GRadio_918["command"] = self.GRadio_918_command

        GLineEdit_207 = tk.Entry(root)
        GLineEdit_207["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_207["font"] = ft
        GLineEdit_207["fg"] = "#333333"
        GLineEdit_207["justify"] = "center"
        GLineEdit_207["text"] = "Entry"
        GLineEdit_207.place(x=50, y=30, width=70, height=25)

        GLineEdit_430 = tk.Entry(root)
        GLineEdit_430["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_430["font"] = ft
        GLineEdit_430["fg"] = "#333333"
        GLineEdit_430["justify"] = "center"
        GLineEdit_430["text"] = "Entry"
        GLineEdit_430.place(x=140, y=30, width=70, height=25)

        GButton_398 = tk.Button(root)
        GButton_398["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_398["font"] = ft
        GButton_398["fg"] = "#273134"
        GButton_398["justify"] = "center"
        GButton_398["text"] = "Button"
        GButton_398.place(x=50, y=60, width=70, height=25)
        GButton_398["command"] = self.GButton_398_command

        GButton_615 = tk.Button(root)
        GButton_615["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_615["font"] = ft
        GButton_615["fg"] = "#273134"
        GButton_615["justify"] = "center"
        GButton_615["text"] = "Button"
        GButton_615.place(x=140, y=60, width=70, height=25)
        GButton_615["command"] = self.GButton_615_command

    def GRadio_531_command(self):
        print("command")

    def GRadio_122_command(self):
        print("command")

    def GRadio_918_command(self):
        print("command")

    def GButton_398_command(self):
        print("command")

    def GButton_615_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
from bs4 import BeautifulSoup
import requests
import tkinter as tk
from tkinter import *
from tkinter import ttk
"""
   this check_sign function checks and returns the zodiac sign
   by day and month of your birth

"""
r = tk.Tk()

def check_sign():
    
    bday = tk.Entry(root, )
    your_birth_day = input("enter your birthday day number> ")
    your_birth_month = input("cool, and the month number, please> ")
    if (int(your_birth_month) == 12 and int(your_birth_day) >= 22) or (
        int(your_birth_month) == 1 and int(your_birth_day) <= 19
    ):
        sign = "Capricorn"
    elif (int(your_birth_month) == 1 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 2 and int(your_birth_day) <= 17
    ):
        sign = "Aquarium"
    elif (int(your_birth_month) == 2 and int(your_birth_day) >= 18) or (
        int(your_birth_month) == 3 and int(your_birth_day) <= 19
    ):
        sign = "Pices"
    elif (int(your_birth_month) == 3 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 4 and int(your_birth_day) <= 19
    ):
        sign = "Aries"
    elif (int(your_birth_month) == 4 and int(your_birth_day) >= 20) or (
        int(your_birth_month) == 5 and int(your_birth_day) <= 20
    ):
        sign = "Taurus"
    elif (int(your_birth_month) == 5 and int(your_birth_day) >= 21) or (
        int(your_birth_month) == 6 and int(your_birth_day) <= 20
    ):
        sign = "Gemini"
    elif (int(your_birth_month) == 6 and int(your_birth_day) >= 21) or (
        int(your_birth_month) == 7 and int(your_birth_day) <= 22
    ):
        sign = "Cancer"
    elif (int(your_birth_month) == 7 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 8 and int(your_birth_day) <= 22
    ):
        sign = "Leo"
    elif (int(your_birth_month) == 8 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 9 and int(your_birth_day) <= 22
    ):
        sign = "Virgo"
    elif (int(your_birth_month) == 9 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 10 and int(your_birth_day) <= 22
    ):
        sign = "Libra"
    elif (int(your_birth_month) == 10 and int(your_birth_day) >= 23) or (
        int(your_birth_month) == 11 and int(your_birth_day) <= 21
    ):
        sign = "Scorpio"
    elif (int(your_birth_month) == 11 and int(your_birth_day) >= 22) or (
        int(your_birth_month) == 12 and int(your_birth_day) <= 21
    ):
        sign = "Sagittarius"

    return sign


def horoscope(zodiac_sign: int, day: str) -> str:
    url = (
        "https://www.horoscope.com/us/horoscopes/general/"
        f"horoscope-general-daily-{day}.aspx?sign={zodiac_sign}"
    )
    soup = BeautifulSoup(requests.get(url).content, "html.parser")
    return soup.find("div", class_="main-horoscope").p.text


if __name__ == "__main__":
    print("Daily Horoscope. \n")
    text = tk.Text(root, bg='cyan')
    text.insert('1.0', tk.END)
    text.grid(row=0, column=1, rowspan=7, columnspan=5)
    e1 = tk.Entry(r)
    e1.grid(column=1, row=2)
    zodiac_sign = e1.get()
    
        
        
    if zodiac_sign != "calculate":
        values =["yesterday", "today", "tomorrow"]
        day = ttk.Combobox(root, values)
        horoscope_text = horoscope(zodiac_sign, day.get())
        print(horoscope_text)
    else:
        print("\nOk, don't worry. Soon you'll get it just pass this tiny quiz")
        print("\nCongratulations! you are defenetly", check_sign())
from tkinter import *

root = Tk()

icon = PhotoImage(file="mario.png")
lbl = Label(root, text="Welcome", image=icon)
lbl.pack()

root.mainloop()
#!/usr/bin/env python3
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox as mb
from tkinter.filedialog import askopenfilename, asksaveasfilename
from tkinter import filedialog
from tkinter import Tk, Frame, Button, BOTH, SUNKEN
from tkinter import colorchooser, font
import pyautogui as pg
import pyperclip
import os
import sys

# import subprocess
# import shutil
import pathlib
from PIL import Image, ImageTk
import runpy
import glob
from tkinter import *

fields = (
    "Annual Rate",
    "Number of Payments",
    "Loan Principle",
    "Monthly Payment",
    "Remaining Loan",
)


def monthly_payment(entries):
    # period rate:
    r = (float(entries["Annual Rate"].get()) / 100) / 12
    print("r", r)
    # principal loan:
    loan = float(entries["Loan Principle"].get())
    n = float(entries["Number of Payments"].get())
    remaining_loan = float(entries["Remaining Loan"].get())
    q = (1 + r) ** n
    monthly = r * ((q * loan - remaining_loan) / (q - 1))
    monthly = ("%8.2f" % monthly).strip()
    entries["Monthly Payment"].delete(0, END)
    entries["Monthly Payment"].insert(0, monthly)
    print("Monthly Payment: %f" % float(monthly))


def final_balance(entries):
    # period rate:
    r = (float(entries["Annual Rate"].get()) / 100) / 12
    print("r", r)
    # principal loan:
    loan = float(entries["Loan Principle"].get())
    n = float(entries["Number of Payments"].get())
    q = (1 + r) ** n
    monthly = float(entries["Monthly Payment"].get())
    q = (1 + r) ** n
    remaining = q * loan - ((q - 1) / r) * monthly
    remaining = ("%8.2f" % remaining).strip()
    entries["Remaining Loan"].delete(0, END)
    entries["Remaining Loan"].insert(0, remaining)
    print("Remaining Loan: %f" % float(remaining))


def makeform(root, fields):
    entries = {}
    for field in fields:
        row = Frame(root)
        lab = Label(row, width=22, text=field + ": ", anchor="w")
        ent = Entry(row)
        ent.insert(0, "0")
        row.pack(side=TOP, fill=X, padx=5, pady=5)
        lab.pack(side=LEFT)
        ent.pack(side=RIGHT, expand=YES, fill=X)
        entries[field] = ent
    return entries


if __name__ == "__main__":
    root = Tk()
    ents = makeform(root, fields)
    root.bind("<Return>", (lambda event, e=ents: fetch(e)))
    b1 = Button(root, text="Final Balance", command=(lambda e=ents: final_balance(e)))
    b1.pack(side=LEFT, padx=5, pady=5)
    b2 = Button(
        root, text="Monthly Payment", command=(lambda e=ents: monthly_payment(e))
    )
    b2.pack(side=LEFT, padx=5, pady=5)
    b3 = Button(root, text="Quit", command=root.quit)
    b3.pack(side=LEFT, padx=5, pady=5)
    root.mainloop()
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, Toplevel
import os.path
from pathlib import Path
import runpy


def main():

    try:

        path = Path
        root = tk.Tk()
        top = Toplevel()
        root.geometry("600x700")
        frm2 = ttk.Frame(root, height=40)
        frm2.grid(row=2, column=2, rowspan=10)
        frm11 = ttk.Frame(root, height=20)
        frm11.grid(row=0, column=1)
        frm = ttk.Frame(root, height=50, width=10)
        frm.grid(row=0, column=0, rowspan=7)
        path = "/home/jh/Desktop/VERY_USEFUL_ CODE GUI_EXAMPLES__/"

        def clear():
            lb.delete(0, tk.END)

        def cleartxt():
            text.delete("1.0", tk.END)

        def runpyprg(event):

            file = lb.get(ANCHOR)
            runpy.run_path(path_name=file)

            return

        def opensystem(event):

            x = lb.curselection()[0]

            file = lb.get(x)
            with open(file, "r") as file:
                file = file.read()
                text.delete("1.0", tk.END)
                text.insert(tk.END, file)

                return

        def showcontent(x):

            lb.focus()
            x = lb.curselection()[0]
            file = lb.get(x)
            with open(file, "r") as file:
                file = file.read()
                text.delete("1.0", tk.END)
                text.insert(tk.END, file)

                return

        def newdirlist():
            a = "/home/jh/Desktop/Codeview_Project/"

            path = filedialog.askdirectory(initialdir=a)
            os.chdir(path)
            flist = os.listdir()
            lb.delete(0, tk.END)
            for item in flist:
                lb.insert(tk.END, item)
                return flist

        def path_change():
            path = filedialog.askdirectory()
            lb.delete(0, tk.END)
            flist = os.listdir(path)
            for item in flist:
                lb.insert(tk.END, item)
                return

        lb = tk.Listbox(frm2, height=48, bg="light blue")
        lb.grid(row=0, column=1, rowspan=7, sticky="nswe")
        lb.focus()
        lb.configure(selectmode="")
        flist = os.listdir()
        for item in flist:
            lb.insert(tk.END, item)
        lb.bind("<Double-Button-1>", opensystem)
        lb.bind("<<ListboxSelect>>", showcontent)
        lb.bind("<Double-Button-2>", runpyprg)

        def loadlist1():
            flist = os.listdir()
            for item in flist:
                lb.insert(tk.END, item)

        text = tk.Text(top, height=48, width=150)
        text.grid(row=0, column=0)
        btn4 = tk.Button(frm, text="loadlist1", command=loadlist1)
        btn4.grid(column=0, row=7)
        btn5 = tk.Button(frm, text="Run", command=runpyprg)
        btn5.grid(column=0, row=8)
        btn7 = tk.Button(frm, text="CLR LB", command=clear)
        btn7.grid(column=0, row=11)
        btn8 = tk.Button(frm, text="Clear Text", command=cleartxt)
        btn8.grid(column=0, row=12)
    except Exception as ex:
        text.insert(tk.END, ex)

    root.mainloop()


if __name__ == "__main__":

    main()
import tkinter as tk
from tkinter import ttk
from tkinter import font, colorchooser, messagebox, filedialog
import os

win = tk.Tk()
win.title("An Editter")
win.geometry("700x700")

# ********************************************* Main Menu ************************************************
main_menu = tk.Menu()

# INSERTING IMAGES
file = tk.Menu(main_menu, tearoff=False)


edit = tk.Menu(main_menu, tearoff=False)


view = tk.Menu(main_menu, tearoff=False)


color = tk.Menu(main_menu, tearoff=False)

theme_choice = tk.StringVar()

color_dict = {
    "Light Default": (
        "#000000",
        "#ffffff",
    ),  # here there is text color and backgrund color
    "Light Plus": ("#474747", "#e0e0e0"),
    "Dark": ("#c4c4c4", "#2d2d2d"),
}


# ******cascades******
main_menu.add_cascade(label="Files", menu=file)
main_menu.add_cascade(label="Edit", menu=edit)
main_menu.add_cascade(label="View", menu=view)
main_menu.add_cascade(label="Colors", menu=color)
# ***********************************************End of Main menu*******************************************


# *********************************************Toolbar************************************************
tool_bar = ttk.Label(win)
tool_bar.pack(side=tk.TOP, fill=tk.X)

# font box
font_tuple = tk.font.families()
font_family = tk.StringVar()
font_combo = ttk.Combobox(
    tool_bar, width=25, state="readonly", textvariable=font_family
)
font_combo["values"] = font_tuple
font_combo.grid(row=0, column=0, padx=4)
font_combo.current(font_tuple.index("Arial"))

# size box
size_var = tk.IntVar()
size_combo = ttk.Combobox(tool_bar, width=15, textvariable=size_var, state="readonly")
size_combo["values"] = tuple(range(5, 50, 3))
size_combo.grid(row=0, column=1, padx=4)
size_combo.current(3)

# now creating all the buttons


bold_button = ttk.Button(tool_bar, text="Bold")
bold_button.grid(row=0, column=2, padx=4)

italic_button = ttk.Button(tool_bar, text="italic")
italic_button.grid(row=0, column=3, padx=4)

underline_button = ttk.Button(tool_bar, text="underline")
underline_button.grid(row=0, column=4, padx=4)

font_color_button = ttk.Button(tool_bar, text="Font Color")
font_color_button.grid(row=0, column=5, padx=4)

align_left_button = ttk.Button(tool_bar, text="JustLeft")
align_left_button.grid(row=0, column=6, padx=4)

align_center_button = ttk.Button(tool_bar, text="Center")
align_center_button.grid(row=0, column=7, padx=4)

align_right_button = ttk.Button(tool_bar, text="RightJust")
align_right_button.grid(row=0, column=8, padx=4)
# ***********************************************End of Tool bar******************************************
# *********************************************************************************************************


# *********************************************Text Editor************************************************
text_editor = tk.Text(win)
text_editor.config(wrap="word", relief=tk.FLAT)
text_editor.focus_set()

scroll_bar = tk.Scrollbar(win)
scroll_bar.pack(side=tk.RIGHT, fill=tk.Y)
text_editor.pack(fill=tk.BOTH, expand=True)
scroll_bar.config(command=text_editor.yview)
text_editor.config(yscrollcommand=scroll_bar.set)

# font family and font size functionalities
current_font_family = "Arial"
current_font_size = 12


def change_font(win):
    global current_font_family
    current_font_family = font_family.get()
    text_editor.configure(font=(current_font_family, current_font_size))


def change_size(win):
    global current_font_size
    current_font_size = size_var.get()
    text_editor.configure(font=(current_font_family, current_font_size))


font_combo.bind("<<ComboboxSelected>>", change_font)
size_combo.bind("<<ComboboxSelected>>", change_size)

# ****************buttons functionality
def change_bold():
    text_property = tk.font.Font(font=text_editor["font"])
    if text_property.actual()["weight"] == "normal":
        text_editor.configure(font=(current_font_family, current_font_size, "bold"))
    if text_property.actual()["weight"] == "bold":
        text_editor.configure(font=(current_font_family, current_font_size, "normal"))


bold_button.configure(command=change_bold)

# italic functionality
def change_italic():
    italic = tk.font.Font(font=text_editor["font"])
    if italic.actual()["slant"] == "roman":
        text_editor.configure(font=(current_font_family, current_font_size, "italic"))
    if italic.actual()["slant"] == "italic":
        text_editor.configure(font=(current_font_family, current_font_size, "roman"))


italic_button.configure(command=change_italic)

# underline functionality
def change_underline():
    underline = tk.font.Font(font=text_editor["font"])
    if underline.actual()["underline"] == 0:
        text_editor.configure(
            font=(current_font_family, current_font_size, "underline")
        )
    if underline.actual()["underline"] == 1:
        text_editor.configure(font=(current_font_family, current_font_size, "normal"))


underline_button.configure(command=change_underline)

# color functionality
def color_change():
    color = tk.colorchooser.askcolor()
    text_editor.configure(fg=color[1])


font_color_button.configure(command=color_change)

# now we will do allignment
def left():
    text_content = text_editor.get(1.0, "end")
    text_editor.tag_config("left", justify=tk.LEFT)
    text_editor.delete(1.0, tk.END)
    text_editor.insert(tk.INSERT, text_content, "left")


align_left_button.configure(command=left)


def center():
    text_content = text_editor.get(1.0, "end")
    text_editor.tag_config("center", justify=tk.CENTER)
    text_editor.delete(1.0, tk.END)
    text_editor.insert(tk.INSERT, text_content, "center")


align_center_button.configure(command=center)


def right():
    text_content = text_editor.get(1.0, "end")
    text_editor.tag_config("right", justify=tk.RIGHT)
    text_editor.delete(1.0, tk.END)
    text_editor.insert(tk.INSERT, text_content, "right")


align_right_button.configure(command=right)

text_editor.configure(font=("Arial", 12))
# # ***********************************************End of Text editor******************************************

# ************************************************Status bar***************************************************
status_bar = ttk.Label(win, text="Status Bar")
status_bar.pack(side=tk.BOTTOM)

text_changed = False


def changed(event=None):
    global text_changed
    if text_editor.edit_modified():
        text_changed = True
        words = len(text_editor.get(1.0, "end-1c").split())
        characters = len(text_editor.get(1.0, "end-1c"))
        status_bar.config(text=f"Characters:{characters}  Words : {words} ")
    text_editor.edit_modified(False)


text_editor.bind("<<Modified>>", changed)
# ************************************************End of status bar********************************************

# ************************************************Main menu functionality***********************************
url = ""  # variable

# new functionality
def new_file(event=None):
    global url
    url = ""
    text_editor.delete(1.0, tk.END)


# file new command
file.add_command(label="New", compound=tk.LEFT, accelerator="Ctrl+N", command=new_file)

# open functionality
def open_file(event=None):
    global url
    url = filedialog.askopenfilename(
        initialdir=os.getcwd(),
        title="Select File",
        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
    )
    try:
        with open(url, "r") as fr:
            text_editor.delete(1.0, tk.END)
            text_editor.insert(1.0, fr.read())
    except FileNotFoundError:
        return
    except:
        return
    win.title(os.path.basename(url))


# open command
file.add_command(
    label="Open", compound=tk.LEFT, accelerator="Ctrl+O", command=open_file
)
file.add_separator()

# functionality to save a file
def save_file(event=None):
    global url
    try:
        if url:
            content = str(text_editor.get(1.0, tk.END))
            with open(url, "w", encoding="utf-8") as wf:
                wf.write(content)
        else:
            url = filedialog.asksaveasfile(
                mode="w",
                defaultextension=".txt",
                filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
            )
            content = text_editor.get(1.0, tk.END)
            url.write(content)
            url.close()
    except:
        return


# save command
file.add_command(
    label="Save", compound=tk.LEFT, accelerator="Ctrl+S", command=save_file
)

# save as functionality
def save_as(event=None):
    global url
    try:
        url = filedialog.asksaveasfile(
            mode="w",
            defaultextension=".txt",
            filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
        )
        content = text_editor.get(1.0, tk.END)
        url.write(content)
        url.close()
    except:
        return


# save as command
file.add_command(
    label="Save As", compound=tk.LEFT, accelerator="Ctrl+S", command=save_as
)
file.add_separator()

# Exit command functionality
def exit_fun(event=None):
    global url, text_changed
    try:
        if text_changed:
            mbox = messagebox.askyesnocancel(
                "Warning!", "Do you want to save your file?"
            )
            if mbox:
                if url:
                    content = str(text_editor.get(1.0, tk.END))
                    with open(url, "w", encoding="utf-8") as wf:
                        wf.write(content)
                        win.destroy()
                else:
                    url = filedialog.asksaveasfile(
                        mode="w",
                        defaultextension=".txt",
                        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
                    )
                    content2 = text_editor.get(1.0, tk.END)
                    url.write(content2)
                    url.close()
                    win.destroy()
            elif mbox is False:
                win.destroy()
        else:
            win.destroy()
    except:
        return


# exit command
file.add_command(label="Exit", compound=tk.LEFT, accelerator="Ctrl+Z", command=exit_fun)

# edit commands adding functionality
# find functionality
def find_func(event=None):
    def find():
        word = find_input.get()
        text_editor.tag_remove("match", "1.0", tk.END)
        matches = 0
        if word:
            start_pos = "1.0"
            while True:
                start_pos = text_editor.search(word, start_pos, stopindex=tk.END)
                if not start_pos:
                    break
                end_pos = f"{start_pos}+{len(word)}c"
                text_editor.tag_add("match", start_pos, end_pos)
                matches += 1
                start_pos = end_pos
                text_editor.tag_config("match", foreground="red", background="yellow")

    def replace():
        word = find_input.get()
        replace_content = replace_input.get()
        content = text_editor.get(1.0, tk.END)
        new_content = content.replace(word, replace_content)
        text_editor.delete(1.0, tk.END)
        text_editor.insert(1.0, new_content)

    find_dialog = tk.Toplevel()
    find_dialog.geometry("450x250+500+200")
    find_dialog.title("Find")
    find_dialog.resizable(0, 0)

    find_frame = ttk.Labelframe(find_dialog, text="Find/Replace")
    find_frame.pack(pady=20)

    # labels
    text_find_label = ttk.Label(find_frame, text="Find: ")
    text_replace_label = ttk.Label(find_frame, text="Replace")
    text_find_label.grid(row=0, column=0, padx=4, pady=4)
    text_replace_label.grid(row=1, column=0, padx=4, pady=4)
    # entry boxes
    find_input = ttk.Entry(find_frame, width=30)
    replace_input = ttk.Entry(find_frame, width=30)
    find_input.grid(row=0, column=1, padx=4, pady=4)
    replace_input.grid(row=1, column=1, padx=4, pady=4)
    # buttons
    find_button = ttk.Button(find_frame, text="Find", command=find)
    replace_button = ttk.Button(find_frame, text="Replace", command=replace)
    find_button.grid(row=2, column=0, padx=4, pady=4)
    replace_button.grid(row=2, column=1, padx=4, pady=4)


edit.add_command(
    label="Copy",
    compound=tk.LEFT,
    accelerator="Ctrl+C",
    command=lambda: text_editor.event_generate("<Control c>"),
)
edit.add_command(
    label="Paste",
    compound=tk.LEFT,
    accelerator="Ctrl+V",
    command=lambda: text_editor.event_generate("<Control v>"),
)
edit.add_command(
    label="Cut",
    compound=tk.LEFT,
    accelerator="Ctrl+X",
    command=lambda: text_editor.event_generate("<Control x>"),
)
edit.add_separator()

edit.add_command(
    label="Find", compound=tk.LEFT, accelerator="Ctrl+F", command=find_func
)

# view checkbuttons

show_toolbar = tk.BooleanVar()
show_toolbar.set(True)
show_statusbar = tk.BooleanVar()
show_statusbar.set(True)


def hide_toolbar():
    global show_toolbar
    if show_toolbar:
        tool_bar.pack_forget()
        show_toolbar = False
    else:
        text_editor.pack_forget()
        status_bar.pack_forget()
        tool_bar.pack(side=tk.TOP, fill=tk.X)
        text_editor.pack(fill=tk.BOTH, expand=True)
        status_bar.pack(side=tk.BOTTOM)
        show_toolbar = True


def hide_statusbar():
    global show_statusbar
    if show_statusbar:
        status_bar.pack_forget()
        show_statusbar = False
    else:
        status_bar.pack(side=tk.BOTTOM)
        show_statusbar = True


view.add_checkbutton(
    label="Status Bar",
    onvalue=True,
    offvalue=False,
    variable=show_statusbar,
    compound=tk.LEFT,
    command=hide_statusbar,
)
view.add_checkbutton(
    label="Tool bar",
    onvalue=True,
    offvalue=False,
    variable=show_toolbar,
    compound=tk.LEFT,
    command=hide_toolbar,
)

# color Theme
def change_theme():
    chosen_theme = theme_choice.get()
    color_tuple = color_dict.get(chosen_theme)
    fg_color, bg_color = color_tuple[0], color_tuple[1]
    text_editor.config(background=bg_color, fg=fg_color)


count = 0
for i in color_dict:
    color.add_radiobutton(
        label=i, variable=theme_choice, compound=tk.LEFT, command=change_theme
    )
    count += 1


# ********************************************End of Main Menu Functionality*********************************
win.config(menu=main_menu)

# binding shortcut keys
win.bind("<Control-n>", new_file)
win.bind("<Control-o>", open_file)
win.bind("<Control-s>", save_file)
win.bind("<Control-Alt-s>", save_as)
win.bind("<Control-f>", find_func)
win.bind("<Control-q>", exit_fun)

win.mainloop()
import tkinter as tk
from tkinter import ttk
from tkinter import font, colorchooser, messagebox, filedialog
import os

root = tk.Tk()
root.title("An Editter")
root.geometry("700x700")

# ********************************************* Main Menu ************************************************
main_menu = tk.Menu()

# INSERTING IMAGES
file = tk.Menu(main_menu, tearoff=True)


edit = tk.Menu(main_menu, tearoff=True)


view = tk.Menu(main_menu, tearoff=True)

theme_choice = tk.StringVar()


color = tk.Menu(main_menu, tearoff=True)


color_dict = {
    "Light Default": (
        "#000000",
        "#ffffff",
    ),  # here there is text color and backgrund color
    "Light Plus": ("#474747", "#e0e0e0"),
    "Dark": ("#c4c4c4", "#2d2d2d"),
    "Greygarious Grey": ("83406a.d1d4d1"),
    "Lovely Lavender": ("202b4b.e1e1ff"),
    "Aquamarine": ("5b8340.d1e7e0"),
    "Bold Beige": ("4b4620.fff0e1"),
    "Cobalt Blue": ("ffffBB.3333aa"),
    "Olive Green": ("d1e7e0.5b8340"),
}


# ******cascades******
main_menu.add_cascade(label="Files", menu=file)
main_menu.add_cascade(label="Edit", menu=edit)
main_menu.add_cascade(label="View", menu=view)
main_menu.add_cascade(label="Colors", menu=color)
# ***********************************************End of Main menu*******************************************


# *********************************************Toolbar************************************************
tool_bar = ttk.Label(root)
tool_bar.grid(row=0, column=1)

# font box
font_tuple = tk.font.families()
font_family = tk.StringVar()
font_combo = ttk.Combobox(
    tool_bar, width=25, state="readonly", textvariable=font_family
)
font_combo["values"] = font_tuple
font_combo.grid(row=0, column=0, padx=4)
font_combo.current(font_tuple.index("Arial"))

# size box
size_var = tk.IntVar()
size_combo = ttk.Combobox(tool_bar, width=15, textvariable=size_var, state="readonly")
size_combo["values"] = tuple(range(5, 50, 3))
size_combo.grid(row=0, column=1, padx=4)
size_combo.current(3)

# now creating all the buttons


bold_button = ttk.Button(tool_bar, text="Bold")
bold_button.grid(row=0, column=2, padx=4)

italic_button = ttk.Button(tool_bar, text="italic")
italic_button.grid(row=0, column=3, padx=4)

underline_button = ttk.Button(tool_bar, text="underline")
underline_button.grid(row=0, column=4, padx=4)

font_color_button = ttk.Button(tool_bar, text="Font Color")
font_color_button.grid(row=0, column=5, padx=4)

align_left_button = ttk.Button(tool_bar, text="JustLeft")
align_left_button.grid(row=0, column=6, padx=4)

align_center_button = ttk.Button(tool_bar, text="Center")
align_center_button.grid(row=0, column=7, padx=4)

align_right_button = ttk.Button(tool_bar, text="RightJust")
align_right_button.grid(row=0, column=8, padx=4)
# ***********************************************End of Tool bar******************************************
# *********************************************************************************************************


# *********************************************Text Editor************************************************
text = tk.Text(root)
text.config(wrap="word", relief=tk.FLAT)
text.focus_set()

scroll_bar = tk.Scrollbar(root)
scroll_bar.grid(row=2, column=4)
text.grid(row=2, column=1)
scroll_bar.config(command=text.yview)
text.config(yscrollcommand=scroll_bar.set)

# font family and font size functionalities
current_font_family = "Arial"
current_font_size = 12


def change_font(root):
    global current_font_family
    current_font_family = font_family.get()
    text.configure(font=(current_font_family, current_font_size))


def change_size(root):
    global current_font_size
    current_font_size = size_var.get()
    text.configure(font=(current_font_family, current_font_size))


font_combo.bind("<<ComboboxSelected>>", change_font)
size_combo.bind("<<ComboboxSelected>>", change_size)

# ****************buttons functionality
def change_bold():
    text_property = tk.font.Font(font=text["font"])
    if text_property.actual()["weight"] == "normal":
        text.configure(font=(current_font_family, current_font_size, "bold"))
    if text_property.actual()["weight"] == "bold":
        text.configure(font=(current_font_family, current_font_size, "normal"))


bold_button.configure(command=change_bold)

# italic functionality
def change_italic():
    italic = tk.font.Font(font=text["font"])
    if italic.actual()["slant"] == "roman":
        text.configure(font=(current_font_family, current_font_size, "italic"))
    if italic.actual()["slant"] == "italic":
        text.configure(font=(current_font_family, current_font_size, "roman"))


italic_button.configure(command=change_italic)

# underline functionality
def change_underline():
    underline = tk.font.Font(font=text["font"])
    if underline.actual()["underline"] == 0:
        text.configure(font=(current_font_family, current_font_size, "underline"))
    if underline.actual()["underline"] == 1:
        text.configure(font=(current_font_family, current_font_size, "normal"))


underline_button.configure(command=change_underline)

# color functionality
def color_change():
    color = tk.colorchooser.askcolor()
    text.configure(fg=color[1])
    font_color_button.configure(command=color_change)


# now we will do allignment
def left():
    text_content = text.get(1.0, "end")
    text.tag_config("left", justify=tk.LEFT)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "left")
    align_left_button.configure(command=left)


def center():
    text_content = text.get(1.0, "end")
    text.tag_config("center", justify=tk.CENTER)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "center")
    align_center_button.configure(command=center)


def right():
    text_content = text.get(1.0, "end")
    text.tag_config("right", justify=tk.RIGHT)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "right")
    align_right_button.configure(command=right)
    text.configure(font=("Arial", 12))


# # ***********************************************End of Text editor******************************************

# ************************************************Status bar***************************************************


def select_all(event=None):
    content_text.tag_add("sel", "1.0", "end")
    return "break"


def about():
    tkinter.messagebox.showinfo(
        "About",
        "{}{}".format(
            PROGRAM_NAME,
            "\nThis is a Text Editor application still in development JH APPS 2021",
        ),
    )


def help():
    tkinter.messagebox.showinfo("Help", "")


def show_info_bar():
    val = showinbar.get()
    if val:
        line_number_bar.pack(expand=NO, fill=None, side=RIGHT, anchor="se")
    elif not val:
        "<<ListboxSelect>>", line_number_bar.pack_forget()


def highlight_line(interval=100):
    content_text.tag_remove("active_line", 1.0, "end")
    content_text.tag_add("active_line", "insert linestart", "insert lineend+1c")
    content_text.after(interval, toggle_highlight)


def undo_highlight():
    content_text.tag_remove("active_line", 1.0, "end")


def toggle_highlight(event=None):
    val = hltln.get()
    undo_highlight() if not val else highlight_line()


def on_content_changed(event=None):
    update_line_numbers()
    update_cursor_info_bar()


def show_cursor_info_bar():
    show_cursor_info_checked = showinbar.get()
    if show_cursor_info_checked:
        cursor_info_bar.pack(expand="no", fill=None, side="right", anchor="se")
    else:
        cursor_info_bar.pack_forget()


def get_line_numbers():
    output = ""
    if showinbar.get():
        row, col = content_text.index("end").split(".")
        for i in range(1, int(row)):
            output += str(i) + "\n"
    return output


def update_cursor_info_bar(event=None):
    row, col = content_text.index(INSERT).split(".")
    line_num, col_num = str(int(row)), str(int(col) + 1)
    infotext = "Line: {0} | Column: {1}".format(line_num, col_num)
    cursor_info_bar.config(text=infotext)


def show_popup_menu(event):
    popup_menu.tk_popup(event.x_root, event.y_root)


def showcontent(event=None):
    lbox.focus_set()
    file_name = input_file_name
    file = lbox.curselection()
    filename = lbox.get(file)
    with open(file_name) as f:
        content_text.insert(1.0, f.read())


def changed(event=None):
    global text_changed
    if text.edit_modified():
        text_changed = True
        words = len(text.get(1.0, "end-1c").split())
        characters = len(text.get(1.0, "end-1c"))
        status_bar.config(text=f"Characters:{characters}  Words : {words} ")
    text.edit_modified(False)


text.bind("<<Modified>>", changed)
# ************************************************End of status bar********************************************

# ************************************************Main menu functionality***********************************
url = ""  # variable

# new functionality
def new_file(event=None):
    global url
    url = ""
    text.delete(1.0, tk.END)


# file new command
file.add_command(label="New", compound=tk.LEFT, accelerator="Ctrl+N", command=new_file)

# open functionality
def open_file(event=None):
    global url
    url = filedialog.askopenfilename(
        initialdir=os.getcwd(),
        title="Select File",
        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
    )
    try:
        with open(url, "r") as fr:
            text.delete(1.0, tk.END)
            text.insert(1.0, fr.read())
    except FileNotFoundError:
        return
    except:
        return
    root.title(os.path.basename(url))


# open command
file.add_command(
    label="Open", compound=tk.LEFT, accelerator="Ctrl+O", command=open_file
)
file.add_separator()

# functionality to save a file
def save_file(event=None):
    global url
    try:
        if url:
            content = str(text.get(1.0, tk.END))
            with open(url, "w", encoding="utf-8") as wf:
                wf.write(content)
        else:
            url = filedialog.asksaveasfile(
                mode="w",
                defaultextension=".txt",
                filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
            )
            content = text.get(1.0, tk.END)
            url.write(content)
            url.close()
    except:
        return


# save command
file.add_command(
    label="Save", compound=tk.LEFT, accelerator="Ctrl+S", command=save_file
)

# save as functionality
def save_as(event=None):
    global url
    try:
        url = filedialog.asksaveasfile(
            mode="w",
            defaultextension=".txt",
            filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
        )
        content = text.get(1.0, tk.END)
        url.write(content)
        url.close()
    except:
        return


# save as command
file.add_command(
    label="Save As", compound=tk.LEFT, accelerator="Ctrl+S", command=save_as
)
file.add_separator()

# Exit command functionality
def exit_fun(event=None):
    global url, text_changed
    try:
        if text_changed:
            mbox = messagebox.askyesnocancel(
                "Warning!", "Do you want to save your file?"
            )
            if mbox:
                if url:
                    content = str(text.get(1.0, tk.END))
                    with open(url, "w", encoding="utf-8") as wf:
                        wf.write(content)
                        root.destroy()
                else:
                    url = filedialog.asksaveasfile(
                        mode="w",
                        defaultextension=".txt",
                        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
                    )
                    content2 = text.get(1.0, tk.END)
                    url.write(content2)
                    url.close()
                    root.destroy()
            elif mbox is False:
                root.destroy()
        else:
            root.destroy()
    except:
        return


# exit command
file.add_command(label="Exit", compound=tk.LEFT, accelerator="Ctrl+Z", command=exit_fun)

# edit commands adding functionality
# find functionality
def find_func(event=None):
    def find():
        word = find_input.get()
        text.tag_remove("match", "1.0", tk.END)
        matches = 0
        if word:
            start_pos = "1.0"
            while True:
                start_pos = text.search(word, start_pos, stopindex=tk.END)
                if not start_pos:
                    break
                end_pos = f"{start_pos}+{len(word)}c"
                text.tag_add("match", start_pos, end_pos)
                matches += 1
                start_pos = end_pos
                text.tag_config("match", foreground="red", background="yellow")

    def replace():
        word = find_input.get()
        replace_content = replace_input.get()
        content = text.get(1.0, tk.END)
        new_content = content.replace(word, replace_content)
        text.delete(1.0, tk.END)
        text.insert(1.0, new_content)

    find_dialog = tk.Toplevel()
    find_dialog.geometry("450x250+500+200")
    find_dialog.title("Find")
    find_dialog.resizable(0, 0)

    find_frame = ttk.Labelframe(find_dialog, text="Find/Replace")
    find_frame.grid(row=1, column=1)

    # labels
    text_find_label = ttk.Label(find_frame, text="Find: ")
    text_replace_label = ttk.Label(find_frame, text="Replace")
    text_find_label.grid(row=0, column=0, padx=4, pady=4)
    text_replace_label.grid(row=1, column=0, padx=4, pady=4)
    # entry boxes
    find_input = ttk.Entry(find_frame, width=30)
    replace_input = ttk.Entry(find_frame, width=30)
    find_input.grid(row=0, column=1, padx=4, pady=4)
    replace_input.grid(row=1, column=1, padx=4, pady=4)
    # buttons
    find_button = ttk.Button(find_frame, text="Find", command=find)
    replace_button = ttk.Button(find_frame, text="Replace", command=replace)
    find_button.grid(row=2, column=0, padx=4, pady=4)
    replace_button.grid(row=2, column=1, padx=4, pady=4)


edit.add_command(
    label="Copy",
    compound=tk.LEFT,
    accelerator="Ctrl+C",
    command=lambda: text.event_generate("<Control c>"),
)
edit.add_command(
    label="Paste",
    compound=tk.LEFT,
    accelerator="Ctrl+V",
    command=lambda: text.event_generate("<Control v>"),
)
edit.add_command(
    label="Cut",
    compound=tk.LEFT,
    accelerator="Ctrl+X",
    command=lambda: text.event_generate("<Control x>"),
)
edit.add_separator()

edit.add_command(
    label="Find", compound=tk.LEFT, accelerator="Ctrl+F", command=find_func
)

# view checkbuttons

show_toolbar = tk.BooleanVar()
show_toolbar.set(True)
show_statusbar = tk.BooleanVar()
show_statusbar.set(True)


def hide_toolbar():
    global show_toolbar
    if show_toolbar:
        tool_bar.grid_forget()
        show_toolbar = False
    else:
        text.grid_forget()
        status_bar.grid_forget()
        tool_bar.grid(row=0, column=2)
        text.grid(row=1, column=3)
        status_bar.grid(row=1, column=1)
        show_toolbar = True


def hide_statusbar():
    global show_statusbar
    if show_statusbar:
        status_bar.grid_forget()
        show_statusbar = False
    else:
        status_bar.grid(row=50, column=1)
        show_statusbar = True


view.add_checkbutton(
    label="Status Bar",
    onvalue=True,
    offvalue=False,
    variable=show_statusbar,
    compound=tk.LEFT,
    command=hide_statusbar,
)
view.add_checkbutton(
    label="Tool bar",
    onvalue=True,
    offvalue=False,
    variable=show_toolbar,
    compound=tk.LEFT,
    command=hide_toolbar,
)

# color Theme
def change_theme():
    chosen_theme = theme_choice.get()
    color_tuple = color_dict.get(chosen_theme)
    fg_color, bg_color = color_tuple[0], color_tuple[1]
    text.config(background=bg_color, fg=fg_color)


count = 0
for i in color_dict:
    color.add_radiobutton(
        label=i, variable=theme_choice, compound=tk.LEFT, command=change_theme
    )
    count += 1


# ********************************************End of Main Menu Functionality*********************************
root.config(menu=main_menu)

# binding shortcut keys
root.bind("<Control-n>", new_file)
root.bind("<Control-o>", open_file)
root.bind("<Control-s>", save_file)
root.bind("<Control-Alt-s>", save_as)
root.bind("<Control-f>", find_func)
root.bind("<Control-q>", exit_fun)

root.mainloop()
import tkinter as tk
from tkinter import ttk
from tkinter import font, colorchooser, messagebox, filedialog
import os


root = tk.Tk()
root.title("An Editter")
root.geometry("700x700")

# ********************************************* Main Menu ************************************************
main_menu = tk.Menu()

# INSERTING IMAGES
file = tk.Menu(main_menu, tearoff=False)


edit = tk.Menu(main_menu, tearoff=False)


view = tk.Menu(main_menu, tearoff=False)


color = tk.Menu(main_menu, tearoff=False)

theme_choice = tk.StringVar()

color_dict = {
    "Light Default": (
        "#000000",
        "#ffffff",
    ),  # here there is text color and backgrund color
    "Light Plus": ("#474747", "#e0e0e0"),
    "Dark": ("#c4c4c4", "#2d2d2d"),
}


# ******cascades******
main_menu.add_cascade(label="Files", menu=file)
main_menu.add_cascade(label="Edit", menu=edit)
main_menu.add_cascade(label="View", menu=view)
main_menu.add_cascade(label="Colors", menu=color)
# ***********************************************End of Main menu*******************************************


# *********************************************Toolbar************************************************
tool_bar = ttk.Label(root)
tool_bar.pack(side=tk.root, fill=tk.X)

# font box
font_tuple = tk.font.families()
font_family = tk.StringVar()
font_combo = ttk.Combobox(
    tool_bar, width=25, state="readonly", textvariable=font_family
)
font_combo["values"] = font_tuple
font_combo.grid(row=0, column=0, padx=4)
font_combo.current(font_tuple.index("Arial"))

# size box
size_var = tk.IntVar()
size_combo = ttk.Combobox(tool_bar, width=15, textvariable=size_var, state="readonly")
size_combo["values"] = tuple(range(5, 50, 3))
size_combo.grid(row=0, column=1, padx=4)
size_combo.current(3)

# now creating all the buttons


bold_button = ttk.Button(tool_bar, text="Bold")
bold_button.grid(row=0, column=2, padx=4)

italic_button = ttk.Button(tool_bar, text="italic")
italic_button.grid(row=0, column=3, padx=4)

underline_button = ttk.Button(tool_bar, text="underline")
underline_button.grid(row=0, column=4, padx=4)

font_color_button = ttk.Button(tool_bar, text="Font Color")
font_color_button.grid(row=0, column=5, padx=4)

align_left_button = ttk.Button(tool_bar, text="JustLeft")
align_left_button.grid(row=0, column=6, padx=4)

align_center_button = ttk.Button(tool_bar, text="Center")
align_center_button.grid(row=0, column=7, padx=4)

align_right_button = ttk.Button(tool_bar, text="RightJust")
align_right_button.grid(row=0, column=8, padx=4)
# ***********************************************End of Tool bar******************************************
# *********************************************************************************************************


# *********************************************Text Editor************************************************
text = tk.Text(root)
text.config(wrap="word", relief=tk.FLAT)
text.focus_set()

scroll_bar = tk.Scrollbar(root)
scroll_bar.pack(side=tk.RIGHT, fill=tk.Y)
text.pack(fill=tk.BOTH, expand=True)
scroll_bar.config(command=text.yview)
text.config(yscrollcommand=scroll_bar.set)

# font family and font size functionalities
current_font_family = "Arial"
current_font_size = 12


def change_font(root):
    global current_font_family
    current_font_family = font_family.get()
    text.configure(font=(current_font_family, current_font_size))


def change_size(root):
    global current_font_size
    current_font_size = size_var.get()
    text.configure(font=(current_font_family, current_font_size))


font_combo.bind("<<ComboboxSelected>>", change_font)
size_combo.bind("<<ComboboxSelected>>", change_size)

# ****************buttons functionality
def change_bold():
    text_property = tk.font.Font(font=text["font"])
    if text_property.actual()["weight"] == "normal":
        text.configure(font=(current_font_family, current_font_size, "bold"))
    if text_property.actual()["weight"] == "bold":
        text.configure(font=(current_font_family, current_font_size, "normal"))


bold_button.configure(command=change_bold)

# italic functionality
def change_italic():
    italic = tk.font.Font(font=text["font"])
    if italic.actual()["slant"] == "roman":
        text.configure(font=(current_font_family, current_font_size, "italic"))
    if italic.actual()["slant"] == "italic":
        text.configure(font=(current_font_family, current_font_size, "roman"))


italic_button.configure(command=change_italic)

# underline functionality
def change_underline():
    underline = tk.font.Font(font=text["font"])
    if underline.actual()["underline"] == 0:
        text.configure(font=(current_font_family, current_font_size, "underline"))
    if underline.actual()["underline"] == 1:
        text.configure(font=(current_font_family, current_font_size, "normal"))


underline_button.configure(command=change_underline)

# color functionality
def color_change():
    color = tk.colorchooser.askcolor()
    text.configure(fg=color[1])


font_color_button.configure(command=color_change)

# now we will do allignment
def left():
    text_content = text.get(1.0, "end")
    text.tag_config("left", justify=tk.LEFT)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "left")


align_left_button.configure(command=left)


def center():
    text_content = text.get(1.0, "end")
    text.tag_config("center", justify=tk.CENTER)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "center")


align_center_button.configure(command=center)


def right():
    text_content = text.get(1.0, "end")
    text.tag_config("right", justify=tk.RIGHT)
    text.delete(1.0, tk.END)
    text.insert(tk.INSERT, text_content, "right")


align_right_button.configure(command=right)

text.configure(font=("Arial", 12))
# # ***********************************************End of Text editor******************************************

# ************************************************Status bar***************************************************
status_bar = ttk.Label(root, text="Status Bar")
status_bar.pack(side=tk.BOTTOM)

text_changed = False


def changed(event=None):
    global text_changed
    if text.edit_modified():
        text_changed = True
        words = len(text.get(1.0, "end-1c").split())
        characters = len(text.get(1.0, "end-1c"))
        status_bar.config(text=f"Characters:{characters}  Words : {words} ")
    text.edit_modified(False)


text.bind("<<Modified>>", changed)
# ************************************************End of status bar********************************************

# ************************************************Main menu functionality***********************************
url = ""  # variable

# new functionality
def new_file(event=None):
    global url
    url = ""
    text.delete(1.0, tk.END)


# file new command
file.add_command(label="New", compound=tk.LEFT, accelerator="Ctrl+N", command=new_file)

# open functionality
def open_file(event=None):
    global url
    url = filedialog.askopenfilename(
        initialdir=os.getcwd(),
        title="Select File",
        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
    )
    try:
        with open(url, "r") as fr:
            text.delete(1.0, tk.END)
            text.insert(1.0, fr.read())
    except FileNotFoundError:
        return
    except:
        return
    root.title(os.path.basename(url))


# open command
file.add_command(
    label="Open", compound=tk.LEFT, accelerator="Ctrl+O", command=open_file
)
file.add_separator()

# functionality to save a file
def save_file(event=None):
    global url
    try:
        if url:
            content = str(text.get(1.0, tk.END))
            with open(url, "w", encoding="utf-8") as wf:
                wf.write(content)
        else:
            url = filedialog.asksaveasfile(
                mode="w",
                defaultextension=".txt",
                filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
            )
            content = text.get(1.0, tk.END)
            url.write(content)
            url.close()
    except:
        return


# save command
file.add_command(
    label="Save", compound=tk.LEFT, accelerator="Ctrl+S", command=save_file
)

# save as functionality
def save_as(event=None):
    global url
    try:
        url = filedialog.asksaveasfile(
            mode="w",
            defaultextension=".txt",
            filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
        )
        content = text.get(1.0, tk.END)
        url.write(content)
        url.close()
    except:
        return


# save as command
file.add_command(
    label="Save As", compound=tk.LEFT, accelerator="Ctrl+S", command=save_as
)
file.add_separator()

# Exit command functionality
def exit_fun(event=None):
    global url, text_changed
    try:
        if text_changed:
            mbox = messagebox.askyesnocancel(
                "Warning!", "Do you want to save your file?"
            )
            if mbox:
                if url:
                    content = str(text.get(1.0, tk.END))
                    with open(url, "w", encoding="utf-8") as wf:
                        wf.write(content)
                        root.destroy()
                else:
                    url = filedialog.asksaveasfile(
                        mode="w",
                        defaultextension=".txt",
                        filetypes=(("Text files", "*.txt"), ("All files", "*.*")),
                    )
                    content2 = text.get(1.0, tk.END)
                    url.write(content2)
                    url.close()
                    root.destroy()
            elif mbox is False:
                root.destroy()
        else:
            root.destroy()
    except:
        return


# exit command
file.add_command(label="Exit", compound=tk.LEFT, accelerator="Ctrl+Z", command=exit_fun)

# edit commands adding functionality
# find functionality
def find_func(event=None):
    def find():
        word = find_input.get()
        text.tag_remove("match", "1.0", tk.END)
        matches = 0
        if word:
            start_pos = "1.0"
            while True:
                start_pos = text.search(word, start_pos, stopindex=tk.END)
                if not start_pos:
                    break
                end_pos = f"{start_pos}+{len(word)}c"
                text.tag_add("match", start_pos, end_pos)
                matches += 1
                start_pos = end_pos
                text.tag_config("match", foreground="red", background="yellow")

    def replace():
        word = find_input.get()
        replace_content = replace_input.get()
        content = text.get(1.0, tk.END)
        new_content = content.replace(word, replace_content)
        text.delete(1.0, tk.END)
        text.insert(1.0, new_content)

    find_dialog = tk.Toplevel()
    find_dialog.geometry("450x250+500+200")
    find_dialog.title("Find")
    find_dialog.resizable(0, 0)

    find_frame = ttk.Labelframe(find_dialog, text="Find/Replace")
    find_frame.pack(pady=20)

    # labels
    text_find_label = ttk.Label(find_frame, text="Find: ")
    text_replace_label = ttk.Label(find_frame, text="Replace")
    text_find_label.grid(row=0, column=0, padx=4, pady=4)
    text_replace_label.grid(row=1, column=0, padx=4, pady=4)
    # entry boxes
    find_input = ttk.Entry(find_frame, width=30)
    replace_input = ttk.Entry(find_frame, width=30)
    find_input.grid(row=0, column=1, padx=4, pady=4)
    replace_input.grid(row=1, column=1, padx=4, pady=4)
    # buttons
    find_button = ttk.Button(find_frame, text="Find", command=find)
    replace_button = ttk.Button(find_frame, text="Replace", command=replace)
    find_button.grid(row=2, column=0, padx=4, pady=4)
    replace_button.grid(row=2, column=1, padx=4, pady=4)


edit.add_command(
    label="Copy",
    compound=tk.LEFT,
    accelerator="Ctrl+C",
    command=lambda: text.event_generate("<Control c>"),
)
edit.add_command(
    label="Paste",
    compound=tk.LEFT,
    accelerator="Ctrl+V",
    command=lambda: text.event_generate("<Control v>"),
)
edit.add_command(
    label="Cut",
    compound=tk.LEFT,
    accelerator="Ctrl+X",
    command=lambda: text.event_generate("<Control x>"),
)
edit.add_separator()

edit.add_command(
    label="Find", compound=tk.LEFT, accelerator="Ctrl+F", command=find_func
)

# view checkbuttons

show_toolbar = tk.BooleanVar()
show_toolbar.set(True)
show_statusbar = tk.BooleanVar()
show_statusbar.set(True)


def hide_toolbar():
    global show_toolbar
    if show_toolbar:
        tool_bar.pack_forget()
        show_toolbar = False
    else:
        text.pack_forget()
        status_bar.pack_forget()
        tool_bar.pack(side=tk.root, fill=tk.X)
        text.pack(fill=tk.BOTH, expand=True)
        status_bar.pack(side=tk.BOTTOM)
        show_toolbar = True


def hide_statusbar():
    global show_statusbar
    if show_statusbar:
        status_bar.pack_forget()
        show_statusbar = False
    else:
        status_bar.pack(side=tk.BOTTOM)
        show_statusbar = True


view.add_checkbutton(
    label="Status Bar",
    onvalue=True,
    offvalue=False,
    variable=show_statusbar,
    compound=tk.LEFT,
    command=hide_statusbar,
)
view.add_checkbutton(
    label="Tool bar",
    onvalue=True,
    offvalue=False,
    variable=show_toolbar,
    compound=tk.LEFT,
    command=hide_toolbar,
)

# color Theme
def change_theme():
    chosen_theme = theme_choice.get()
    color_tuple = color_dict.get(chosen_theme)
    fg_color, bg_color = color_tuple[0], color_tuple[1]
    text.config(background=bg_color, fg=fg_color)


count = 0
for i in color_dict:
    color.add_radiobutton(
        label=i, variable=theme_choice, compound=tk.LEFT, command=change_theme
    )
    count += 1


# ********************************************End of Main Menu Functionality*********************************
root.config(menu=main_menu)

# binding shortcut keys
root.bind("<Control-n>", new_file)
root.bind("<Control-o>", open_file)
root.bind("<Control-s>", save_file)
root.bind("<Control-Alt-s>", save_as)
root.bind("<Control-f>", find_func)
root.bind("<Control-q>", exit_fun)

root.mainloop()
import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showinfo

root = tk.Tk()
root.geometry('300x200')
root.resizable(False, False)
root.title('Combobox Widget')


def value_changed(event):
    msg = f'You selected {value_cb.get()}!'
    showinfo(title='Result', message=msg)


# Values
value = ('')

label = ttk.Label(text="Please select a value:")
label.pack(fill='x', padx=5, pady=5)

# create a combobox
selected_value = tk.StringVar()

value_cb = ttk.Combobox(root, textvariable=selected_value)
value_cb['values'] = values
value_cb['state'] = 'readonly'  # normal
value_cb.pack(fill='x', padx=5, pady=5)

value_cb.bind('<<ComboboxSelected>>', value_changed)

root.mainloop()




tk.Label(frm10, text="column2").grid(row=0, column=2)

tk.Label(frm10, text="column3").grid(row=0, column=3)

tk.Label(frm10, text="column4").grid(row=0, column=4)

tk.Label(frm10, text="column5").grid(row=0, column=5)

tk.Label(frm10, text="column6").grid(row=0, column=6)

tk.Label(frm10, text="column7").grid(row=0, column=7)

tk.Label(frm10, text="column8").grid(row=0, column=8)

tk.Label(frm10, text="column9").grid(row=0, column=9)

tk.Label(frm10, text="column2").grid(row=0, column=10)

tk.Label(frm10, text="column3").grid(row=0, column=11)

tk.Label(frm10, text="column4").grid(row=0, column=12)

tk.Label(frm10, text="column5").grid(row=0, column=13)

tk.Label(frm10, text="column6").grid(row=0, column=14)

tk.Label(frm10, text="column7").grid(row=0, column=15)

tk.Label(frm10, text="column8").grid(row=0, column=16)

tk.Label(frm10, text="column9").grid(row=0, column=17)

tk.Label(frm10, text="column6").grid(row=0, column=18)

tk.Label(frm10, text="column7").grid(row=0, column=19)

tk.Label(frm10, text="column8").grid(row=0, column=20)

tk.Label(frm10, text="column9").grid(row=0, column=21)







tk.Label(frm10, text="row1").grid(row=1, column=3)

tk.Label(frm10, text="row2").grid(row=2, column=3)

tk.Label(frm10, text="row3").grid(row=3, column=3)

tk.Label(frm10, text="row4").grid(row=4, column=3)

tk.Label(frm10, text="row5").grid(row=5, column=3)

tk.Label(frm10, text="row6").grid(row=6, column=3)

tk.Label(frm10, text="row7").grid(row=7, column=3)

tk.Label(frm10, text="row8").grid(row=8, column=3)

tk.Label(frm10, text="row9").grid(row=9, column=3)

tk.Label(frm10, text="row10").grid(row=10, column=3)

tk.Label(frm10, text="row11").grid(row=11, column=3)

tk.Label(frm10, text="row12").grid(row=12, column=3)

tk.Label(frm10, text="row13").grid(row=13, column=3)

tk.Label(frm10, text="row14").grid(row=14, column=3)

tk.Label(frm10, text="row15").grid(row=15, column=3)

tk.Label(frm10, text="row16").grid(row=16, column=3)

tk.Label(frm10, text="row17").grid(row=17, column=3)

tk.Label(frm10, text="row18").grid(row=18, column=3)

tk.Label(frm10, text="row19").grid(row=19, column=3)

tk.Label(frm10, text="row20").grid(row=20, column=3)

tk.Label(frm10, text="row21").grid(row=21, column=3)

tk.Label(frm10, text="row22").grid(row=22, column=3)

#

#

#
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, Toplevel
import os.path
from pathlib import Path
import runpy


def main():

    try:

        path = Path
        root = tk.Tk()
        top = Toplevel()
        root.geometry("600x700")
        frm2 = ttk.Frame(root, height=40)
        frm2.grid(row=2, column=2, rowspan=10)
        frm11 = ttk.Frame(root, height=20)
        frm11.grid(row=0, column=1)
        frm = ttk.Frame(root, height=50, width=10)
        frm.grid(row=0, column=0, rowspan=7)
        path = "/home/jh/Desktop/VERY_USEFUL_ CODE GUI_EXAMPLES__/"

        def clear():
            lb.delete(0, tk.END)

        def cleartxt():
            text.delete("1.0", tk.END)

        def runpyprg(event):

            file = lb.get(ANCHOR)
            runpy.run_path(path_name=file)

            return

        def opensystem(event):

            x = lb.curselection()[0]

            file = lb.get(x)
            with open(file, "r") as file:
                file = file.read()
                text.delete("1.0", tk.END)
                text.insert(tk.END, file)

                return

        def showcontent(x):

            lb.focus()
            x = lb.curselection()[0]
            file = lb.get(x)
            with open(file, "r") as file:
                file = file.read()
                text.delete("1.0", tk.END)
                text.insert(tk.END, file)

                return

        def newdirlist():
            a = "/home/jh/Desktop/Codeview_Project/"

            path = filedialog.askdirectory(initialdir=a)
            os.chdir(path)
            flist = os.listdir()
            lb.delete(0, tk.END)
            for item in flist:
                lb.insert(tk.END, item)
                return flist

        def path_change():
            path = filedialog.askdirectory()
            lb.delete(0, tk.END)
            flist = os.listdir(path)
            for item in flist:
                lb.insert(tk.END, item)
                return

        lb = tk.Listbox(frm2, height=48, bg="light blue")
        lb.grid(row=0, column=1, rowspan=7, sticky="nswe")
        lb.focus()
        lb.configure(selectmode="")
        flist = os.listdir()
        for item in flist:
            lb.insert(tk.END, item)
        lb.bind("<Double-Button-1>", opensystem)
        lb.bind("<<ListboxSelect>>", showcontent)
        lb.bind("<Double-Button-2>", runpyprg)

        def loadlist1():
            flist = os.listdir()
            for item in flist:
                lb.insert(tk.END, item)

        text = tk.Text(top, height=48, width=150)
        text.grid(row=0, column=0)
        btn4 = tk.Button(frm, text="loadlist1", command=loadlist1)
        btn4.grid(column=0, row=7)
        btn5 = tk.Button(frm, text="Run", command=runpyprg)
        btn5.grid(column=0, row=8)
        btn7 = tk.Button(frm, text="CLR LB", command=clear)
        btn7.grid(column=0, row=11)
        btn8 = tk.Button(frm, text="Clear Text", command=cleartxt)
        btn8.grid(column=0, row=12)
    except Exception as ex:
        text.insert(tk.END, ex)

    root.mainloop()


if __name__ == "__main__":

    main()
'''
ttk_multicolumn_listbox2.py

Python31 includes the Tkinter Tile extension ttk.

Ttk comes with 17 widgets, 11 of which already exist in Tkinter:
Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton,
PanedWindow, Radiobutton, Scale and Scrollbar

The 6 new widget classes are:
Combobox, Notebook, Progressbar, Separator, Sizegrip and Treeview

For additional info see the Python31 manual:
http://gpolo.ath.cx:81/pydoc/library/ttk.html

Here the TreeView widget is configured as a multi-column listbox
with adjustable column width and column-header-click sorting.

Tested with Python 3.1.1 and Tkinter 8.5
'''

import tkinter as tk
import tkinter.font as tkFont
import tkinter.ttk as ttk

class McListBox(object):
    """use a ttk.TreeView as a multicolumn ListBox"""
    def __init__(self):
        self.tree = None
        self._setup_widgets()
        self._build_tree()

    def _setup_widgets(self):
        s = """\
click on header to sort by that column
to change width of column drag boundary
        """
        msg = ttk.Label(wraplength="4i", justify="left", anchor="n",
            padding=(10, 2, 10, 6), text=s)
        msg.pack(fill='x')

        container = ttk.Frame()
        container.pack(fill='both', expand=True)

        # create a treeview with dual scrollbars
        self.tree = ttk.Treeview(columns=car_header, show="headings")
        vsb = ttk.Scrollbar(orient="vertical",
            command=self.tree.yview)
        hsb = ttk.Scrollbar(orient="horizontal",
            command=self.tree.xview)
        self.tree.configure(yscrollcommand=vsb.set,
            xscrollcommand=hsb.set)
        self.tree.grid(column=0, row=0, sticky='nsew', in_=container)
        vsb.grid(column=1, row=0, sticky='ns', in_=container)
        hsb.grid(column=0, row=1, sticky='ew', in_=container)

        container.grid_columnconfigure(0, weight=1)
        container.grid_rowconfigure(0, weight=1)

    def _build_tree(self):
        for col in car_header:
            self.tree.heading(col, text=col.title(),
                command=lambda c=col: sortby(self.tree, c, 0))
            # adjust the column's width to the header string
            self.tree.column(col,
                width=tkFont.Font().measure(col.title()))

        for item in car_list:
            self.tree.insert('', 'end', values=item)
            # adjust column's width if necessary to fit each value
            for ix, val in enumerate(item):
                col_w = tkFont.Font().measure(val)
                if self.tree.column(car_header[ix],width=None)<col_w:
                    self.tree.column(car_header[ix], width=col_w)


def sortby(tree, col, descending):
    """sort tree contents when a column header is clicked on"""
    # grab values to sort
    data = [(tree.set(child, col), child) \
        for child in tree.get_children('')]
    # if the data to be sorted is numeric change to float
    #data =  change_numeric(data)
    # now sort the data in place
    data.sort(reverse=descending)
    for ix, item in enumerate(data):
        tree.move(item[1], '', ix)
    # switch the heading so it will sort in the opposite direction
    tree.heading(col, command=lambda col=col: sortby(tree, col, \
        int(not descending)))


# the test data ...
car_header = ['car', 'repair']
car_list = [
('Hyundai', 'brakes') ,
('Honda', 'light') ,
('Lexus', 'battery') ,
('Benz', 'wiper') ,
('Ford', 'tire') ,
('Chevy', 'air') ,
('Chrysler', 'piston') ,
('Toyota', 'brake pedal') ,
('BMW', 'seat')
]

root = tk.Tk()
root.wm_title("multicolumn ListBox")
mc_listbox = McListBox()
root.mainloop()
'''
Created on Aug 12, 2017

@author: Aditya

This is the main file and will import other modules/codes written for python tkinter demonstration
'''

import program1 as p1
import program2 as p2
import program3 as p3
import program4 as p4
import program5 as p5
import program6 as p6
import program7 as p7
import program8 as p8
import program9 as p9
import program10 as p10
import program11 as p11
import program12 as p12
import program13 as p13

def start_all_programmes():
    p1.sayhello()
    p2.HelloAppLaunch()
    p3.GreetingAppLaunch()
    p4.launchButtonApp()
    p5.launchButton2App()
    p6.launchEntryApp()
    p7.launchSimpleCalenderApp()
    p8.ControlledPorgressApp()
    p9.DisplayAppLaunch()
    p10.launchTopLevelApp()
    p11.launchPanedWindowApp()
    p12.launchNoteBookApp()
    p13.launchApp()
    
if __name__ == '__main__':
    start_all_programmes()

import tkinter as tk
from tkinter import *
from tkinter import ttk
import tkinter.font
import math
import random
import subprocess
import os

from tkinter import filedialog, messagebox
from tkinter.scrolledtext import ScrolledText


root = tk.Tk()
notebook = ttk.Notebook(root)
f0 = ttk.Frame(notebook, height=800, width=1800)
notebook.grid(row=0, column=0)
notebook.add(f0, text="MAIN")
btnfrm = ttk.Frame(f0)
btnfrm.grid(row=3, column=7, columnspan=4, rowspan=3)
# This is to create a basic rootdow
#Starting with functions 
# 'btn_click' function : 
# This Function continuously updates the 
# input field whenever you enter a number

def btn_click(item):
    global expression
    expression = expression 
    input_text.set(expression)
    def opertran():
        input2_text.insert(str(item), 0)
        def op3():  
        
# 'bt_clear' function :This is used to clear 
# the input field

def bt_clear(): 
    global expression 
    expression = "" 
    input_text.set("")
 
# 'bt_equal':This method calculates the expression 
# present in input field
 
def bt_equal():
    global expression
    result = str(eval(expression)) # 'eval':This function is used to evaluates the string expression directly
    input_text.set(result)
    expression = ""




def sci_cal():
    global expression
    expression = ""
    num = expression 
    if num in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F" "(", ")", "00"]:
        value += num
        try:
            ans = str(eval(value))
        except:
            ans = "Invalid Expression"

    elif num in ["+", "-", "/", "*", ".", "1/x", "sgn("]:
        value += num

    elif num in ["asin(", "acos(", "atan(", "sin(", "cos(", "tan("]:
        value += "math." + num

    elif num == "^":
        value += "**"

    elif num == "%":
        value += "/100"
        try:
            ans = str(eval(value))
        except:
             ans = "Invalid Expression"
    elif num == "^2":
        value += "**2"
        try:
            ans = str(eval(value))
        except:
            ans = "Invalid Expression"
    elif num == "^3":
        value += "**3"
        try:
            ans = str(eval(value))
        except:
            ans = "Invalid Expression"

    elif num == "√(":
        value += "math.sqrt("

    elif num == "e":
        value += "math.e"
        try:
            ans = str(eval(value))
        except:
            ans = "Invalid Expression"
    elif num == "π":
        value += "math.pi"
        try:
            ans = str(eval(value))
        except:
            ans = "Invalid Expression"
    elif num == "log(":
        value += "math.log10("
    elif num == "ln(":
        value += "math.log("
    elif num == "e^":
        value += "math.e**"
    elif num == "A":
        value += "10"
    elif num == "B":
        value += "11"
    elif num == "C":
        value += "12"
    elif num == "D":
        value += "13"
    elif num == "E":
        value += "14"
    elif num == "F":
        value += "15"
    elif num == "1/x":
        value += "*0.1"
    elif num == "A":
        value += 10
        
tk.Label(f0, text="1").grid(row=1, column=5)
tk.Label(f0, text="2").grid(row=2, column=6)
tk.Label(f0, text="3").grid(row=3, column=7)
tk.Label(f0, text="4").grid(row=7, column=8)
tk.Label(f0, text="5").grid(row=4, column=9)
tk.Label(f0, text="6").grid(row=1, column=10)

efrm = ttk.Frame(f0, height=50, width=100)
efrm.grid(row=1, column=0, columnspan=3, rowspan=4)
input_text = tk.Entry(f0)
input_text.grid(row=1, column=1)
input2_text = tk.Entry(f0)
input2_text.grid(row=1, column=2)
input3_text = tk.Entry(f0)
input3_text.grid(row=1, column=3)
input4_text = tk.Entry(f0)
input4_text(row=1, column=4)
 
 
clear = Button(btnfrm, text = "C", fg = "black", width = 10, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: bt_clear()).grid(row = 3, column = 0, columnspan = 3, padx = 1, pady = 1)
 
divide = Button(btnfrm, text = "/", fg = "black", width = 1
                , height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("/")).grid(row = 3, column = 3, padx = 1, pady = 1)
 
# second row
 
seven = Button(btnfrm, text = "7", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(7)).grid(row = 4, column = 0, padx = 1, pady = 1)
 
eight = Button(btnfrm, text = "8", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(8)).grid(row = 4, column = 1, padx = 1, pady = 1)
 
nine = Button(btnfrm, text = "9", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(9)).grid(row = 4, column = 2, padx = 1, pady = 1)
 
multiply = Button(btnfrm, text = "*", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("*")).grid(row = 4, column = 3, padx = 1, pady = 1)
 
# third row
 
four = Button(btnfrm, text = "4", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(4)).grid(row = 5, column = 0, padx = 1, pady = 1)
 
five = Button(btnfrm, text = "5", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(5)).grid(row = 5, column = 1, padx = 1, pady = 1)
 
six = Button(btnfrm, text = "6", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(6)).grid(row = 5, column = 2, padx = 1, pady = 1)
 
minus = Button(btnfrm, text = "-", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("-")).grid(row = 5, column = 3, padx = 1, pady = 1)
 
# fourth row
 
one = Button(btnfrm, text = "1", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(1)).grid(row = 6, column = 0, padx = 1, pady = 1)
 
two = Button(btnfrm, text = "2", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(2)).grid(row = 6, column = 1, padx = 1, pady = 1)
 
three = Button(btnfrm, text = "3", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(3)).grid(row = 6, column = 2, padx = 1, pady = 1)
 
plus = Button(btnfrm, text = "+", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("+")).grid(row = 6, column = 3, padx = 1, pady = 1)
 
# fourth row
 
hexf = Button(btnfrm, text = "F", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(0)).grid(row = 7, column = 0, columnspan = 2, padx = 1, pady = 1)
 
hexe = Button(btnfrm, text = "E", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click(".")).grid(row = 7, column = 2, padx = 1, pady = 1)
 
hexd = Button(btnfrm, text = "D", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: bt_equal()).grid(row = 7, column = 3, padx = 1, pady = 1)
#





hexc = Button(btnfrm, text = "C", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(7)).grid(row = 8, column = 0, padx = 1, pady = 1)
 
hexb = Button(btnfrm, text = "B", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(8)).grid(row = 8, column = 1, padx = 1, pady = 1)
 
hexa = Button(btnfrm, text = "A", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(9)).grid(row = 8, column = 2, padx = 1, pady = 1)
 
multiply = Button(btnfrm, text = "*", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("*")).grid(row = 3, column = 3, padx = 1, pady = 1)
# 5th row
 
seven = Button(btnfrm, text = "7", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(7)).grid(row = 9, column = 3, padx = 1, pady = 1)
 
eight = Button(btnfrm, text = "8", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(8)).grid(row = 9, column = 4, padx = 1, pady = 1)
 
nine = Button(btnfrm, text = "9", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(9)).grid(row = 9, column = 5, padx = 1, pady = 1)
 
multiply = Button(btnfrm, text = "*", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("*")).grid(row = 9, column = 6, padx = 1, pady = 1)
 
# 6th row
 
four = Button(btnfrm, text = "4", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(4)).grid(row = 10, column = 3, padx = 1, pady = 1)
 
five = Button(btnfrm, text = "5", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(5)).grid(row = 10, column = 4, padx = 1, pady = 1)
 
six = Button(btnfrm, text = "6", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(6)).grid(row = 10, column = 5, padx = 1, pady = 1)
 
minus = Button(btnfrm, text = "-", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("-")).grid(row = 10, column = 6, padx = 1, pady = 1)
 
# 8th row
 
one = Button(btnfrm, text = "1", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(1)).grid(row = 11, column = 3, padx = 1, pady = 1)
 
two = Button(btnfrm, text = "2", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(2)).grid(row = 11, column = 4, padx = 1, pady = 1)
 
three = Button(btnfrm, text = "3", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(3)).grid(row = 11, column = 5, padx = 1, pady = 1)
 
plus = Button(btnfrm, text = "+", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click("+")).grid(row = 11, column = 6, padx = 1, pady = 1)
 
# 9th row
 
zero = Button(btnfrm, text = "cos", fg = "black", width = 1, height = 1, bd = 0, bg = "#fff", cursor = "hand2", command = lambda: btn_click(0)).grid(row = 12, column = 3, columnspan = 2, padx = 1, pady = 1)
 
point = Button(btnfrm, text = "sin", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: btn_click(".")).grid(row = 12, column = 4, padx = 1, pady = 1)
 
equals = Button(btnfrm, text = "π", fg = "black", width = 1, height = 1, bd = 0, bg = "#eee", cursor = "hand2", command = lambda: bt_equal()).grid(row = 12, column = 6, padx = 1, pady = 1)
 



f1 = ttk.Frame(notebook)
notebook.add(f1, text="Ohms Law")

















def fontfamily():
    pass


def foo():
    pass


def codeview():
    import codeview


# ------------------------------------------------
# TAB1 & 2 create
# ------------------------------------------------
f2 = ttk.Frame(notebook)

notebook.add(f2, text="Sci_Calc")


def lc():
    import scicalc


def keypad():
    import keypad


# --------------------------------------------------------
# TAB 3 - 10 Create
# ---------------------------------------------------------
f3 = ttk.Frame(notebook, height=100, width=200)
notebook.add(f3, text="Base # Converter")
f4 = ttk.Frame(notebook, height=100, width=100)
notebook.add(f4, text="Resonant Freq Calc")

f5 = ttk.Frame(notebook)
notebook.add(f5, text="Resistor Calc")
f6 = ttk.Frame(notebook)
notebook.add(f6, text="dBm2W&V")
f7 = ttk.Frame(notebook)
notebook.add(f7, text="7")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f9 = ttk.Frame(notebook)
notebook.add(f9, text="9")
f10 = ttk.Frame(notebook)
notebook.add(f10, text="10")

f11 = ttk.Frame(notebook)
notebook.add(f11, text="11")


def command():
    pass


def mod1():
    import Ohms_Law_Singlecalc_v2


def mod2():
    import RPcalc


def mod3():
    import IPcalc


def mod4():
    import VPcalc


def lc_freq():
    import LC_Freq


btn1 = tk.Button(f1, text="Ohms Law Calc", command=mod1).grid(column=0, row=3)
btn2 = tk.Button(f1, text="Calc Resistance & Pwr", command=mod2).grid(column=0, row=4)
btn3 = tk.Button(f1, text="Calc Current & Pwr", command=mod3).grid(column=0, row=5)
btn4 = tk.Button(f1, text="Volts & Pwr", command=mod4).grid(column=0, row=6)
btn5 = tk.Button(f1, text="b5", command=command).grid(column=0, row=7)
btn6 = tk.Button(f1, text="b6", command=command).grid(column=0, row=8)
awg_str = """  """
# --------------------------------------
#   TAB2 STUFF Sci Calc Eng, Info Label
# --------------------------------------
f2btn = tk.Button(f2, text="load calculator", bg="pink", command=lc)
f2btn.grid(row=2, column=2)
f3btn = tk.Button(f2, text="keyboard onscreen", bg="pink", command=keypad)
f3btn.grid(row=3, column=2)

txt_str= """''tera'   : (1000000000000, 10**12),
'giga'   : (1000000000, 10**9),
'mega'   : (1000000, 10**6),
'kilo'   : (1000, 10**3),
'hecta'  : (100, 10**2),
'deca'   : (10, 10),
'base'   : (1,1),
'deci'   : (0.1, 10**-1),
'centi'  : (0.01, 10**-2),
'milli'  : (0.001, 10**-3),
'micro'  : (0.000001, 10**-6),
'nano'   : (0.000000001, 10**-9)
'pico'   : (0.000000000001, 10**-12)

"""
tk.Label(f2, text=txt_str).grid(row=3, column=3)
#
# ----------------------------------------------
#  TAB3  Number Base Converter
# ----------------------------------------------


def bin2dec():
    import FBIN

    # subprocess.run("python3", "FBIN")


def fromhex():
    import FHEX


def fromoct():
    import FOCT


def frombase():
    import DEC_2_36


def dectobin():
    import Dec2Bin


def infosec():
    import Info_Section


btn11 = tk.Button(f3, text="Decimal to Base 2 to 36", command=frombase).grid(
    column=3, row=3
)
btn22 = tk.Button(f3, text="HEX to DEC BIN OCT", command=fromhex).grid(column=3, row=4)
btn33 = tk.Button(f3, text="OCTAL TO DEC, HEX, BIN", command=fromoct).grid(
    column=3, row=5
)
btn44 = tk.Button(f3, text="BIN TO OCT, DEC, HEX", command=bin2dec).grid(
    column=3, row=6
)
btn55 = tk.Button(f3, text="DEC to BIN", command=dectobin).grid(column=3, row=7)
btn66 = tk.Button(f3, text="INFO", command=infosec).grid(column=3, row=8)
tk.Label(f3, text="Base Converter").grid(column=3, row=1)


# --------------------------------------
#   TAB4 Resonant Frequency Calc
# --------------------------------------
def lc_freq():
    import LC_Freq


def lfreq():
    import Freq_L_find_C


def cfreq():
    import Freq_C_find_L


btn77 = tk.Button(f4, text="LC Resonant Freq Calc", command=lc_freq).grid(
    column=3, row=3
)
btn78 = tk.Button(f4, text="Freq L Calc find C", command=lfreq).grid(column=3, row=4)
btn79 = tk.Button(f4, text="Freq C Calc find L", command=cfreq).grid(column=3, row=5)

if __name__ == "__main__":
    r.mainloop()
from tkinter import *

from tkinter.ttk import *

window = Tk()

window.title("Welcome to LikeGeeks app")

selected = IntVar()

rad1 = Radiobutton(window,text='First', value=1, variable=selected)

rad2 = Radiobutton(window,text='Second', value=2, variable=selected)

rad3 = Radiobutton(window,text='Third', value=3, variable=selected)

def clicked():

   print(selected.get())

btn = Button(window, text="Click Me", command=clicked)

rad1.grid(column=0, row=0)

rad2.grid(column=1, row=0)

rad3.grid(column=2, row=0)

btn.grid(column=3, row=0)

window.mainloop()

#from tkinter import scrolledtext

#txt = scrolledtext.ScrolledText(window,width=40,height=10)

from tkinter import *

from tkinter import scrolledtext

window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

txt = scrolledtext.ScrolledText(window,width=40,height=10)

txt.grid(column=0,row=0)

from tkinter import *

from tkinter import messagebox

window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

def clicked():

    messagebox.showinfo('Message title', 'Message content')

btn = Button(window,text='Click here', command=clicked)

btn.grid(column=0,row=0)

from tkinter import messagebox

res = messagebox.askquestion('Message title','Message content')

res = messagebox.askyesno('Message title','Message content')

res = messagebox.askyesnocancel('Message title','Message content')

res = messagebox.askokcancel('Message title','Message content')

res = messagebox.askretrycancel('Message title','Message content')

spin = Spinbox(window, from_=0, to=100)
spin = Spinbox(window, from_=0, to=100, width=5)


from tkinter import *

window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

spin = Spinbox(window, from_=0, to=100, width=5)

spin.grid(column=0,row=0)

var =IntVar()

var.set(36)

spin = Spinbox(window, from_=0, to=100, width=5, textvariable=var)
from tkinter.ttk import Progressbar

bar = Progressbar(window, length=200)
bar['value'] = 70
window.mainloop()


window.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 982
        height = 669
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_545 = tk.Listbox(root)
        GListBox_545["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_545["font"] = ft
        GListBox_545["fg"] = "#333333"
        GListBox_545["justify"] = "center"
        GListBox_545.place(x=470, y=50, width=144, height=347)

        GListBox_955 = tk.Listbox(root)
        GListBox_955["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_955["font"] = ft
        GListBox_955["fg"] = "#333333"
        GListBox_955["justify"] = "center"
        GListBox_955.place(x=310, y=50, width=147, height=327)

        GListBox_444 = tk.Listbox(root)
        GListBox_444["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_444["font"] = ft
        GListBox_444["fg"] = "#333333"
        GListBox_444["justify"] = "center"
        GListBox_444.place(x=100, y=50, width=189, height=328)

        GListBox_565 = tk.Listbox(root)
        GListBox_565["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_565["font"] = ft
        GListBox_565["fg"] = "#333333"
        GListBox_565["justify"] = "center"
        GListBox_565.place(x=640, y=50, width=213, height=357)

        GButton_304 = tk.Button(root)
        GButton_304["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_304["font"] = ft
        GButton_304["fg"] = "#273134"
        GButton_304["justify"] = "center"
        GButton_304["text"] = "Button"
        GButton_304.place(x=10, y=20, width=70, height=25)
        GButton_304["command"] = self.GButton_304_command

        GButton_753 = tk.Button(root)
        GButton_753["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_753["font"] = ft
        GButton_753["fg"] = "#273134"
        GButton_753["justify"] = "center"
        GButton_753["text"] = "Button"
        GButton_753.place(x=10, y=50, width=70, height=25)
        GButton_753["command"] = self.GButton_753_command

        GButton_49 = tk.Button(root)
        GButton_49["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_49["font"] = ft
        GButton_49["fg"] = "#273134"
        GButton_49["justify"] = "center"
        GButton_49["text"] = "Button"
        GButton_49.place(x=10, y=80, width=70, height=25)
        GButton_49["command"] = self.GButton_49_command

        GButton_922 = tk.Button(root)
        GButton_922["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_922["font"] = ft
        GButton_922["fg"] = "#273134"
        GButton_922["justify"] = "center"
        GButton_922["text"] = "Button"
        GButton_922.place(x=10, y=110, width=70, height=25)
        GButton_922["command"] = self.GButton_922_command

        GLineEdit_233 = tk.Entry(root)
        GLineEdit_233["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_233["font"] = ft
        GLineEdit_233["fg"] = "#333333"
        GLineEdit_233["justify"] = "center"
        GLineEdit_233["text"] = "Entry"
        GLineEdit_233.place(x=110, y=20, width=188, height=30)

        GLineEdit_363 = tk.Entry(root)
        GLineEdit_363["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_363["font"] = ft
        GLineEdit_363["fg"] = "#333333"
        GLineEdit_363["justify"] = "center"
        GLineEdit_363["text"] = "Entry"
        GLineEdit_363.place(x=320, y=20, width=138, height=30)

        GLineEdit_527 = tk.Entry(root)
        GLineEdit_527["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_527["font"] = ft
        GLineEdit_527["fg"] = "#333333"
        GLineEdit_527["justify"] = "center"
        GLineEdit_527["text"] = "Entry"
        GLineEdit_527.place(x=480, y=20, width=132, height=30)

        GLineEdit_489 = tk.Entry(root)
        GLineEdit_489["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_489["font"] = ft
        GLineEdit_489["fg"] = "#333333"
        GLineEdit_489["justify"] = "center"
        GLineEdit_489["text"] = "Entry"
        GLineEdit_489.place(x=640, y=20, width=210, height=30)

        GButton_955 = tk.Button(root)
        GButton_955["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_955["font"] = ft
        GButton_955["fg"] = "#273134"
        GButton_955["justify"] = "center"
        GButton_955["text"] = "Button"
        GButton_955.place(x=10, y=140, width=70, height=25)
        GButton_955["command"] = self.GButton_955_command

        GButton_740 = tk.Button(root)
        GButton_740["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_740["font"] = ft
        GButton_740["fg"] = "#273134"
        GButton_740["justify"] = "center"
        GButton_740["text"] = "Button"
        GButton_740.place(x=10, y=170, width=70, height=25)
        GButton_740["command"] = self.GButton_740_command

        GLabel_572 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_572["font"] = ft
        GLabel_572["fg"] = "#333333"
        GLabel_572["justify"] = "center"
        GLabel_572["text"] = "label"
        GLabel_572.place(x=170, y=420, width=70, height=25)

        GLabel_141 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_141["font"] = ft
        GLabel_141["fg"] = "#333333"
        GLabel_141["justify"] = "center"
        GLabel_141["text"] = "label"
        GLabel_141.place(x=350, y=420, width=70, height=25)

        GLabel_271 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_271["font"] = ft
        GLabel_271["fg"] = "#333333"
        GLabel_271["justify"] = "center"
        GLabel_271["text"] = "label"
        GLabel_271.place(x=510, y=420, width=70, height=25)

        GLabel_775 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_775["font"] = ft
        GLabel_775["fg"] = "#333333"
        GLabel_775["justify"] = "center"
        GLabel_775["text"] = "label"
        GLabel_775.place(x=710, y=420, width=70, height=25)

        GButton_168 = tk.Button(root)
        GButton_168["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_168["font"] = ft
        GButton_168["fg"] = "#273134"
        GButton_168["justify"] = "center"
        GButton_168["text"] = "Button"
        GButton_168.place(x=10, y=200, width=70, height=25)
        GButton_168["command"] = self.GButton_168_command

        GButton_761 = tk.Button(root)
        GButton_761["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_761["font"] = ft
        GButton_761["fg"] = "#273134"
        GButton_761["justify"] = "center"
        GButton_761["text"] = "Button"
        GButton_761.place(x=10, y=230, width=70, height=25)
        GButton_761["command"] = self.GButton_761_command

        GButton_634 = tk.Button(root)
        GButton_634["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_634["font"] = ft
        GButton_634["fg"] = "#273134"
        GButton_634["justify"] = "center"
        GButton_634["text"] = "Button"
        GButton_634.place(x=10, y=260, width=70, height=25)
        GButton_634["command"] = self.GButton_634_command

        GButton_243 = tk.Button(root)
        GButton_243["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_243["font"] = ft
        GButton_243["fg"] = "#273134"
        GButton_243["justify"] = "center"
        GButton_243["text"] = "Button"
        GButton_243.place(x=10, y=290, width=70, height=25)
        GButton_243["command"] = self.GButton_243_command

        GButton_460 = tk.Button(root)
        GButton_460["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_460["font"] = ft
        GButton_460["fg"] = "#273134"
        GButton_460["justify"] = "center"
        GButton_460["text"] = "Button"
        GButton_460.place(x=10, y=320, width=70, height=25)
        GButton_460["command"] = self.GButton_460_command

        GButton_925 = tk.Button(root)
        GButton_925["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_925["font"] = ft
        GButton_925["fg"] = "#273134"
        GButton_925["justify"] = "center"
        GButton_925["text"] = "Button"
        GButton_925.place(x=10, y=350, width=70, height=25)
        GButton_925["command"] = self.GButton_925_command

        GButton_237 = tk.Button(root)
        GButton_237["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_237["font"] = ft
        GButton_237["fg"] = "#273134"
        GButton_237["justify"] = "center"
        GButton_237["text"] = "Button"
        GButton_237.place(x=10, y=380, width=70, height=25)
        GButton_237["command"] = self.GButton_237_command

        GButton_570 = tk.Button(root)
        GButton_570["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_570["font"] = ft
        GButton_570["fg"] = "#273134"
        GButton_570["justify"] = "center"
        GButton_570["text"] = "Button"
        GButton_570.place(x=110, y=460, width=70, height=25)
        GButton_570["command"] = self.GButton_570_command

        GButton_691 = tk.Button(root)
        GButton_691["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_691["font"] = ft
        GButton_691["fg"] = "#273134"
        GButton_691["justify"] = "center"
        GButton_691["text"] = "Button"
        GButton_691.place(x=360, y=470, width=70, height=25)
        GButton_691["command"] = self.GButton_691_command

        GButton_555 = tk.Button(root)
        GButton_555["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_555["font"] = ft
        GButton_555["fg"] = "#273134"
        GButton_555["justify"] = "center"
        GButton_555["text"] = "Button"
        GButton_555.place(x=110, y=500, width=70, height=25)
        GButton_555["command"] = self.GButton_555_command

        GButton_459 = tk.Button(root)
        GButton_459["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_459["font"] = ft
        GButton_459["fg"] = "#273134"
        GButton_459["justify"] = "center"
        GButton_459["text"] = "Button"
        GButton_459.place(x=110, y=540, width=70, height=25)
        GButton_459["command"] = self.GButton_459_command

        GButton_572 = tk.Button(root)
        GButton_572["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_572["font"] = ft
        GButton_572["fg"] = "#273134"
        GButton_572["justify"] = "center"
        GButton_572["text"] = "Button"
        GButton_572.place(x=360, y=510, width=70, height=25)
        GButton_572["command"] = self.GButton_572_command

        GButton_267 = tk.Button(root)
        GButton_267["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_267["font"] = ft
        GButton_267["fg"] = "#273134"
        GButton_267["justify"] = "center"
        GButton_267["text"] = "Button"
        GButton_267.place(x=360, y=550, width=70, height=25)
        GButton_267["command"] = self.GButton_267_command

        GButton_116 = tk.Button(root)
        GButton_116["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_116["font"] = ft
        GButton_116["fg"] = "#273134"
        GButton_116["justify"] = "center"
        GButton_116["text"] = "Button"
        GButton_116.place(x=520, y=460, width=70, height=25)
        GButton_116["command"] = self.GButton_116_command

        GButton_789 = tk.Button(root)
        GButton_789["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_789["font"] = ft
        GButton_789["fg"] = "#273134"
        GButton_789["justify"] = "center"
        GButton_789["text"] = "Button"
        GButton_789.place(x=520, y=500, width=70, height=25)
        GButton_789["command"] = self.GButton_789_command

        GButton_286 = tk.Button(root)
        GButton_286["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_286["font"] = ft
        GButton_286["fg"] = "#273134"
        GButton_286["justify"] = "center"
        GButton_286["text"] = "Button"
        GButton_286.place(x=520, y=550, width=70, height=25)
        GButton_286["command"] = self.GButton_286_command

        GButton_192 = tk.Button(root)
        GButton_192["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_192["font"] = ft
        GButton_192["fg"] = "#273134"
        GButton_192["justify"] = "center"
        GButton_192["text"] = "Button"
        GButton_192.place(x=710, y=460, width=70, height=25)
        GButton_192["command"] = self.GButton_192_command

        GButton_666 = tk.Button(root)
        GButton_666["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_666["font"] = ft
        GButton_666["fg"] = "#273134"
        GButton_666["justify"] = "center"
        GButton_666["text"] = "Button"
        GButton_666.place(x=710, y=500, width=70, height=25)
        GButton_666["command"] = self.GButton_666_command

        GButton_786 = tk.Button(root)
        GButton_786["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_786["font"] = ft
        GButton_786["fg"] = "#273134"
        GButton_786["justify"] = "center"
        GButton_786["text"] = "Button"
        GButton_786.place(x=710, y=550, width=70, height=25)
        GButton_786["command"] = self.GButton_786_command

        GRadio_811 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_811["font"] = ft
        GRadio_811["fg"] = "#333333"
        GRadio_811["justify"] = "center"
        GRadio_811["text"] = "RadioButton"
        GRadio_811.place(x=880, y=20, width=85, height=25)
        GRadio_811["command"] = self.GRadio_811_command

        GRadio_500 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_500["font"] = ft
        GRadio_500["fg"] = "#333333"
        GRadio_500["justify"] = "center"
        GRadio_500["text"] = "RadioButton"
        GRadio_500.place(x=880, y=40, width=85, height=25)
        GRadio_500["command"] = self.GRadio_500_command

        GRadio_398 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_398["font"] = ft
        GRadio_398["fg"] = "#333333"
        GRadio_398["justify"] = "center"
        GRadio_398["text"] = "RadioButton"
        GRadio_398.place(x=880, y=60, width=85, height=25)
        GRadio_398["command"] = self.GRadio_398_command

        GRadio_414 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_414["font"] = ft
        GRadio_414["fg"] = "#333333"
        GRadio_414["justify"] = "center"
        GRadio_414["text"] = "RadioButton"
        GRadio_414.place(x=880, y=80, width=85, height=25)
        GRadio_414["command"] = self.GRadio_414_command

        GRadio_727 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_727["font"] = ft
        GRadio_727["fg"] = "#333333"
        GRadio_727["justify"] = "center"
        GRadio_727["text"] = "RadioButton"
        GRadio_727.place(x=880, y=100, width=85, height=25)
        GRadio_727["command"] = self.GRadio_727_command

        GRadio_473 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_473["font"] = ft
        GRadio_473["fg"] = "#333333"
        GRadio_473["justify"] = "center"
        GRadio_473["text"] = "RadioButton"
        GRadio_473.place(x=880, y=120, width=85, height=25)
        GRadio_473["command"] = self.GRadio_473_command

        GCheckBox_183 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_183["font"] = ft
        GCheckBox_183["fg"] = "#333333"
        GCheckBox_183["justify"] = "center"
        GCheckBox_183["text"] = "CheckBox"
        GCheckBox_183.place(x=850, y=450, width=70, height=25)
        GCheckBox_183["offvalue"] = "0"
        GCheckBox_183["onvalue"] = "1"
        GCheckBox_183["command"] = self.GCheckBox_183_command

        GCheckBox_632 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_632["font"] = ft
        GCheckBox_632["fg"] = "#333333"
        GCheckBox_632["justify"] = "center"
        GCheckBox_632["text"] = "CheckBox"
        GCheckBox_632.place(x=850, y=470, width=70, height=25)
        GCheckBox_632["offvalue"] = "0"
        GCheckBox_632["onvalue"] = "1"
        GCheckBox_632["command"] = self.GCheckBox_632_command

        GCheckBox_656 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_656["font"] = ft
        GCheckBox_656["fg"] = "#333333"
        GCheckBox_656["justify"] = "center"
        GCheckBox_656["text"] = "CheckBox"
        GCheckBox_656.place(x=120, y=590, width=70, height=25)
        GCheckBox_656["offvalue"] = "0"
        GCheckBox_656["onvalue"] = "1"
        GCheckBox_656["command"] = self.GCheckBox_656_command

        GCheckBox_648 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_648["font"] = ft
        GCheckBox_648["fg"] = "#333333"
        GCheckBox_648["justify"] = "center"
        GCheckBox_648["text"] = "CheckBox"
        GCheckBox_648.place(x=360, y=590, width=70, height=25)
        GCheckBox_648["offvalue"] = "0"
        GCheckBox_648["onvalue"] = "1"
        GCheckBox_648["command"] = self.GCheckBox_648_command

        GCheckBox_225 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_225["font"] = ft
        GCheckBox_225["fg"] = "#333333"
        GCheckBox_225["justify"] = "center"
        GCheckBox_225["text"] = "CheckBox"
        GCheckBox_225.place(x=510, y=590, width=70, height=25)
        GCheckBox_225["offvalue"] = "0"
        GCheckBox_225["onvalue"] = "1"
        GCheckBox_225["command"] = self.GCheckBox_225_command

        GCheckBox_3 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_3["font"] = ft
        GCheckBox_3["fg"] = "#333333"
        GCheckBox_3["justify"] = "center"
        GCheckBox_3["text"] = "CheckBox"
        GCheckBox_3.place(x=710, y=590, width=70, height=25)
        GCheckBox_3["offvalue"] = "0"
        GCheckBox_3["onvalue"] = "1"
        GCheckBox_3["command"] = self.GCheckBox_3_command

        GCheckBox_484 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_484["font"] = ft
        GCheckBox_484["fg"] = "#333333"
        GCheckBox_484["justify"] = "center"
        GCheckBox_484["text"] = "CheckBox"
        GCheckBox_484.place(x=850, y=490, width=70, height=25)
        GCheckBox_484["offvalue"] = "0"
        GCheckBox_484["onvalue"] = "1"
        GCheckBox_484["command"] = self.GCheckBox_484_command

        GCheckBox_125 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_125["font"] = ft
        GCheckBox_125["fg"] = "#333333"
        GCheckBox_125["justify"] = "center"
        GCheckBox_125["text"] = "CheckBox"
        GCheckBox_125.place(x=850, y=510, width=70, height=25)
        GCheckBox_125["offvalue"] = "0"
        GCheckBox_125["onvalue"] = "1"
        GCheckBox_125["command"] = self.GCheckBox_125_command

        GCheckBox_190 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_190["font"] = ft
        GCheckBox_190["fg"] = "#333333"
        GCheckBox_190["justify"] = "center"
        GCheckBox_190["text"] = "CheckBox"
        GCheckBox_190.place(x=850, y=530, width=70, height=25)
        GCheckBox_190["offvalue"] = "0"
        GCheckBox_190["onvalue"] = "1"
        GCheckBox_190["command"] = self.GCheckBox_190_command

        GRadio_437 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_437["font"] = ft
        GRadio_437["fg"] = "#333333"
        GRadio_437["justify"] = "center"
        GRadio_437["text"] = "RadioButton"
        GRadio_437.place(x=880, y=140, width=85, height=25)
        GRadio_437["command"] = self.GRadio_437_command

        GRadio_887 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_887["font"] = ft
        GRadio_887["fg"] = "#333333"
        GRadio_887["justify"] = "center"
        GRadio_887["text"] = "RadioButton"
        GRadio_887.place(x=880, y=160, width=85, height=25)
        GRadio_887["command"] = self.GRadio_887_command

        GButton_449 = tk.Button(root)
        GButton_449["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_449["font"] = ft
        GButton_449["fg"] = "#273134"
        GButton_449["justify"] = "center"
        GButton_449["text"] = "Button"
        GButton_449.place(x=10, y=410, width=70, height=25)
        GButton_449["command"] = self.GButton_449_command

        GButton_377 = tk.Button(root)
        GButton_377["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_377["font"] = ft
        GButton_377["fg"] = "#273134"
        GButton_377["justify"] = "center"
        GButton_377["text"] = "Button"
        GButton_377.place(x=10, y=440, width=70, height=25)
        GButton_377["command"] = self.GButton_377_command

        GButton_938 = tk.Button(root)
        GButton_938["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_938["font"] = ft
        GButton_938["fg"] = "#273134"
        GButton_938["justify"] = "center"
        GButton_938["text"] = "Button"
        GButton_938.place(x=10, y=470, width=70, height=25)
        GButton_938["command"] = self.GButton_938_command

        GButton_603 = tk.Button(root)
        GButton_603["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_603["font"] = ft
        GButton_603["fg"] = "#273134"
        GButton_603["justify"] = "center"
        GButton_603["text"] = "Button"
        GButton_603.place(x=10, y=500, width=70, height=25)
        GButton_603["command"] = self.GButton_603_command

        GButton_506 = tk.Button(root)
        GButton_506["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_506["font"] = ft
        GButton_506["fg"] = "#273134"
        GButton_506["justify"] = "center"
        GButton_506["text"] = "Button"
        GButton_506.place(x=10, y=530, width=70, height=25)
        GButton_506["command"] = self.GButton_506_command

    def GButton_304_command(self):
        print("command")

    def GButton_753_command(self):
        print("command")

    def GButton_49_command(self):
        print("command")

    def GButton_922_command(self):
        print("command")

    def GButton_955_command(self):
        print("command")

    def GButton_740_command(self):
        print("command")

    def GButton_168_command(self):
        print("command")

    def GButton_761_command(self):
        print("command")

    def GButton_634_command(self):
        print("command")

    def GButton_243_command(self):
        print("command")

    def GButton_460_command(self):
        print("command")

    def GButton_925_command(self):
        print("command")

    def GButton_237_command(self):
        print("command")

    def GButton_570_command(self):
        print("command")

    def GButton_691_command(self):
        print("command")

    def GButton_555_command(self):
        print("command")

    def GButton_459_command(self):
        print("command")

    def GButton_572_command(self):
        print("command")

    def GButton_267_command(self):
        print("command")

    def GButton_116_command(self):
        print("command")

    def GButton_789_command(self):
        print("command")

    def GButton_286_command(self):
        print("command")

    def GButton_192_command(self):
        print("command")

    def GButton_666_command(self):
        print("command")

    def GButton_786_command(self):
        print("command")

    def GRadio_811_command(self):
        print("command")

    def GRadio_500_command(self):
        print("command")

    def GRadio_398_command(self):
        print("command")

    def GRadio_414_command(self):
        print("command")

    def GRadio_727_command(self):
        print("command")

    def GRadio_473_command(self):
        print("command")

    def GCheckBox_183_command(self):
        print("command")

    def GCheckBox_632_command(self):
        print("command")

    def GCheckBox_656_command(self):
        print("command")

    def GCheckBox_648_command(self):
        print("command")

    def GCheckBox_225_command(self):
        print("command")

    def GCheckBox_3_command(self):
        print("command")

    def GCheckBox_484_command(self):
        print("command")

    def GCheckBox_125_command(self):
        print("command")

    def GCheckBox_190_command(self):
        print("command")

    def GRadio_437_command(self):
        print("command")

    def GRadio_887_command(self):
        print("command")

    def GButton_449_command(self):
        print("command")

    def GButton_377_command(self):
        print("command")

    def GButton_938_command(self):
        print("command")

    def GButton_603_command(self):
        print("command")

    def GButton_506_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 982
        height = 669
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_545 = tk.Listbox(root)
        GListBox_545["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_545["font"] = ft
        GListBox_545["fg"] = "#333333"
        GListBox_545["justify"] = "center"
        GListBox_545.place(x=470, y=50, width=144, height=347)

        GListBox_955 = tk.Listbox(root)
        GListBox_955["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_955["font"] = ft
        GListBox_955["fg"] = "#333333"
        GListBox_955["justify"] = "center"
        GListBox_955.place(x=310, y=50, width=147, height=327)

        GListBox_444 = tk.Listbox(root)
        GListBox_444["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_444["font"] = ft
        GListBox_444["fg"] = "#333333"
        GListBox_444["justify"] = "center"
        GListBox_444.place(x=100, y=50, width=189, height=328)

        GListBox_565 = tk.Listbox(root)
        GListBox_565["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_565["font"] = ft
        GListBox_565["fg"] = "#333333"
        GListBox_565["justify"] = "center"
        GListBox_565.place(x=640, y=50, width=213, height=357)

        GButton_304 = tk.Button(root)
        GButton_304["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_304["font"] = ft
        GButton_304["fg"] = "#273134"
        GButton_304["justify"] = "center"
        GButton_304["text"] = "Button"
        GButton_304.place(x=10, y=20, width=70, height=25)
        GButton_304["command"] = self.GButton_304_command

        GButton_753 = tk.Button(root)
        GButton_753["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_753["font"] = ft
        GButton_753["fg"] = "#273134"
        GButton_753["justify"] = "center"
        GButton_753["text"] = "Button"
        GButton_753.place(x=10, y=50, width=70, height=25)
        GButton_753["command"] = self.GButton_753_command

        GButton_49 = tk.Button(root)
        GButton_49["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_49["font"] = ft
        GButton_49["fg"] = "#273134"
        GButton_49["justify"] = "center"
        GButton_49["text"] = "Button"
        GButton_49.place(x=10, y=80, width=70, height=25)
        GButton_49["command"] = self.GButton_49_command

        GButton_922 = tk.Button(root)
        GButton_922["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_922["font"] = ft
        GButton_922["fg"] = "#273134"
        GButton_922["justify"] = "center"
        GButton_922["text"] = "Button"
        GButton_922.place(x=10, y=110, width=70, height=25)
        GButton_922["command"] = self.GButton_922_command

        GLineEdit_233 = tk.Entry(root)
        GLineEdit_233["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_233["font"] = ft
        GLineEdit_233["fg"] = "#333333"
        GLineEdit_233["justify"] = "center"
        GLineEdit_233["text"] = "Entry"
        GLineEdit_233.place(x=110, y=20, width=188, height=30)

        GLineEdit_363 = tk.Entry(root)
        GLineEdit_363["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_363["font"] = ft
        GLineEdit_363["fg"] = "#333333"
        GLineEdit_363["justify"] = "center"
        GLineEdit_363["text"] = "Entry"
        GLineEdit_363.place(x=320, y=20, width=138, height=30)

        GLineEdit_527 = tk.Entry(root)
        GLineEdit_527["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_527["font"] = ft
        GLineEdit_527["fg"] = "#333333"
        GLineEdit_527["justify"] = "center"
        GLineEdit_527["text"] = "Entry"
        GLineEdit_527.place(x=480, y=20, width=132, height=30)

        GLineEdit_489 = tk.Entry(root)
        GLineEdit_489["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_489["font"] = ft
        GLineEdit_489["fg"] = "#333333"
        GLineEdit_489["justify"] = "center"
        GLineEdit_489["text"] = "Entry"
        GLineEdit_489.place(x=640, y=20, width=210, height=30)

        GButton_955 = tk.Button(root)
        GButton_955["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_955["font"] = ft
        GButton_955["fg"] = "#273134"
        GButton_955["justify"] = "center"
        GButton_955["text"] = "Button"
        GButton_955.place(x=10, y=140, width=70, height=25)
        GButton_955["command"] = self.GButton_955_command

        GButton_740 = tk.Button(root)
        GButton_740["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_740["font"] = ft
        GButton_740["fg"] = "#273134"
        GButton_740["justify"] = "center"
        GButton_740["text"] = "Button"
        GButton_740.place(x=10, y=170, width=70, height=25)
        GButton_740["command"] = self.GButton_740_command

        GLabel_572 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_572["font"] = ft
        GLabel_572["fg"] = "#333333"
        GLabel_572["justify"] = "center"
        GLabel_572["text"] = "label"
        GLabel_572.place(x=170, y=420, width=70, height=25)

        GLabel_141 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_141["font"] = ft
        GLabel_141["fg"] = "#333333"
        GLabel_141["justify"] = "center"
        GLabel_141["text"] = "label"
        GLabel_141.place(x=350, y=420, width=70, height=25)

        GLabel_271 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_271["font"] = ft
        GLabel_271["fg"] = "#333333"
        GLabel_271["justify"] = "center"
        GLabel_271["text"] = "label"
        GLabel_271.place(x=510, y=420, width=70, height=25)

        GLabel_775 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_775["font"] = ft
        GLabel_775["fg"] = "#333333"
        GLabel_775["justify"] = "center"
        GLabel_775["text"] = "label"
        GLabel_775.place(x=710, y=420, width=70, height=25)

        GButton_168 = tk.Button(root)
        GButton_168["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_168["font"] = ft
        GButton_168["fg"] = "#273134"
        GButton_168["justify"] = "center"
        GButton_168["text"] = "Button"
        GButton_168.place(x=10, y=200, width=70, height=25)
        GButton_168["command"] = self.GButton_168_command

        GButton_761 = tk.Button(root)
        GButton_761["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_761["font"] = ft
        GButton_761["fg"] = "#273134"
        GButton_761["justify"] = "center"
        GButton_761["text"] = "Button"
        GButton_761.place(x=10, y=230, width=70, height=25)
        GButton_761["command"] = self.GButton_761_command

        GButton_634 = tk.Button(root)
        GButton_634["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_634["font"] = ft
        GButton_634["fg"] = "#273134"
        GButton_634["justify"] = "center"
        GButton_634["text"] = "Button"
        GButton_634.place(x=10, y=260, width=70, height=25)
        GButton_634["command"] = self.GButton_634_command

        GButton_243 = tk.Button(root)
        GButton_243["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_243["font"] = ft
        GButton_243["fg"] = "#273134"
        GButton_243["justify"] = "center"
        GButton_243["text"] = "Button"
        GButton_243.place(x=10, y=290, width=70, height=25)
        GButton_243["command"] = self.GButton_243_command

        GButton_460 = tk.Button(root)
        GButton_460["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_460["font"] = ft
        GButton_460["fg"] = "#273134"
        GButton_460["justify"] = "center"
        GButton_460["text"] = "Button"
        GButton_460.place(x=10, y=320, width=70, height=25)
        GButton_460["command"] = self.GButton_460_command

        GButton_925 = tk.Button(root)
        GButton_925["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_925["font"] = ft
        GButton_925["fg"] = "#273134"
        GButton_925["justify"] = "center"
        GButton_925["text"] = "Button"
        GButton_925.place(x=10, y=350, width=70, height=25)
        GButton_925["command"] = self.GButton_925_command

        GButton_237 = tk.Button(root)
        GButton_237["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_237["font"] = ft
        GButton_237["fg"] = "#273134"
        GButton_237["justify"] = "center"
        GButton_237["text"] = "Button"
        GButton_237.place(x=10, y=380, width=70, height=25)
        GButton_237["command"] = self.GButton_237_command

        GButton_570 = tk.Button(root)
        GButton_570["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_570["font"] = ft
        GButton_570["fg"] = "#273134"
        GButton_570["justify"] = "center"
        GButton_570["text"] = "Button"
        GButton_570.place(x=110, y=460, width=70, height=25)
        GButton_570["command"] = self.GButton_570_command

        GButton_691 = tk.Button(root)
        GButton_691["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_691["font"] = ft
        GButton_691["fg"] = "#273134"
        GButton_691["justify"] = "center"
        GButton_691["text"] = "Button"
        GButton_691.place(x=360, y=470, width=70, height=25)
        GButton_691["command"] = self.GButton_691_command

        GButton_555 = tk.Button(root)
        GButton_555["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_555["font"] = ft
        GButton_555["fg"] = "#273134"
        GButton_555["justify"] = "center"
        GButton_555["text"] = "Button"
        GButton_555.place(x=110, y=500, width=70, height=25)
        GButton_555["command"] = self.GButton_555_command

        GButton_459 = tk.Button(root)
        GButton_459["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_459["font"] = ft
        GButton_459["fg"] = "#273134"
        GButton_459["justify"] = "center"
        GButton_459["text"] = "Button"
        GButton_459.place(x=110, y=540, width=70, height=25)
        GButton_459["command"] = self.GButton_459_command

        GButton_572 = tk.Button(root)
        GButton_572["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_572["font"] = ft
        GButton_572["fg"] = "#273134"
        GButton_572["justify"] = "center"
        GButton_572["text"] = "Button"
        GButton_572.place(x=360, y=510, width=70, height=25)
        GButton_572["command"] = self.GButton_572_command

        GButton_267 = tk.Button(root)
        GButton_267["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_267["font"] = ft
        GButton_267["fg"] = "#273134"
        GButton_267["justify"] = "center"
        GButton_267["text"] = "Button"
        GButton_267.place(x=360, y=550, width=70, height=25)
        GButton_267["command"] = self.GButton_267_command

        GButton_116 = tk.Button(root)
        GButton_116["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_116["font"] = ft
        GButton_116["fg"] = "#273134"
        GButton_116["justify"] = "center"
        GButton_116["text"] = "Button"
        GButton_116.place(x=520, y=460, width=70, height=25)
        GButton_116["command"] = self.GButton_116_command

        GButton_789 = tk.Button(root)
        GButton_789["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_789["font"] = ft
        GButton_789["fg"] = "#273134"
        GButton_789["justify"] = "center"
        GButton_789["text"] = "Button"
        GButton_789.place(x=520, y=500, width=70, height=25)
        GButton_789["command"] = self.GButton_789_command

        GButton_286 = tk.Button(root)
        GButton_286["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_286["font"] = ft
        GButton_286["fg"] = "#273134"
        GButton_286["justify"] = "center"
        GButton_286["text"] = "Button"
        GButton_286.place(x=520, y=550, width=70, height=25)
        GButton_286["command"] = self.GButton_286_command

        GButton_192 = tk.Button(root)
        GButton_192["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_192["font"] = ft
        GButton_192["fg"] = "#273134"
        GButton_192["justify"] = "center"
        GButton_192["text"] = "Button"
        GButton_192.place(x=710, y=460, width=70, height=25)
        GButton_192["command"] = self.GButton_192_command

        GButton_666 = tk.Button(root)
        GButton_666["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_666["font"] = ft
        GButton_666["fg"] = "#273134"
        GButton_666["justify"] = "center"
        GButton_666["text"] = "Button"
        GButton_666.place(x=710, y=500, width=70, height=25)
        GButton_666["command"] = self.GButton_666_command

        GButton_786 = tk.Button(root)
        GButton_786["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_786["font"] = ft
        GButton_786["fg"] = "#273134"
        GButton_786["justify"] = "center"
        GButton_786["text"] = "Button"
        GButton_786.place(x=710, y=550, width=70, height=25)
        GButton_786["command"] = self.GButton_786_command

        GRadio_811 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_811["font"] = ft
        GRadio_811["fg"] = "#333333"
        GRadio_811["justify"] = "center"
        GRadio_811["text"] = "RadioButton"
        GRadio_811.place(x=880, y=20, width=85, height=25)
        GRadio_811["command"] = self.GRadio_811_command

        GRadio_500 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_500["font"] = ft
        GRadio_500["fg"] = "#333333"
        GRadio_500["justify"] = "center"
        GRadio_500["text"] = "RadioButton"
        GRadio_500.place(x=880, y=40, width=85, height=25)
        GRadio_500["command"] = self.GRadio_500_command

        GRadio_398 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_398["font"] = ft
        GRadio_398["fg"] = "#333333"
        GRadio_398["justify"] = "center"
        GRadio_398["text"] = "RadioButton"
        GRadio_398.place(x=880, y=60, width=85, height=25)
        GRadio_398["command"] = self.GRadio_398_command

        GRadio_414 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_414["font"] = ft
        GRadio_414["fg"] = "#333333"
        GRadio_414["justify"] = "center"
        GRadio_414["text"] = "RadioButton"
        GRadio_414.place(x=880, y=80, width=85, height=25)
        GRadio_414["command"] = self.GRadio_414_command

        GRadio_727 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_727["font"] = ft
        GRadio_727["fg"] = "#333333"
        GRadio_727["justify"] = "center"
        GRadio_727["text"] = "RadioButton"
        GRadio_727.place(x=880, y=100, width=85, height=25)
        GRadio_727["command"] = self.GRadio_727_command

        GRadio_473 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_473["font"] = ft
        GRadio_473["fg"] = "#333333"
        GRadio_473["justify"] = "center"
        GRadio_473["text"] = "RadioButton"
        GRadio_473.place(x=880, y=120, width=85, height=25)
        GRadio_473["command"] = self.GRadio_473_command

        GCheckBox_183 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_183["font"] = ft
        GCheckBox_183["fg"] = "#333333"
        GCheckBox_183["justify"] = "center"
        GCheckBox_183["text"] = "CheckBox"
        GCheckBox_183.place(x=850, y=450, width=70, height=25)
        GCheckBox_183["offvalue"] = "0"
        GCheckBox_183["onvalue"] = "1"
        GCheckBox_183["command"] = self.GCheckBox_183_command

        GCheckBox_632 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_632["font"] = ft
        GCheckBox_632["fg"] = "#333333"
        GCheckBox_632["justify"] = "center"
        GCheckBox_632["text"] = "CheckBox"
        GCheckBox_632.place(x=850, y=470, width=70, height=25)
        GCheckBox_632["offvalue"] = "0"
        GCheckBox_632["onvalue"] = "1"
        GCheckBox_632["command"] = self.GCheckBox_632_command

        GCheckBox_656 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_656["font"] = ft
        GCheckBox_656["fg"] = "#333333"
        GCheckBox_656["justify"] = "center"
        GCheckBox_656["text"] = "CheckBox"
        GCheckBox_656.place(x=120, y=590, width=70, height=25)
        GCheckBox_656["offvalue"] = "0"
        GCheckBox_656["onvalue"] = "1"
        GCheckBox_656["command"] = self.GCheckBox_656_command

        GCheckBox_648 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_648["font"] = ft
        GCheckBox_648["fg"] = "#333333"
        GCheckBox_648["justify"] = "center"
        GCheckBox_648["text"] = "CheckBox"
        GCheckBox_648.place(x=360, y=590, width=70, height=25)
        GCheckBox_648["offvalue"] = "0"
        GCheckBox_648["onvalue"] = "1"
        GCheckBox_648["command"] = self.GCheckBox_648_command

        GCheckBox_225 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_225["font"] = ft
        GCheckBox_225["fg"] = "#333333"
        GCheckBox_225["justify"] = "center"
        GCheckBox_225["text"] = "CheckBox"
        GCheckBox_225.place(x=510, y=590, width=70, height=25)
        GCheckBox_225["offvalue"] = "0"
        GCheckBox_225["onvalue"] = "1"
        GCheckBox_225["command"] = self.GCheckBox_225_command

        GCheckBox_3 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_3["font"] = ft
        GCheckBox_3["fg"] = "#333333"
        GCheckBox_3["justify"] = "center"
        GCheckBox_3["text"] = "CheckBox"
        GCheckBox_3.place(x=710, y=590, width=70, height=25)
        GCheckBox_3["offvalue"] = "0"
        GCheckBox_3["onvalue"] = "1"
        GCheckBox_3["command"] = self.GCheckBox_3_command

        GCheckBox_484 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_484["font"] = ft
        GCheckBox_484["fg"] = "#333333"
        GCheckBox_484["justify"] = "center"
        GCheckBox_484["text"] = "CheckBox"
        GCheckBox_484.place(x=850, y=490, width=70, height=25)
        GCheckBox_484["offvalue"] = "0"
        GCheckBox_484["onvalue"] = "1"
        GCheckBox_484["command"] = self.GCheckBox_484_command

        GCheckBox_125 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_125["font"] = ft
        GCheckBox_125["fg"] = "#333333"
        GCheckBox_125["justify"] = "center"
        GCheckBox_125["text"] = "CheckBox"
        GCheckBox_125.place(x=850, y=510, width=70, height=25)
        GCheckBox_125["offvalue"] = "0"
        GCheckBox_125["onvalue"] = "1"
        GCheckBox_125["command"] = self.GCheckBox_125_command

        GCheckBox_190 = tk.Checkbutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GCheckBox_190["font"] = ft
        GCheckBox_190["fg"] = "#333333"
        GCheckBox_190["justify"] = "center"
        GCheckBox_190["text"] = "CheckBox"
        GCheckBox_190.place(x=850, y=530, width=70, height=25)
        GCheckBox_190["offvalue"] = "0"
        GCheckBox_190["onvalue"] = "1"
        GCheckBox_190["command"] = self.GCheckBox_190_command

        GRadio_437 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_437["font"] = ft
        GRadio_437["fg"] = "#333333"
        GRadio_437["justify"] = "center"
        GRadio_437["text"] = "RadioButton"
        GRadio_437.place(x=880, y=140, width=85, height=25)
        GRadio_437["command"] = self.GRadio_437_command

        GRadio_887 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_887["font"] = ft
        GRadio_887["fg"] = "#333333"
        GRadio_887["justify"] = "center"
        GRadio_887["text"] = "RadioButton"
        GRadio_887.place(x=880, y=160, width=85, height=25)
        GRadio_887["command"] = self.GRadio_887_command

        GButton_449 = tk.Button(root)
        GButton_449["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_449["font"] = ft
        GButton_449["fg"] = "#273134"
        GButton_449["justify"] = "center"
        GButton_449["text"] = "Button"
        GButton_449.place(x=10, y=410, width=70, height=25)
        GButton_449["command"] = self.GButton_449_command

        GButton_377 = tk.Button(root)
        GButton_377["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_377["font"] = ft
        GButton_377["fg"] = "#273134"
        GButton_377["justify"] = "center"
        GButton_377["text"] = "Button"
        GButton_377.place(x=10, y=440, width=70, height=25)
        GButton_377["command"] = self.GButton_377_command

        GButton_938 = tk.Button(root)
        GButton_938["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_938["font"] = ft
        GButton_938["fg"] = "#273134"
        GButton_938["justify"] = "center"
        GButton_938["text"] = "Button"
        GButton_938.place(x=10, y=470, width=70, height=25)
        GButton_938["command"] = self.GButton_938_command

        GButton_603 = tk.Button(root)
        GButton_603["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_603["font"] = ft
        GButton_603["fg"] = "#273134"
        GButton_603["justify"] = "center"
        GButton_603["text"] = "Button"
        GButton_603.place(x=10, y=500, width=70, height=25)
        GButton_603["command"] = self.GButton_603_command

        GButton_506 = tk.Button(root)
        GButton_506["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_506["font"] = ft
        GButton_506["fg"] = "#273134"
        GButton_506["justify"] = "center"
        GButton_506["text"] = "Button"
        GButton_506.place(x=10, y=530, width=70, height=25)
        GButton_506["command"] = self.GButton_506_command

    def GButton_304_command(self):
        print("command")

    def GButton_753_command(self):
        print("command")

    def GButton_49_command(self):
        print("command")

    def GButton_922_command(self):
        print("command")

    def GButton_955_command(self):
        print("command")

    def GButton_740_command(self):
        print("command")

    def GButton_168_command(self):
        print("command")

    def GButton_761_command(self):
        print("command")

    def GButton_634_command(self):
        print("command")

    def GButton_243_command(self):
        print("command")

    def GButton_460_command(self):
        print("command")

    def GButton_925_command(self):
        print("command")

    def GButton_237_command(self):
        print("command")

    def GButton_570_command(self):
        print("command")

    def GButton_691_command(self):
        print("command")

    def GButton_555_command(self):
        print("command")

    def GButton_459_command(self):
        print("command")

    def GButton_572_command(self):
        print("command")

    def GButton_267_command(self):
        print("command")

    def GButton_116_command(self):
        print("command")

    def GButton_789_command(self):
        print("command")

    def GButton_286_command(self):
        print("command")

    def GButton_192_command(self):
        print("command")

    def GButton_666_command(self):
        print("command")

    def GButton_786_command(self):
        print("command")

    def GRadio_811_command(self):
        print("command")

    def GRadio_500_command(self):
        print("command")

    def GRadio_398_command(self):
        print("command")

    def GRadio_414_command(self):
        print("command")

    def GRadio_727_command(self):
        print("command")

    def GRadio_473_command(self):
        print("command")

    def GCheckBox_183_command(self):
        print("command")

    def GCheckBox_632_command(self):
        print("command")

    def GCheckBox_656_command(self):
        print("command")

    def GCheckBox_648_command(self):
        print("command")

    def GCheckBox_225_command(self):
        print("command")

    def GCheckBox_3_command(self):
        print("command")

    def GCheckBox_484_command(self):
        print("command")

    def GCheckBox_125_command(self):
        print("command")

    def GCheckBox_190_command(self):
        print("command")

    def GRadio_437_command(self):
        print("command")

    def GRadio_887_command(self):
        print("command")

    def GButton_449_command(self):
        print("command")

    def GButton_377_command(self):
        print("command")

    def GButton_938_command(self):
        print("command")

    def GButton_603_command(self):
        print("command")

    def GButton_506_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 715
        height = 655
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_800 = tk.Listbox(root)
        GListBox_800["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_800["font"] = ft
        GListBox_800["fg"] = "#333333"
        GListBox_800["justify"] = "center"
        GListBox_800.place(x=80, y=30, width=179, height=435)

        GLineEdit_582 = tk.Entry(root)
        GLineEdit_582["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_582["font"] = ft
        GLineEdit_582["fg"] = "#333333"
        GLineEdit_582["justify"] = "center"
        GLineEdit_582["text"] = "Entry"
        GLineEdit_582.place(x=80, y=470, width=416, height=34)

        GButton_553 = tk.Button(root)
        GButton_553["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_553["font"] = ft
        GButton_553["fg"] = "#273134"
        GButton_553["justify"] = "center"
        GButton_553["text"] = "Button"
        GButton_553.place(x=0, y=10, width=70, height=25)
        GButton_553["command"] = self.GButton_553_command

        GButton_679 = tk.Button(root)
        GButton_679["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_679["font"] = ft
        GButton_679["fg"] = "#273134"
        GButton_679["justify"] = "center"
        GButton_679["text"] = "Button"
        GButton_679.place(x=0, y=40, width=70, height=25)
        GButton_679["command"] = self.GButton_679_command

        GButton_82 = tk.Button(root)
        GButton_82["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_82["font"] = ft
        GButton_82["fg"] = "#273134"
        GButton_82["justify"] = "center"
        GButton_82["text"] = "Button"
        GButton_82.place(x=0, y=70, width=70, height=25)
        GButton_82["command"] = self.GButton_82_command

        GButton_441 = tk.Button(root)
        GButton_441["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_441["font"] = ft
        GButton_441["fg"] = "#273134"
        GButton_441["justify"] = "center"
        GButton_441["text"] = "Button"
        GButton_441.place(x=0, y=100, width=70, height=25)
        GButton_441["command"] = self.GButton_441_command

        GButton_922 = tk.Button(root)
        GButton_922["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_922["font"] = ft
        GButton_922["fg"] = "#273134"
        GButton_922["justify"] = "center"
        GButton_922["text"] = "Button"
        GButton_922.place(x=0, y=130, width=70, height=25)
        GButton_922["command"] = self.GButton_922_command

        GButton_506 = tk.Button(root)
        GButton_506["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_506["font"] = ft
        GButton_506["fg"] = "#273134"
        GButton_506["justify"] = "center"
        GButton_506["text"] = "Button"
        GButton_506.place(x=0, y=160, width=70, height=25)
        GButton_506["command"] = self.GButton_506_command

        GButton_995 = tk.Button(root)
        GButton_995["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_995["font"] = ft
        GButton_995["fg"] = "#273134"
        GButton_995["justify"] = "center"
        GButton_995["text"] = "Button"
        GButton_995.place(x=0, y=190, width=70, height=25)
        GButton_995["command"] = self.GButton_995_command

        GButton_570 = tk.Button(root)
        GButton_570["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_570["font"] = ft
        GButton_570["fg"] = "#273134"
        GButton_570["justify"] = "center"
        GButton_570["text"] = "Button"
        GButton_570.place(x=0, y=220, width=70, height=25)
        GButton_570["command"] = self.GButton_570_command

        GButton_172 = tk.Button(root)
        GButton_172["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_172["font"] = ft
        GButton_172["fg"] = "#273134"
        GButton_172["justify"] = "center"
        GButton_172["text"] = "Button"
        GButton_172.place(x=0, y=250, width=70, height=25)
        GButton_172["command"] = self.GButton_172_command

        GButton_653 = tk.Button(root)
        GButton_653["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_653["font"] = ft
        GButton_653["fg"] = "#273134"
        GButton_653["justify"] = "center"
        GButton_653["text"] = "Button"
        GButton_653.place(x=0, y=280, width=70, height=25)
        GButton_653["command"] = self.GButton_653_command

        GButton_93 = tk.Button(root)
        GButton_93["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_93["font"] = ft
        GButton_93["fg"] = "#273134"
        GButton_93["justify"] = "center"
        GButton_93["text"] = "Button"
        GButton_93.place(x=0, y=310, width=70, height=25)
        GButton_93["command"] = self.GButton_93_command

        GButton_518 = tk.Button(root)
        GButton_518["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_518["font"] = ft
        GButton_518["fg"] = "#273134"
        GButton_518["justify"] = "center"
        GButton_518["text"] = "Button"
        GButton_518.place(x=0, y=340, width=70, height=25)
        GButton_518["command"] = self.GButton_518_command

        GButton_62 = tk.Button(root)
        GButton_62["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_62["font"] = ft
        GButton_62["fg"] = "#273134"
        GButton_62["justify"] = "center"
        GButton_62["text"] = "Button"
        GButton_62.place(x=0, y=370, width=70, height=25)
        GButton_62["command"] = self.GButton_62_command

        GButton_159 = tk.Button(root)
        GButton_159["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_159["font"] = ft
        GButton_159["fg"] = "#273134"
        GButton_159["justify"] = "center"
        GButton_159["text"] = "Button"
        GButton_159.place(x=0, y=400, width=70, height=25)
        GButton_159["command"] = self.GButton_159_command

        GMessage_944 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_944["font"] = ft
        GMessage_944["fg"] = "#333333"
        GMessage_944["justify"] = "center"
        GMessage_944["text"] = "Message"
        GMessage_944.place(x=280, y=40, width=417, height=30)

        GMessage_761 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_761["font"] = ft
        GMessage_761["fg"] = "#333333"
        GMessage_761["justify"] = "center"
        GMessage_761["text"] = "Message"
        GMessage_761.place(x=330, y=170, width=340, height=176)

        GMessage_945 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_945["font"] = ft
        GMessage_945["fg"] = "#333333"
        GMessage_945["justify"] = "center"
        GMessage_945["text"] = "Message"
        GMessage_945.place(x=170, y=530, width=226, height=77)

        GButton_558 = tk.Button(root)
        GButton_558["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_558["font"] = ft
        GButton_558["fg"] = "#273134"
        GButton_558["justify"] = "center"
        GButton_558["text"] = "Button"
        GButton_558.place(x=0, y=590, width=70, height=25)
        GButton_558["command"] = self.GButton_558_command

        GButton_919 = tk.Button(root)
        GButton_919["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_919["font"] = ft
        GButton_919["fg"] = "#273134"
        GButton_919["justify"] = "center"
        GButton_919["text"] = "Button"
        GButton_919.place(x=0, y=500, width=70, height=25)
        GButton_919["command"] = self.GButton_919_command

        GButton_992 = tk.Button(root)
        GButton_992["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_992["font"] = ft
        GButton_992["fg"] = "#273134"
        GButton_992["justify"] = "center"
        GButton_992["text"] = "Button"
        GButton_992.place(x=0, y=530, width=70, height=25)
        GButton_992["command"] = self.GButton_992_command

        GButton_104 = tk.Button(root)
        GButton_104["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_104["font"] = ft
        GButton_104["fg"] = "#273134"
        GButton_104["justify"] = "center"
        GButton_104["text"] = "Button"
        GButton_104.place(x=0, y=560, width=70, height=25)
        GButton_104["command"] = self.GButton_104_command

        GButton_227 = tk.Button(root)
        GButton_227["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_227["font"] = ft
        GButton_227["fg"] = "#273134"
        GButton_227["justify"] = "center"
        GButton_227["text"] = "Button"
        GButton_227.place(x=630, y=610, width=70, height=25)
        GButton_227["command"] = self.GButton_227_command

        GButton_251 = tk.Button(root)
        GButton_251["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_251["font"] = ft
        GButton_251["fg"] = "#273134"
        GButton_251["justify"] = "center"
        GButton_251["text"] = "Button"
        GButton_251.place(x=550, y=610, width=70, height=25)
        GButton_251["command"] = self.GButton_251_command

    def GButton_553_command(self):
        print("command")

    def GButton_679_command(self):
        print("command")

    def GButton_82_command(self):
        print("command")

    def GButton_441_command(self):
        print("command")

    def GButton_922_command(self):
        print("command")

    def GButton_506_command(self):
        print("command")

    def GButton_995_command(self):
        print("command")

    def GButton_570_command(self):
        print("command")

    def GButton_172_command(self):
        print("command")

    def GButton_653_command(self):
        print("command")

    def GButton_93_command(self):
        print("command")

    def GButton_518_command(self):
        print("command")

    def GButton_62_command(self):
        print("command")

    def GButton_159_command(self):
        print("command")

    def GButton_558_command(self):
        print("command")

    def GButton_919_command(self):
        print("command")

    def GButton_992_command(self):
        print("command")

    def GButton_104_command(self):
        print("command")

    def GButton_227_command(self):
        print("command")

    def GButton_251_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import sys

root = tk.Tk()
root.geometry("600x600")


def get_filename(_type=""):
    "Returns the path and name of file selected"
    # _type=".txt" to get txt file name

    filename = filedialog.askopenfilename(
        initialdir=".",  # same dir of this script
        title="Select file",
        filetypes=(("", _type), ("all files", "*.*")),
    )
    return filename


# main_menu = OptionMenu(root, clicked, "C++", "Java", "Python", "Rust","Go","Ruby")
# main_menu.grid(row=1, column=2)


# filename = get_filename("")
# name = messagebox.showinfo(
# title="Name of the file you picked" , message=filename)

menubar = tk.Menu(root)
menubar.add_command(label="Click me", command=None)
menubar.add_command(label="File", command=get_filename)
menubar.add_command(label="Call", command=None)
menubar.add_command(label="Insert", command=None)
menubar.add_command(label="Run", command=None)
menubar.add_command(label="1", command=None)
menubar.add_command(label="2", command=None)
menubar.add_command(label="3", command=None)
menubar.add_command(label="4", command=None)
menubar.add_command(label="5", command=None)


root.config(menu=menubar)


if __name__ == "__main__":

    root.mainloop()
from tkinter import *
import tkinter.messagebox


def Func():
    print("Called from menu")
    tkinter.messagebox.showinfo("Menu bar", "A button was pressed from the Menubar")


def ButtonFunc():
    print("Button function called")
    tkinter.messagebox.showinfo(
        "Toolbar button", "A button was pressed from the toolbar"
    )


# Function called when Quit is pressed
def QuitWindow():
    answer = tkinter.messagebox.askquestion("Quit", "Are you sure you want to quit?")
    if answer == "yes":
        root.quit()
    else:
        print("Ignoring exit button")


# Create main window
root = Tk()
root.title("Main window")

# *** Main Menu ***
# menu bar
menuBar = Menu(root)
root.config(menu=menuBar)

# Menu item-1: File
subMenuFile = Menu(menuBar)
menuBar.add_cascade(label="File", menu=subMenuFile)
subMenuFile.add_command(label="New", command=Func)
subMenuFile.add_command(label="Save", command=Func)
subMenuFile.add_separator()
subMenuFile.add_command(label="Exit", command=QuitWindow)

# Menu item-2: Edit
subMenuEdit = Menu(menuBar)
menuBar.add_cascade(label="Edit", menu=subMenuEdit)
subMenuEdit.add_command(label="Undo", command=Func)
subMenuEdit.add_command(label="Redo", command=Func)
subMenuEdit.add_command(label="Copy", command=Func)
subMenuEdit.add_separator()
subMenuEdit.add_command(label="Cut", command=Func)
subMenuEdit.add_command(label="Paste", command=Func)

# *** Toolbar ***
toolbar = Frame(root, bg="white")

btn1 = Button(toolbar, text="Button1", command=ButtonFunc)
btn1.pack(side=LEFT, padx=2, pady=2)

btn2 = Button(toolbar, text="Button2", command=ButtonFunc)
btn2.pack(side=LEFT, padx=2, pady=2)

btn3 = Button(toolbar, text="Button3", command=ButtonFunc)
btn3.pack(side=LEFT, padx=1, pady=1)

toolbar.pack(side=TOP, fill=X)

# *** Status Bar ***
status = Label(root, text="Preparing to do nothing...", bd=1, relief=SUNKEN, anchor=W)
status.pack(side=BOTTOM, fill=X)


# Main window loop
root.mainloop()
import tkinter as tk

app = tk.Tk()
app.title("My App")
app.geometry("200x75")

message = tk.Message(text="This is a message", relief=tk.SUNKEN)
message.pack()

app.mainloop()
def clickMe(button, name, number):
    button.configure(text='Hello {} {}'.format(name.get(), number.get()))

# Button callback Clear Text   
def clearScrol(scr):
    scr.delete('1.0', tk.END)    

# Spinbox callback 
def _spin(spin, scr):
    value = spin.get()
    print(value)
    scr.insert(tk.INSERT, value + '\n')

# Checkbox callback  
def checkCallback(*ignoredArgs):
    pass

#------------------------------------------
def create_display_area():
    # add empty label for spacing 
    display_area_label = tk.Label(display_area, text="", height=2)
    display_area_label.grid(column=0, row=0)
    
    # Creating three checkbuttons
    chVarDis = tk.IntVar()
    check1 = tk.Checkbutton(ctrl_tab2, text="Disabled", variable=chVarDis, state='disabled')
    check1.select()
    check1.grid(column=0, row=0, sticky=tk.W)                 
    
    chVarUn = tk.IntVar()
    check2 = tk.Checkbutton(ctrl_tab2, text="UnChecked", variable=chVarUn)
    check2.deselect()
    check2.grid(column=1, row=0, sticky=tk.W )                  
     
    chVarEn = tk.IntVar()
    check3 = tk.Checkbutton(ctrl_tab2, text="Toggle", variable=chVarEn)
    check3.deselect()
    check3.grid(column=2, row=0, sticky=tk.W)                 

    # Create a container to hold labels
    labelsFrame = ttk.LabelFrame(ctrl_tab2, text=' Labels in a Frame ')
    labelsFrame.grid(column=0, row=7)
     
    # Place labels into the container element - vertically
    ttk.Label(labelsFrame, text="Label1").grid(column=0, row=0)
    ttk.Label(labelsFrame, text="Label2").grid(column=0, row=1)
    
    # Add some space around each label
    for child in labelsFrame.winfo_children(): 
        child.grid_configure(padx=8)
        # Container frame to hold all other widgets
    ctrl_tab = ttk.LabelFrame(display_area, text=' Mighty Python ')
    ctrl_tab.grid(column=0, row=0, padx=8, pady=4)
    
    # Adding a Label
    ttk.Label(ctrl_tab, text="Enter a name:").grid(column=0, row=0, sticky='W')
    
    # Adding a Textbox Entry widget
    name = tk.StringVar()
    nameEntered = ttk.Entry(ctrl_tab, width=12, textvariable=name)
    nameEntered.grid(column=0, row=1, sticky='W')
    
    ttk.Label(ctrl_tab, text="Choose a number:").grid(column=1, row=0)
    number = tk.StringVar()
    numberChosen = ttk.Combobox(ctrl_tab, width=12, textvariable=number)
    numberChosen['values'] = (1, 2, 4, 42, 100)
    numberChosen.grid(column=1, row=1)
    numberChosen.current(0)

    # Adding a Button
    action = ttk.Button(ctrl_tab, text="Click Me!", command= lambda: clickMe(action, name, number))   
    action.grid(column=2, row=1)
    
    # Using a scrolled Text control    
    scrolW  = 30; scrolH  =  3
    scr = scrolledtext.ScrolledText(ctrl_tab, width=scrolW, height=scrolH, wrap=tk.WORD)
    scr.grid(column=0, row=3, sticky='WE', columnspan=3)  
             
    # Adding a Spinbox widget using a set of values
    spin = Spinbox(ctrl_tab, values=(1, 2, 4, 42, 100), width=5, bd=8, command= lambda: _spin(spin, scr)) 
    spin.grid(column=0, row=2, sticky='W')  
  
    # Adding another Button
    clear = ttk.Button(ctrl_tab, text="Clear Text", command= lambda: clearScrol(scr))   
    clear.grid(column=2, row=2)

    # Adding more Feature Buttons
    startRow = 4
    for idx in range(12):
        if idx < 2:
            colIdx = idx
            col = colIdx
        else:
            col += 1
        if not idx % 3: 
            startRow += 1
            col = 0

        b = ttk.Button(ctrl_tab, text="Feature " + str(idx+1))   
        b.grid(column=col, row=startRow)   
            
ctrl_tab2 = ttk.LabelFrame(display_area, text=' Holy Grail ')
    ctrl_tab2.grid(column=0, row=0, padx=8, pady=4)
    

import tkinter as tk
from tkinter import ttk

from tkinter import *

root = tk.Tk()
frm = ttk.Frame(root, height=400, width=500)
frm.grid(row=0, column=0)
canvas = tk.Canvas(root, bg="wheat")
canvas.grid(row=1, column=1)
canvas.config(width = 200 , height = 300)
canvas2 = Canvas(root, bg="green")
canvas2.grid(row=5, column=0)
line = canvas.create_line(60,160, 140,60 , fill ='red', width = 7)
line = canvas.create_line(60,160, 150,230 , fill ='red', width = 7)
canvas2.config(width = 10 , height = 10)
line = canvas.create_line(60,60, 60,240 , fill ='red', width = 7)

line = canvas.create_line(0,160, 60,160 , fill ='black', width = 8)
line = canvas.create_line(140,200, 150,230 , fill ='red', width = 10)
line = canvas.create_line(150,230, 100,220 , fill ='red', width = 10)
def create_circle(x, y, r, canvas): #center coordinates, radius
    x0 = x - r
    y0 = y - r
    x1 = x + r
    y1 = y + r
    return canvas.create_oval(x0, y0, x1, y1, width = 7)

create_circle(100, 150, 100, canvas)










canvas3 = Canvas(root bg="red")
canvas3.grid(row=6, column=3)
canvas3.config(width = 10 , height = 10)

canvas4 = Canvas(root  bg="wheat")
canvas4.grid(row=8, column=2)
canvas4.config(width = 10, height = 10)


root.mainloop()
from tkinter import *
from random import randint


def wynik():
    w.config(text=str(v1.get() * v2.get()))
    w.config(font=("Arial", 80), foreground="#" + ("%06x" % randint(0, 16777215)))


o = Tk()
v1 = IntVar()
v2 = IntVar()

for i in range(1, 11):
    Radiobutton(o, text=str(i), variable=v1, value=i, command=wynik).grid(
        row=0, column=i
    )
    Radiobutton(o, text=str(i), variable=v2, value=i, command=wynik).grid(
        row=i, column=0
    )

w = Label(o, text="0")
w.place(x=130, y=80)
w.config(font=("Arial", 80), foreground="magenta")
o.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 600
        height = 500
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GLabel_652 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_652["font"] = ft
        GLabel_652["fg"] = "#333333"
        GLabel_652["justify"] = "center"
        GLabel_652["text"] = "label"
        GLabel_652.place(x=70, y=30, width=70, height=25)

        GLabel_148 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_148["font"] = ft
        GLabel_148["fg"] = "#333333"
        GLabel_148["justify"] = "center"
        GLabel_148["text"] = "label"
        GLabel_148.place(x=160, y=30, width=70, height=25)

        GLabel_158 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_158["font"] = ft
        GLabel_158["fg"] = "#333333"
        GLabel_158["justify"] = "center"
        GLabel_158["text"] = "label"
        GLabel_158.place(x=260, y=30, width=70, height=25)

        GLabel_373 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_373["font"] = ft
        GLabel_373["fg"] = "#333333"
        GLabel_373["justify"] = "center"
        GLabel_373["text"] = "label"
        GLabel_373.place(x=340, y=30, width=70, height=25)

        GLineEdit_70 = tk.Entry(root)
        GLineEdit_70["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_70["font"] = ft
        GLineEdit_70["fg"] = "#333333"
        GLineEdit_70["justify"] = "center"
        GLineEdit_70["text"] = "Entry"
        GLineEdit_70.place(x=70, y=80, width=70, height=25)

        GLineEdit_910 = tk.Entry(root)
        GLineEdit_910["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_910["font"] = ft
        GLineEdit_910["fg"] = "#333333"
        GLineEdit_910["justify"] = "center"
        GLineEdit_910["text"] = "Entry"
        GLineEdit_910.place(x=160, y=80, width=70, height=25)

        GLineEdit_708 = tk.Entry(root)
        GLineEdit_708["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_708["font"] = ft
        GLineEdit_708["fg"] = "#333333"
        GLineEdit_708["justify"] = "center"
        GLineEdit_708["text"] = "Entry"
        GLineEdit_708.place(x=250, y=80, width=70, height=25)

        GLineEdit_911 = tk.Entry(root)
        GLineEdit_911["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_911["font"] = ft
        GLineEdit_911["fg"] = "#333333"
        GLineEdit_911["justify"] = "center"
        GLineEdit_911["text"] = "Entry"
        GLineEdit_911.place(x=340, y=80, width=70, height=25)

        GMessage_70 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_70["font"] = ft
        GMessage_70["fg"] = "#333333"
        GMessage_70["justify"] = "center"
        GMessage_70["text"] = "Message"
        GMessage_70.place(x=70, y=140, width=338, height=35)

        GLineEdit_712 = tk.Entry(root)
        GLineEdit_712["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_712["font"] = ft
        GLineEdit_712["fg"] = "#333333"
        GLineEdit_712["justify"] = "center"
        GLineEdit_712["text"] = "Entry"
        GLineEdit_712.place(x=70, y=210, width=70, height=25)

        GLineEdit_378 = tk.Entry(root)
        GLineEdit_378["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_378["font"] = ft
        GLineEdit_378["fg"] = "#333333"
        GLineEdit_378["justify"] = "center"
        GLineEdit_378["text"] = "Entry"
        GLineEdit_378.place(x=160, y=210, width=70, height=25)

        GLineEdit_107 = tk.Entry(root)
        GLineEdit_107["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_107["font"] = ft
        GLineEdit_107["fg"] = "#333333"
        GLineEdit_107["justify"] = "center"
        GLineEdit_107["text"] = "Entry"
        GLineEdit_107.place(x=70, y=260, width=70, height=25)

        GLineEdit_620 = tk.Entry(root)
        GLineEdit_620["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_620["font"] = ft
        GLineEdit_620["fg"] = "#333333"
        GLineEdit_620["justify"] = "center"
        GLineEdit_620["text"] = "Entry"
        GLineEdit_620.place(x=160, y=260, width=70, height=25)

        GLabel_477 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_477["font"] = ft
        GLabel_477["fg"] = "#333333"
        GLabel_477["justify"] = "center"
        GLabel_477["text"] = "label"
        GLabel_477.place(x=70, y=170, width=70, height=25)

        GLabel_870 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_870["font"] = ft
        GLabel_870["fg"] = "#333333"
        GLabel_870["justify"] = "center"
        GLabel_870["text"] = "label"
        GLabel_870.place(x=160, y=170, width=70, height=25)

        GLabel_63 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_63["font"] = ft
        GLabel_63["fg"] = "#333333"
        GLabel_63["justify"] = "center"
        GLabel_63["text"] = "label"
        GLabel_63.place(x=70, y=310, width=70, height=25)

        GLabel_224 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_224["font"] = ft
        GLabel_224["fg"] = "#333333"
        GLabel_224["justify"] = "center"
        GLabel_224["text"] = "label"
        GLabel_224.place(x=160, y=310, width=70, height=25)

        GButton_478 = tk.Button(root)
        GButton_478["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_478["font"] = ft
        GButton_478["fg"] = "#273134"
        GButton_478["justify"] = "center"
        GButton_478["text"] = "Button"
        GButton_478.place(x=70, y=360, width=70, height=25)
        GButton_478["command"] = self.GButton_478_command

        GButton_383 = tk.Button(root)
        GButton_383["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_383["font"] = ft
        GButton_383["fg"] = "#273134"
        GButton_383["justify"] = "center"
        GButton_383["text"] = "Button"
        GButton_383.place(x=70, y=400, width=70, height=25)
        GButton_383["command"] = self.GButton_383_command

        GButton_47 = tk.Button(root)
        GButton_47["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_47["font"] = ft
        GButton_47["fg"] = "#273134"
        GButton_47["justify"] = "center"
        GButton_47["text"] = "Button"
        GButton_47.place(x=160, y=360, width=70, height=25)
        GButton_47["command"] = self.GButton_47_command

        GButton_272 = tk.Button(root)
        GButton_272["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_272["font"] = ft
        GButton_272["fg"] = "#273134"
        GButton_272["justify"] = "center"
        GButton_272["text"] = "Button"
        GButton_272.place(x=160, y=400, width=70, height=25)
        GButton_272["command"] = self.GButton_272_command

        GButton_880 = tk.Button(root)
        GButton_880["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_880["font"] = ft
        GButton_880["fg"] = "#273134"
        GButton_880["justify"] = "center"
        GButton_880["text"] = "Button"
        GButton_880.place(x=70, y=440, width=70, height=25)
        GButton_880["command"] = self.GButton_880_command

        GButton_745 = tk.Button(root)
        GButton_745["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_745["font"] = ft
        GButton_745["fg"] = "#273134"
        GButton_745["justify"] = "center"
        GButton_745["text"] = "Button"
        GButton_745.place(x=160, y=440, width=70, height=25)
        GButton_745["command"] = self.GButton_745_command

        GButton_81 = tk.Button(root)
        GButton_81["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_81["font"] = ft
        GButton_81["fg"] = "#273134"
        GButton_81["justify"] = "center"
        GButton_81["text"] = "Button"
        GButton_81.place(x=490, y=40, width=70, height=25)
        GButton_81["command"] = self.GButton_81_command

        GButton_522 = tk.Button(root)
        GButton_522["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_522["font"] = ft
        GButton_522["fg"] = "#273134"
        GButton_522["justify"] = "center"
        GButton_522["text"] = "Button"
        GButton_522.place(x=490, y=80, width=70, height=25)
        GButton_522["command"] = self.GButton_522_command

        GButton_595 = tk.Button(root)
        GButton_595["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_595["font"] = ft
        GButton_595["fg"] = "#273134"
        GButton_595["justify"] = "center"
        GButton_595["text"] = "Button"
        GButton_595.place(x=490, y=120, width=70, height=25)
        GButton_595["command"] = self.GButton_595_command

        GButton_694 = tk.Button(root)
        GButton_694["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_694["font"] = ft
        GButton_694["fg"] = "#273134"
        GButton_694["justify"] = "center"
        GButton_694["text"] = "Button"
        GButton_694.place(x=490, y=160, width=70, height=25)
        GButton_694["command"] = self.GButton_694_command

        GButton_5 = tk.Button(root)
        GButton_5["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_5["font"] = ft
        GButton_5["fg"] = "#273134"
        GButton_5["justify"] = "center"
        GButton_5["text"] = "Button"
        GButton_5.place(x=490, y=200, width=70, height=25)
        GButton_5["command"] = self.GButton_5_command

        GButton_909 = tk.Button(root)
        GButton_909["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_909["font"] = ft
        GButton_909["fg"] = "#273134"
        GButton_909["justify"] = "center"
        GButton_909["text"] = "Button"
        GButton_909.place(x=490, y=240, width=70, height=25)
        GButton_909["command"] = self.GButton_909_command

        GButton_566 = tk.Button(root)
        GButton_566["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_566["font"] = ft
        GButton_566["fg"] = "#273134"
        GButton_566["justify"] = "center"
        GButton_566["text"] = "Button"
        GButton_566.place(x=490, y=280, width=70, height=25)
        GButton_566["command"] = self.GButton_566_command

        GButton_231 = tk.Button(root)
        GButton_231["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_231["font"] = ft
        GButton_231["fg"] = "#273134"
        GButton_231["justify"] = "center"
        GButton_231["text"] = "Button"
        GButton_231.place(x=490, y=320, width=70, height=25)
        GButton_231["command"] = self.GButton_231_command

        GButton_207 = tk.Button(root)
        GButton_207["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_207["font"] = ft
        GButton_207["fg"] = "#273134"
        GButton_207["justify"] = "center"
        GButton_207["text"] = "Button"
        GButton_207.place(x=490, y=360, width=70, height=25)
        GButton_207["command"] = self.GButton_207_command

        GButton_872 = tk.Button(root)
        GButton_872["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_872["font"] = ft
        GButton_872["fg"] = "#273134"
        GButton_872["justify"] = "center"
        GButton_872["text"] = "Button"
        GButton_872.place(x=490, y=400, width=70, height=25)
        GButton_872["command"] = self.GButton_872_command

    def GButton_478_command(self):
        print("command")

    def GButton_383_command(self):
        print("command")

    def GButton_47_command(self):
        print("command")

    def GButton_272_command(self):
        print("command")

    def GButton_880_command(self):
        print("command")

    def GButton_745_command(self):
        print("command")

    def GButton_81_command(self):
        print("command")

    def GButton_522_command(self):
        print("command")

    def GButton_595_command(self):
        print("command")

    def GButton_694_command(self):
        print("command")

    def GButton_5_command(self):
        print("command")

    def GButton_909_command(self):
        print("command")

    def GButton_566_command(self):
        print("command")

    def GButton_231_command(self):
        print("command")

    def GButton_207_command(self):
        print("command")

    def GButton_872_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import filedialog
from tkinter import messagebox
import pyautogui as pg
import pyperclip as pc
import sys

root = tk.Tk()
root.geometry("600x600")
root.title("JH APP Clipboard Pipe")
top = Toplevel(root)
fr1 = ttk.Frame(root)
fr1.grid(row=0, column=0, rowspan=10)
fr2 = ttk.Frame(root)
fr2.grid(row=4, column=1)
fr3 = ttk.Frame(root)
fr3.grid(row=3, column=2)
fr4 = ttk.Frame(root)
fr4.grid(row=3, column=3, rowspan=10)
fr5 = ttk.Frame(root)
fr5.grid(row=3, column=4)
fr6 = ttk.Frame(root)
fr6.grid(row=3, column=5, rowspan=10)


def get_filename(_type=""):
    "Returns the path and name of file selected"
    # _type=".txt" to get txt file name

    filename = filedialog.askopenfilename(
        initialdir=".",  # same dir of this script
        title="Select file",
        filetypes=(("", _type), ("all files", "*.*")),
    )
    return filename


#
def insert1():
    lb1.insert(1, cb1.get())


def insert2():
    lb1.insert(1, cb2.get())


def insert3():
    lb1.insert(1, cb1.get())


def insert3():
    lb1.insert(1, cb1.get())


def insert4():
    lb1.insert(1, cb1.get())


def insert5():
    lb1.insert(1, cb1.get())


def clear():
    lb1.delete(0, END)


def cl():
    root.withdraw()
    root.clipboard_clear()
    root.clipboard_append(entry.get())
    root.update()
    root.deiconify()
    return


def paste():
    # pg.hotkey('alt', 'tab')  # change window
    pg.hotkey("ctrl", "v")  # ctrl-v to paste
    return


def copy():
    pg.hotkey("ctrl", "c")  # ctrl-c to copy
    return


def manager():
    pass


text1 = "www.distrowatch.com"


def auto1():
    text1 = "www.distrowatch.com"
    pg.hotkey("alt", "F3", interval=1)  # change window
    pg.typewrite("firefox")
    pg.press("enter")
    pg.moveTo(522, 120)
    pg.click(x=522, y=120)
    pg.click(x=522, y=120)
    pg.press("enter")
    pg.press("backspace")
    pc.copy(text1)
    pg.hotkey("ctrl", "v")
    pg.press("enter")


pg.click(x=100, y=200)
 pg.hotkey('F3')   # select  all
 pg.write("waterfox")
 #pg.hotkey('alt', 'tab')
 pg.hotkey('alt', 'tab')


def auto2():
    pg.hotkey("alt", "tab")
    pg.hotkey("ctrl", "alt", "t")
    pg.hotkey("ctrl", "alt", "t")
    pg.hotkey("ctrl", "alt", "t")
    pg.hotkey("shift", "ctrl", "v")


def auto3():
    pg.hotkey("alt", "tab")
    pg.hotkey("ctrl", "alt", "t")




menubar = tk.Menu(top)
menubar.add_command(label="load web", command=auto1)
menubar.add_command(label="File", command=get_filename)
menubar.add_command(label="Call", command=None)
menubar.add_command(label="Insert", command=None)
menubar.add_command(label="Run", command=None)
menubar.add_command(label="1", command=None)
menubar.add_command(label="2", command=None)
menubar.add_command(label="3", command=None)
menubar.add_command(label="4", command=None)
menubar.add_command(label="5", command=None)
#
btn1 = tk.Button(fr1, text="btn1", command=insert1)
btn1.grid(column=0, row=1)
btn2 = tk.Button(fr1, text="btn2", command=insert2)
btn2.grid(column=0, row=2)
btn3 = tk.Button(fr1, text="btn3", command=insert3)
btn3.grid(column=0, row=3)
btn4 = tk.Button(fr1, text="clear", command=clear)
btn4.grid(column=0, row=4)
btn5 = tk.Button(fr1, text="web broswer", command=auto1)
btn5.grid(column=0, row=5)
btn6 = tk.Button(fr1, text="button 6", command=None)
btn6.grid(column=0, row=6)
btn7 = tk.Button(fr1, text="button 7", command=None)
btn7.grid(column=0, row=7)
btn8 = tk.Button(fr1, text="button 8", command=None)
btn8.grid(column=0, row=8)
btn9 = tk.Button(fr1, text="button 9", command=None)
btn9.grid(column=0, row=9)
btn10 = tk.Button(fr1, text="button 10", command=None)
btn10.grid(column=0, row=10)

list1 = [
    "john.hewitt@cox.net",
    "Whobade55!",
    "john.hewitt1970@gmail.com",
    "ajolily@cox.net",
]
cb1 = ttk.Combobox(fr2, values=list1)
cb1.grid(row=3, column=1)
cb2 = ttk.Combobox(fr2, values=list1)
cb2.grid(row=4, column=1)
#
lb1 = tk.Listbox(fr5)
lb1.grid(row=3, column=4)


btn11=tk.Button(root, text='copy', command=copy)
btn11.grid(column=1, row=1)
btn12=tk.Button(root, text='auto1', command=auto1)
btn12.grid(column=1, row=2)
btn13=tk.Button(root, text='auto2', command=command)
btn13.grid(column=1, row=3)
btn14=tk.Button(root, text='button 4', command=command)
btn14.grid(column=1, row=4)
btn15=tk.Button(root, text='button 5', command=command)
btn15.grid(column=1, row=5)
btn16=tk.Button(root, text='button 6', command=command)
btn16.grid(column=1, row=6)
btn17=tk.Button(root, text='button 7', command=command)
btn17.grid(column=1, row=7)
btn18=tk.Button(root, text='button 8', command=command)
btn18.grid(column=1, row=8)
btn19=tk.Button(root, text='button 9', command=command)
btn19.grid(column=1, row=9)
btn20=tk.Button(root, text='button 10', command=command)
btn20.grid(column=1, row=10)


btn21=tk.Button(root, text='copy', command=copy)
btn21.grid(column=2, row=1)
btn22=tk.Button(root, text='auto1', command=auto1)
btn22.grid(column=2, row=2)
btn23=tk.Button(root, text='auto2', command=command)
btn23.grid(column=2, row=3)
btn24=tk.Button(root, text='button 4', command=command)
btn24.grid(column=2, row=4)
btn25=tk.Button(root, text='button 5', command=command)
btn25.grid(column=2, row=5)
btn26=tk.Button(root, text='button 6', command=command)
btn26.grid(column=2, row=6)
btn27=tk.Button(root, text='button 7', command=command)
btn27.grid(column=2, row=7)
btn28=tk.Button(root, text='button 8', command=command)
btn28.grid(column=2, row=8)
btn29=tk.Button(root, text='button 9', command=command)
btn29.grid(column=2, row=9)
btn30=tk.Button(root, text='button 10', command=command)
btn30.grid(column=2, row=10)




pag_str = """
Mouse Control Functions
The Screen and Mouse Position

Locations on your screen are referred to by X and Y Cartesian coordinates. The X coordinate starts at 0 on the left side and increases going right. Unlike in mathematics, the Y coordinate starts at 0 on the top and increases going down.

0,0       X increases -->
+---------------------------+
|                           | Y increases
|                           |     |
|   1920 x 1080 screen      |     |
|                           |     V
|                           |
|                           |
+---------------------------+ 1919, 1079

The pixel at the top-left corner is at coordinates 0, 0. If your screen’s resolution is 1920 x 1080, the pixel in the lower right corner will be 1919, 1079 (since the coordinates begin at 0, not 1).

The screen resolution size is returned by the size() function as a tuple of two integers. The current X and Y coordinates of the mouse cursor are returned by the position() function.

For example:

>>> pyautogui.size()
(1920, 1080)
>>> pyautogui.position()
(187, 567)

Here is a short Python 3 program that will constantly print out the position of the mouse cursor:

#! python3
import pyautogui, sys
print('Press Ctrl-C to quit.')
try:
    while True:
        x, y = pyautogui.position()
        positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
        print(positionStr, end='')
        print('\b' * len(positionStr), end='', flush=True)
except KeyboardInterrupt:
    print('\n')

Here is the Python 2 version:

#! python
import pyautogui, sys
print('Press Ctrl-C to quit.')
try:
    while True:
        x, y = pyautogui.position()
        positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
        print positionStr,
        print '\b' * (len(positionStr) + 2),
        sys.stdout.flush()
except KeyboardInterrupt:
    print '\n'

To check if XY coordinates are on the screen, pass them (either as two integer arguments or a single tuple/list arguments with two integers) to the onScreen() function, which will return True if they are within the screen’s boundaries and False if not. For example:

>>> pyautogui.onScreen(0, 0)
True
>>> pyautogui.onScreen(0, -1)
False
>>> pyautogui.onScreen(0, 99999999)
False
>>> pyautogui.size()
(1920, 1080)
>>> pyautogui.onScreen(1920, 1080)
False
>>> pyautogui.onScreen(1919, 1079)
True

Mouse Movement

The moveTo() function will move the mouse cursor to the X and Y integer coordinates you pass it. The None value can be passed for a coordinate to mean “the current mouse cursor position”. For example:

>>> pyautogui.moveTo(100, 200)   # moves mouse to X of 100, Y of 200.
>>> pyautogui.moveTo(None, 500)  # moves mouse to X of 100, Y of 500.
>>> pyautogui.moveTo(600, None)  # moves mouse to X of 600, Y of 500.

Normally the mouse cursor will instantly move to the new coordinates. If you want the mouse to gradually move to the new location, pass a third argument for the duration (in seconds) the movement should take. For example:

>>> pyautogui.moveTo(100, 200, 2)   # moves mouse to X of 100, Y of 200 over 2 seconds

(If the duration is less than pyautogui.MINIMUM_DURATION the movement will be instant. By default, pyautogui.MINIMUM_DURATION is 0.1.)

If you want to move the mouse cursor over a few pixels relative to its current position, use the move() function. This function has similar parameters as moveTo(). For example:

>>> pyautogui.moveTo(100, 200)  # moves mouse to X of 100, Y of 200.
>>> pyautogui.move(0, 50)       # move the mouse down 50 pixels.
>>> pyautogui.move(-30, 0)      # move the mouse left 30 pixels.
>>> pyautogui.move(-30, None)   # move the mouse left 30 pixels.

Mouse Drags

PyAutoGUI’s dragTo() and drag() functions have similar parameters as the moveTo() and move() functions. In addition, they have a button keyword which can be set to 'left', 'middle', and 'right' for which mouse button to hold down while dragging. For example:

>>> pyautogui.dragTo(100, 200, button='left')     # drag mouse to X of 100, Y of 200 while holding down left mouse button
>>> pyautogui.dragTo(300, 400, 2, button='left')  # drag mouse to X of 300, Y of 400 over 2 seconds while holding down left mouse button
>>> pyautogui.drag(30, 0, 2, button='right')   # drag the mouse left 30 pixels over 2 seconds while holding down the right mouse button

Tween / Easing Functions

Tweening is an extra feature to make the mouse movements fancy. You can probably skip this section if you don’t care about this.

A tween or easing function dictates the progress of the mouse as it moves to its destination. Normally when moving the mouse over a duration of time, the mouse moves directly towards the destination in a straight line at a constant speed. This is known as a linear tween or linear easing function.

PyAutoGUI has other tweening functions available in the pyautogui module. The pyautogui.easeInQuad function can be passed for the 4th argument to moveTo(), move(), dragTo(), and drag() functions to have the mouse cursor start off moving slowly and then speeding up towards the destination. The total duration is still the same as the argument passed to the function. The pyautogui.easeOutQuad is the reverse: the mouse cursor starts moving fast but slows down as it approaches the destination. The pyautogui.easeOutElastic will overshoot the destination and “rubber band” back and forth until it settles at the destination.

For example:

>>> pyautogui.moveTo(100, 100, 2, pyautogui.easeInQuad)     # start slow, end fast
>>> pyautogui.moveTo(100, 100, 2, pyautogui.easeOutQuad)    # start fast, end slow
>>> pyautogui.moveTo(100, 100, 2, pyautogui.easeInOutQuad)  # start and end fast, slow in middle
>>> pyautogui.moveTo(100, 100, 2, pyautogui.easeInBounce)   # bounce at the end
>>> pyautogui.moveTo(100, 100, 2, pyautogui.easeInElastic)  # rubber band at the end

These tweening functions are copied from Al Sweigart’s PyTweening module: https://pypi.python.org/pypi/PyTweening https://github.com/asweigart/pytweening This module does not have to be installed to use the tweening functions.

If you want to create your own tweening function, define a function that takes a single float argument between 0.0 (representing the start of the mouse travelling) and 1.0 (representing the end of the mouse travelling) and returns a float value between 0.0 and 1.0.
Mouse Clicks

The click() function simulates a single, left-button mouse click at the mouse’s current position. A “click” is defined as pushing the button down and then releasing it up. For example:

>>> pyautogui.click()  # click the mouse

To combine a moveTo() call before the click, pass integers for the x and y keyword argument:

>>> pyautogui.click(x=100, y=200)  # move to 100, 200, then click the left mouse button.

To specify a different mouse button to click, pass 'left', 'middle', or 'right' for the button keyword argument:

>>> pyautogui.click(button='right')  # right-click the mouse

To do multiple clicks, pass an integer to the clicks keyword argument. Optionally, you can pass a float or integer to the interval keyword argument to specify the amount of pause between the clicks in seconds. For example:

>>> pyautogui.click(clicks=2)  # double-click the left mouse button
>>> pyautogui.click(clicks=2, interval=0.25)  # double-click the left mouse button, but with a quarter second pause in between clicks
>>> pyautogui.click(button='right', clicks=3, interval=0.25)   triple-click the right mouse button with a quarter second pause in between clicks

As a convenient shortcut, the doubleClick() function will perform a double click of the left mouse button. It also has the optional x, y, interval, and button keyword arguments. For example:

>>> pyautogui.doubleClick()  # perform a left-button double click

There is also a tripleClick() function with similar optional keyword arguments.

The rightClick() function has optional x and y keyword arguments.
The mouseDown() and mouseUp() Functions

Mouse clicks and drags are composed of both pressing the mouse button down and releasing it back up. If you want to perform these actions separately, call the mouseDown() and mouseUp() functions. They have the same x, y, and button. For example:

>>> pyautogui.mouseDown(); pyautogui.mouseUp()  # does the same thing as a left-button mouse click
>>> pyautogui.mouseDown(button='right')  # press the right button down
>>> pyautogui.mouseUp(button='right', x=100, y=200)  # move the mouse to 100, 200, then release the right button up.

Mouse Scrolling

The mouse scroll wheel can be simulated by calling the scroll() function and passing an integer number of “clicks” to scroll. The amount of scrolling in a “click” varies between platforms. Optionally, integers can be passed for the the x and y keyword arguments to move the mouse cursor before performing the scroll. For example:

>>> pyautogui.scroll(10)   # scroll up 10 "clicks"
>>> pyautogui.scroll(-10)  # scroll down 10 "clicks"
>>> pyautogui.scroll(10, x=100, y=100)  # move mouse cursor to 100, 200, then scroll up 10 "clicks"

On OS X and Linux platforms, PyAutoGUI can also perform horizontal scrolling by calling the hscroll() function. For example:

>>> pyautogui.hscroll(10)   # scroll right 10 "clicks"
>>> pyautogui.hscroll(-10)   # scroll left 10 "clicks"

The scroll() function is a wrapper for vscroll(), which performs vertical scrolling.
"""


pag_str2 = """
Mouse Clicks

The click() function simulates a single, left-button mouse click at the mouse’s current position. A “click” is defined as pushing the button down and then releasing it up. For example:

>>> pyautogui.click()  # click the mouse

To combine a moveTo() call before the click, pass integers for the x and y keyword argument:

>>> pyautogui.click(x=100, y=200)  # move to 100, 200, then click the left mouse button.

To specify a different mouse button to click, pass 'left', 'middle', or 'right' for the button keyword argument:

>>> pyautogui.click(button='right')  # right-click the mouse

To do multiple clicks, pass an integer to the clicks keyword argument. Optionally, you can pass a float or integer to the interval keyword argument to specify the amount of pause between the clicks in seconds. For example:

>>> pyautogui.click(clicks=2)  # double-click the left mouse button
>>> pyautogui.click(clicks=2, interval=0.25)  # double-click the left mouse button, but with a quarter second pause in between clicks
>>> pyautogui.click(button='right', clicks=3, interval=0.25)   triple-click the right mouse button with a quarter second pause in between clicks

As a convenient shortcut, the doubleClick() function will perform a double click of the left mouse button. It also has the optional x, y, interval, and button keyword arguments. For example:

>>> pyautogui.doubleClick()  # perform a left-button double click

There is also a tripleClick() function with similar optional keyword arguments.

The rightClick() function has optional x and y keyword arguments.
The mouseDown() and mouseUp() Functions

Mouse clicks and drags are composed of both pressing the mouse button down and releasing it back up. If you want to perform these actions separately, call the mouseDown() and mouseUp() functions. They have the same x, y, and button. For example:

>>> pyautogui.mouseDown(); pyautogui.mouseUp()  # does the same thing as a left-button mouse click
>>> pyautogui.mouseDown(button='right')  # press the right button down
>>> pyautogui.mouseUp(button='right', x=100, y=200)  # move the mouse to 100, 200, then release the right button up.

Mouse Scrolling

The mouse scroll wheel can be simulated by calling the scroll() function and passing an integer number of “clicks” to scroll. The amount of scrolling in a “click” varies between platforms. Optionally, integers can be passed for the the x and y keyword arguments to move the mouse cursor before performing the scroll. For example:

>>> pyautogui.scroll(10)   # scroll up 10 "clicks"
>>> pyautogui.scroll(-10)  # scroll down 10 "clicks"
>>> pyautogui.scroll(10, x=100, y=100)  # move mouse cursor to 100, 200, then scroll up 10 "clicks"

On OS X and Linux platforms, PyAutoGUI can also perform horizontal scrolling by calling the hscroll() function. For example:

>>> pyautogui.hscroll(10)   # scroll right 10 "clicks"
>>> pyautogui.hscroll(-10)   # scroll left 10 "clicks"

The scroll() function is a wrapper for vscroll(), which performs vertical scrolling.
"""

pag_str3 = """
Keyboard Control Functions
The write() Function

The primary keyboard function is write(). This function will type the characters in the string that is passed. To add a delay interval in between pressing each character key, pass an int or float for the interval keyword argument.

For example:

>>> pyautogui.write('Hello world!')                 # prints out "Hello world!" instantly
>>> pyautogui.write('Hello world!', interval=0.25)  # prints out "Hello world!" with a quarter second delay after each character

You can only press single-character keys with write(), so you can’t press the Shift or F1 keys, for example.
The press(), keyDown(), and keyUp() Functions

To press these keys, call the press() function and pass it a string from the pyautogui.KEYBOARD_KEYS such as enter, esc, f1. See KEYBOARD_KEYS.

For example:

>>> pyautogui.press('enter')  # press the Enter key
>>> pyautogui.press('f1')     # press the F1 key
>>> pyautogui.press('left')   # press the left arrow key

The press() function is really just a wrapper for the keyDown() and keyUp() functions, which simulate pressing a key down and then releasing it up. These functions can be called by themselves. For example, to press the left arrow key three times while holding down the Shift key, call the following:

>>> pyautogui.keyDown('shift')  # hold down the shift key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.keyUp('shift')    # release the shift key

To press multiple keys similar to what write() does, pass a list of strings to press(). For example:

>>> pyautogui.press(['left', 'left', 'left'])

Or you can set how many presses left:

>>> pyautogui.press('left', presses=3)

To add a delay interval in between each press, pass an int or float for the interval keyword argument.
The hold() Context Manager

To make holding a key convenient, the hold() function can be used as a context manager and passed a string from the pyautogui.KEYBOARD_KEYS such as shift, ctrl, alt, and this key will be held for the duration of the with context block. See KEYBOARD_KEYS.

>>> with pyautogui.hold('shift'):
        pyautogui.press(['left', 'left', 'left'])

…is equivalent to this code:

>>> pyautogui.keyDown('shift')  # hold down the shift key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.press('left')     # press the left arrow key
>>> pyautogui.keyUp('shift')    # release the shift key

The hotkey() Function

To make pressing hotkeys or keyboard shortcuts convenient, the hotkey() can be passed several key strings which will be pressed down in order, and then released in reverse order. This code:

>>> pyautogui.hotkey('ctrl', 'shift', 'esc')

…is equivalent to this code:

>>> pyautogui.keyDown('ctrl')
>>> pyautogui.keyDown('shift')
>>> pyautogui.keyDown('esc')
>>> pyautogui.keyUp('esc')
>>> pyautogui.keyUp('shift')
>>> pyautogui.keyUp('ctrl')

To add a delay interval in between each press, pass an int or float for the interval keyword argument.
KEYBOARD_KEYS

The following are the valid strings to pass to the press(), keyDown(), keyUp(), and hotkey() functions:

['\t', '\n', '\r', ' ', '!', '"', '#', '$', '%', '&', "'", '(',
')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7',
'8', '9', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`',
'a', 'b', 'c', 'd', 'e','f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~',
'accept', 'add', 'alt', 'altleft', 'altright', 'apps', 'backspace',
'browserback', 'browserfavorites', 'browserforward', 'browserhome',
'browserrefresh', 'browsersearch', 'browserstop', 'capslock', 'clear',
'convert', 'ctrl', 'ctrlleft', 'ctrlright', 'decimal', 'del', 'delete',
'divide', 'down', 'end', 'enter', 'esc', 'escape', 'execute', 'f1', 'f10',
'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f2', 'f20',
'f21', 'f22', 'f23', 'f24', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9',
'final', 'fn', 'hanguel', 'hangul', 'hanja', 'help', 'home', 'insert', 'junja',
'kana', 'kanji', 'launchapp1', 'launchapp2', 'launchmail',
'launchmediaselect', 'left', 'modechange', 'multiply', 'nexttrack',
'nonconvert', 'num0', 'num1', 'num2', 'num3', 'num4', 'num5', 'num6',
'num7', 'num8', 'num9', 'numlock', 'pagedown', 'pageup', 'pause', 'pgdn',
'pgup', 'playpause', 'prevtrack', 'print', 'printscreen', 'prntscrn',
'prtsc', 'prtscr', 'return', 'right', 'scrolllock', 'select', 'separator',
'shift', 'shiftleft', 'shiftright', 'sleep', 'space', 'stop', 'subtract', 'tab',
'up', 'volumedown', 'volumemute', 'volumeup', 'win', 'winleft', 'winright', 'yen',
'command', 'option', 'optionleft', 'optionright']

"""


if __name__ == "__main__":

    root.mainloop()
import pathlib
import tkinter as tk
import tkinter.ttk as ttk
import pygubu

PROJECT_PATH = pathlib.Path(__file__).parent
PROJECT_UI = PROJECT_PATH / "newproject"


class NewprojectApp:
    def __init__(self, master=None):
        self.builder = builder = pygubu.Builder()
        builder.add_resource_path(PROJECT_PATH)
        builder.add_from_file(PROJECT_UI)
        self.mainwindow = builder.get_object("menu1", master)
        builder.connect_callbacks(self)

    def run(self):
        self.mainwindow.mainloop()


if __name__ == "__main__":
    root = tk.Tk()
    app = NewprojectApp(root)
    app.run()
import pathlib
import tkinter as tk
import tkinter.ttk as ttk

PROJECT_PATH = pathlib.Path(__file__).parent
PROJECT_UI = PROJECT_PATH / "newproject"


class NewprojectWidget(ttk.Frame):
    def __init__(self, master=None, **kw):
        super(NewprojectWidget, self).__init__(master, **kw)
        self.frame2 = ttk.Frame(self)
        self.frame3 = ttk.Frame(self.frame2)
        self.frame4 = ttk.Frame(self.frame3)
        self.button1 = ttk.Button(self.frame4)
        self.button1.configure(text="button1")
        self.button1.pack(side="top")
        self.frame4.configure(height="200", width="200")
        self.frame4.grid(column="0", row="0")
        self.frame3.columnconfigure("0", minsize="1200")
        self.text1 = tk.Text(self.frame3)
        self.text1.configure(font="{URW Chancery L} 12 {}", height="10", width="50")
        self.text1.grid(
            column="0", columnspan="10", padx="10", pady="10", row="1", rowspan="10"
        )
        self.frame3.rowconfigure("1", minsize="600")
        self.frame5 = ttk.Frame(self.frame3)
        self.frame5.configure(height="200", width="200")
        self.frame5.grid(column="0", row="2")
        self.button2 = ttk.Button(self.frame3)
        self.button2.configure(text="button2")
        self.button2.grid(column="0", row="3")
        self.button3 = ttk.Button(self.frame3)
        self.button3.configure(text="button3")
        self.button3.grid(column="0", row="4")
        self.button4 = ttk.Button(self.frame3)
        self.button4.configure(text="button4")
        self.button4.grid(column="0", row="5", sticky="e")
        self.button5 = ttk.Button(self.frame3)
        self.button5.configure(text="button5")
        self.button5.grid(column="0", row="6")
        self.button6 = ttk.Button(self.frame3)
        self.button6.configure(text="button6")
        self.button6.grid(column="0", row="7", sticky="w")
        self.button7 = ttk.Button(self.frame3)
        self.button7.configure(text="button7")
        self.button7.grid(column="0", row="8")
        self.button8 = ttk.Button(self.frame3)
        self.button8.configure(text="button8")
        self.button8.grid(column="0", row="9")
        self.button9 = ttk.Button(self.frame3)
        self.button9.configure(text="button9")
        self.button9.grid(column="0", row="10")
        self.button10 = ttk.Button(self.frame3)
        self.button10.configure(text="button10")
        self.button10.grid(column="0", row="11")
        self.button11 = ttk.Button(self.frame3)
        self.button11.configure(text="button11")
        self.button11.grid(column="0", row="12")
        self.button12 = ttk.Button(self.frame3)
        self.button12.configure(text="button12")
        self.button12.grid(column="0", row="13")
        self.button13 = ttk.Button(self.frame3)
        self.button13.configure(text="button13")
        self.button13.grid(column="0", row="14")
        self.button14 = ttk.Button(self.frame3)
        self.button14.configure(text="button14")
        self.button14.grid(column="0", row="15")
        self.button15 = ttk.Button(self.frame3)
        self.button15.configure(text="button15")
        self.button15.grid(column="0", row="16")
        self.button16 = ttk.Button(self.frame3)
        self.button16.configure(text="button16")
        self.button16.grid(column="0", row="17")
        self.text2 = tk.Text(self.frame3)
        self.text2.configure(height="10", width="50")
        self.text2.grid(column="0", row="18")
        self.scrollbar1 = ttk.Scrollbar(self.frame3)
        self.scrollbar1.configure(orient="horizontal")
        self.scrollbar1.grid(column="0", row="19")
        self.scrollbar2 = ttk.Scrollbar(self.frame3)
        self.scrollbar2.configure(orient="horizontal")
        self.scrollbar2.grid(column="0", row="20")
        self.frame3.configure(height="200", width="200")
        self.frame3.grid(column="0", row="0")
        self.frame2.configure(height="200", width="200")
        self.frame2.grid(column="0", columnspan="10", row="0", sticky="nw")


if __name__ == "__main__":
    root = tk.Tk()
    widget = NewprojectWidget(root)
    widget.pack(expand=True, fill="both")
    root.mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk

root = tk.Tk()
root.geometry('1000x1000')
notebook = ttk.Notebook(root)
notebook.pack()

r = ttk.Frame(notebook)
frame2 = ttk.Frame(notebook)
notebook.add(root, text='1')
notebook.add(frame2, text='2')

frame3 = ttk.Frame(notebook)
notebook.add(frame3, text='3')
frame4 = ttk.Frame(notebook)

notebook.add(frame4, text='4')
frame5 = ttk.Frame(notebook)


notebook.add(frame5, text='5')
frame6 = ttk.Frame(notebook)
notebook.add(frame6, text='6')
frame7 = ttk.Frame(notebook)
notebook.add(frame7, text='7')
frame8 = ttk.Frame(notebook)
notebook.add(frame8, text='8')
frame8 = ttk.Frame(notebook)
notebook.add(frame8, text='8')
frame9 = ttk.Frame(notebook)
notebook.add(frame9, text='9')
frame10 = ttk.Frame(notebook)
notebook.add(frame10, text='10')
# disables the tab
# notebook.tab(0, state = 'disabled')
# entering and displaying multiple lines with the text widget
file_name=None
PROGRAM_NAME="PyEditor"


tk.Label(root, text="PyEditor").pack()


def quit():
    if tkinter.messagebox.askokcancel("Quit?", "Really quit?"):
        r.destroy()

def new_file(event=None):
    tk.Label(root, text="Untitled")
    global file_name
    file_name = None
    content_text.delete('1.0', tk.END)

def open_file(event=None):
    input_file_name=tkinter.filedialog.askopenfilename(defaultextension=".txt",filetypes=[("All Files","*.*"),("Text Documents","*.txt")])
    if input_file_name:
        global file_name
        file_name=input_file_name
        tk.Entry(root, ('{} - {}'.format(os.path.basename(file_name),PROGRAM_NAME))
        content_text.delete('1.0', tk.END)
        with open(file_name) as f:
            content_text.insert('1.0', f.read())

def save_file(event=None):
    global file_name
    if not file_name:
        save_as_file()
    else:
        write_to_file(file_name)
    return "break"

def save_as_file(event=None):
    input_file_name = tkinter.filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("All Files", "*.*"),("Text Documents", "*.txt")])
    if input_file_name:
        global file_name
        file_name = input_file_name
        write_to_file(file_name)
        root.title('{} - {}'.format(os.path.basename(file_name),PROGRAM_NAME))
    return "break"

def write_to_file(file_name):
    try:
        content = content_text.get(1.0, 'end')
        with open(file_name, 'w') as the_file:
            the_file.write(content)
    except IOError:
        pass

def cut():
    content_text.event_generate("<<Cut>>")

def copy():
    content_text.event_generate("<<Copy>>")

def paste():
    content_text.event_generate("<<Paste>>")

def undo():
    content_text.event_generate("<<Undo>>")

def redo(event=None):
    content_text.event_generate("<<Redo>>")
    return 'break'

def find(event=None):
    search_top_level=Toplevel(window)
    search_top_level.title("Find Text")
    search_top_level.transient(window)
    Label(search_top_level,text="Find All:").grid(row=0,column=0,sticky='e')
    search_entry_widget=Entry(search_top_level,width=25)
    search_entry_widget.grid(row=0,column=1,padx=2,pady=2,sticky='we')
    search_entry_widget.focus_set()
    ignore_case_value=IntVar()
    Checkbutton(search_top_level, text='Ignore Case',variable=ignore_case_value).grid(row=1, column=1, sticky='e', padx=2, pady=2)
    Button(search_top_level,text="Find All",underline=0,command=lambda:search_output(search_entry_widget.get(),ignore_case_value.get(),content_text,search_top_level,search_entry_widget)).grid(row=2,column=2,sticky='e'+'w',padx=2,pady=2)
    def close_search_window():
        content_text.tag_remove('match','1.0',END)
        search_top_level.destroy()
        search_top_level.protocol('WM_DELETE_WINDOW',close_search_window)
        return 'break'

def search_output(needle,if_ignore_case,content_text,search_top_level,search_box):
    content_text.tag_remove('match','1.0',END)
    matches_found=0
    if needle:
        start_pos='1.0'
        while True:
            start_pos=content_text.search(needle,start_pos,nocase=if_ignore_case,stopindex=END)
            if not start_pos:
                break
            end_pos='{}+{}c'.format(start_pos,len(needle))
            content_text.tag_add('match',start_pos,end_pos)
            matches_found+=1
            start_pos=end_pos
            content_text.tag_config('match',foreground='red',background='yellow')
            search_box.focus_set()
            search_top_level.title('{} matches found'.format(matches_found))

def select_all(event=None):
    content_text.tag_add('sel', '1.0', 'end')
    return "break"

def about():
    tkinter.messagebox.showinfo("About", "{}{}".format(PROGRAM_NAME, "\nThis is a Text Editor application still in development JH APPS 2021"))
def help():
    tkinter.messagebox.showinfo("Help", "")
	 
def show_info_bar():
    val = showinbar.get()
    if val:
        line_number_bar.pack(expand=NO, fill=None, side=RIGHT, anchor='se')
    elif not val:
        line_number_bar.pack_forget()

def highlight_line(interval=100):
    content_text.tag_remove("active_line", 1.0, "end")
    content_text.tag_add("active_line", "insert linestart", "insert lineend+1c")
    content_text.after(interval, toggle_highlight)

def undo_highlight():
    content_text.tag_remove("active_line", 1.0, "end")

def toggle_highlight(event=None):
    val = hltln.get()
    undo_highlight() if not val else highlight_line()

def theme():
        global bgc,fgc
        val = themechoice.get()
        clrs = clrschms.get(val)
        fgc, bgc = clrs.split('.')
        fgc, bgc = '#'+fgc, '#'+bgc
        content_text.config(bg=bgc, fg=fgc)

def update_line_numbers(event = None):
    line_numbers = get_line_numbers()
    line_number_bar.config(state='normal')
    line_number_bar.delete('1.0', 'end')
    line_number_bar.insert('1.0', line_numbers)
    line_number_bar.config(state='disabled')

def on_content_changed(event=None):
    update_line_numbers()
    update_cursor_info_bar()

def show_cursor_info_bar():
    show_cursor_info_checked = showinbar.get()
    if show_cursor_info_checked:
        cursor_info_bar.pack(expand='no', fill=None, side='right',anchor='se')
    else:
        cursor_info_bar.pack_forget()

def get_line_numbers():
    output = ''
    if showinbar.get():
        row, col = content_text.index("end").split('.')
        for i in range(1, int(row)):
            output += str(i)+ '\n'
    return output

def update_cursor_info_bar(event=None):
    row, col = content_text.index(INSERT).split('.')
    line_num, col_num = str(int(row)), str(int(col)+1)
    infotext = "Line: {0} | Column: {1}".format(line_num, col_num)
    cursor_info_bar.config(text=infotext)

def show_popup_menu(event):
    popup_menu.tk_popup(event.x_root, event.y_root)

shortcutbar = Frame(root, height=25)
icons = {'new_file':'new_file','open_file':'open_file','save_file':'save','cut':'Cut','copy':'Copy','paste':'Paste',"undo":'Undo','redo':'Redo',"find":'on_find',"about":'about'}
for f,icon in icons.items():

    cmd = eval(f)
    toolbar = Button(shortcutbar,command=cmd)

    toolbar.pack(side=LEFT)
shortcutbar.pack(expand=NO, fill=X)


menubar = Menu(window)

content_text = Text(window, wrap='word',undo=1)
content_text.bind('<Control-y>', redo)
content_text.bind('<Control-Y>', redo)
content_text.bind('<Control-A>', select_all)
content_text.bind('<Control-a>', select_all)
content_text.bind('<Control-f>', find)
content_text.bind('<Control-F>', find)
content_text.bind('<Control-f>', find)
content_text.bind('<Control-F>', find)
content_text.bind('<Control-o>', open_file)
content_text.bind('<Control-O>', open_file)
content_text.bind('<Control-s>', save_file)
content_text.bind('<Control-S>', save_file)
content_text.bind('<Shift-Control-S>', save_as_file)
content_text.bind('<Shift-Control-s>', save_as_file)
content_text.bind('<Control-n>', new_file)
content_text.bind('<Control-N>', new_file)
content_text.bind('<KeyPress-F1>', help)
content_text.bind('<Any-KeyPress>', on_content_changed)
content_text.bind('<Button-3>', show_popup_menu)

file_menu = Menu(menubar,tearoff=0)
file_menu.add_command(label="New",accelerator='Ctrl+N',compound='left',underline=0,command=new_file)
file_menu.add_command(label="Open",accelerator='Ctrl+O',compound='left',underline=0,command=open_file)
file_menu.add_command(label="Save",accelerator='Ctrl+S',compound='left',underline=0,command=save_file)
file_menu.add_command(label="Save As",accelerator='Shift+Ctrl+S',compound='left',underline=0,command=save_as_file)
file_menu.add_command(label="Exit",accelerator='Alt+F4',compound='left',underline=0,command=quit)
menubar.add_cascade(label='File',menu=file_menu)

edit_menu=Menu(menubar,tearoff=0)
edit_menu.add_command(label="Cut",accelerator="Ctrl+X",compound='left',underline=0,command=cut)
edit_menu.add_command(label="Copy",accelerator="Ctrl+C",compound='left',underline=0,command=copy)
edit_menu.add_command(label="Paste",accelerator="Ctrl+V",compound='left',underline=0,command=paste)
edit_menu.add_command(label="Undo",accelerator="Ctrl+Z",compound='left',underline=0,command=undo)
edit_menu.add_command(label="Redo",accelerator="Ctrl+Y",compound='left',underline=0,command=redo)
edit_menu.add_command(label="Find",accelerator="Ctrl+F",compound='left',underline=0,command=find)
edit_menu.add_command(label="Select All",accelerator="Ctrl+A",compound='left',underline=7,command=select_all)
menubar.add_cascade(label="Edit",menu=edit_menu)

view_menu=Menu(menubar,tearoff=0)
menubar.add_cascade(label="View", menu=view_menu)
showln = IntVar()
showln.set(1)
view_menu.add_checkbutton(label="Show Line Number", variable=showln)
showinbar = IntVar()
showinbar.set(1)
view_menu.add_checkbutton(label="Show Info Bar at Bottom", variable=showinbar, command=show_info_bar)
hltln = IntVar()
view_menu.add_checkbutton(label="Highlight Current Line", variable=hltln, command=toggle_highlight)
themes_menu = Menu(view_menu, tearoff=0)
view_menu.add_cascade(label="Themes", menu=themes_menu)
clrschms = {
'1. Default White': '000000.FFFFFF',
'2. Greygarious Grey':'83406A.D1D4D1',
'3. Lovely Lavender':'202B4B.E1E1FF' ,
'4. Aquamarine': '5B8340.D1E7E0',
'5. Bold Beige': '4B4620.FFF0E1',
'6. Cobalt Blue':'ffffBB.3333aa',
'7. Olive Green': 'D1E7E0.5B8340',
}
themechoice= StringVar()
themechoice.set('1. Default White')
for k in sorted(clrschms):
    themes_menu.add_radiobutton(label=k, variable=themechoice, command=theme)

about_menu=Menu(menubar,tearoff=0)
about_menu.add_command(label="About",compound='left',underline=0,command=about)
about_menu.add_command(label="Help",compound='left',underline=0,command=help)
menubar.add_cascade(label="About",menu=about_menu)

cursor_info_bar = Label(content_text, text='Line: 1 | Column: 1')
cursor_info_bar.pack(expand=NO, fill=None, side=RIGHT,anchor='se')

shortcut_bar = Frame(window, height=25, background='light sea green')
shortcut_bar.pack(expand='no', fill='x')

line_number_bar = Text(window, width=4, padx=3, takefocus=0,border=0,background='khaki', state='disabled', wrap='none')
line_number_bar.pack(side='left', fill='y')

view_menu.add_checkbutton(label='Show Cursor Location at Bottom',variable=showinbar, command=show_cursor_info_bar)

popup_menu = Menu(content_text)
for i in ('cut', 'copy', 'paste', 'undo', 'redo'):
    cmd = eval(i)
    popup_menu.add_command(label=i, compound='left', command=cmd)
    popup_menu.add_separator()
popup_menu.add_command(label='Select All', underline=7,command=select_all)

scroll_bary = Scrollbar(content_text)
scroll_bary.config(command=content_text.yview)
scroll_bary.pack(side='right', fill='y')

content_text.pack(expand='yes', fill='both')
content_text.configure(yscrollcommand=scroll_bary.set)

r.protocol('WM_DELETE_WINDOW',quit)
r.config(menu=menubar)
r.mainloop()

text2 = Text(frame2, width=100, height=100)
text2.pack()
text3 = Text(frame3, width=100, height=100)
text3.pack()
text4 = Text(frame4, width=10, height=10)
text4.pack()
text5 = Text(frame5, width=100, height=100)
text5.pack()
text6 = Text(frame6, width=100, height=100)
text6.pack()
text7 = Text(frame7, width=100, height=100)
text7.pack()
text8 = Text(frame8, width=100, height=100)
text8.pack()
text9 = Text(frame9, width=100, height=100)
text9.pack()
text10 = Text(frame10, width=100, height=100)
text10.pack()

root.mainloop()


if __name__ == '__main__':
    mainloop()
import tkinter as tk
from tkinter import *
from tkinter import ttk
import os, sys, subprocess
from tkinter.filedialog import askopenfilename, asksaveasfilename

root = Tk()
root.geometry("500x500")
notebook = ttk.Notebook(root)

notebook.grid(row=0, column=0)
frame1 = ttk.Frame(notebook)

def open_file():
    '''Open a file for editing.'''
    filepath = askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')]
    )
    if not filepath:
        return
    text1.delete(1.0, tk.END)
    with open(filepath, 'r') as input_file:
        text = input_file.read()
        text1.insert(tk.END, text)





def save_file():

    filepath = asksaveasfilename(defaultextension='txt',
                                 filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')]),
    if not filepath:
        return
    with open(filepath, 'w') as output_file:
        text = text1.get(1.0, tk.END)
        output_file.write(text)



frame1.rowconfigure(0, minsize=800, weight=1)
frame1.columnconfigure(1, minsize=800, weight=1)

fr_buttons = tk.Frame(frame1, relief=tk.RAISED, bd=2)
btn_open = tk.Button(fr_buttons, text='Open', command=open_file)
btn_save = tk.Button(fr_buttons, text='Save As...', command=save_file)

btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

fr_buttons.grid(row=0, column=0, sticky='ns')
text1 = tk.Text(frame1)
text1.grid(row=0, column=1, sticky="nsew")
frame2 = ttk.Frame(notebook)
notebook.add(frame1, text="1")
notebook.add(frame2, text="2")

fr_buttons2 = tk.Frame(frame2, relief=tk.RAISED, bd=2)
fr_buttons2.grid(row=0, column=0, sticky='ns')
btn_save = tk.Button(fr_buttons2, text='Save As...', command=save_file)
btn_open = tk.Button(fr_buttons2, text='Open others', command=op)
btn_open.grid(row=0, column=0, sticky='ew', padx=5, pady=5)
btn_save.grid(row=1, column=0, sticky='ew', padx=5)

frame2.rowconfigure(0, minsize=800, weight=1)
frame2.columnconfigure(1, minsize=800, weight=1)

text2 = tk.Text(frame2)
text2.grid(row=0, column=1, sticky="nsew")

f3 = ttk.Frame(notebook)
notebook.add(f3, text="3")


text3 = tk.Text(f3, height=250, width=100, bg="wheat")
text3.insert("1.0", tk.END)
text3.grid(row=0, column=4, rowspan=25, columnspan=10)
f4 = ttk.Frame(notebook)
notebook.add(f4, text="4")
f5 = ttk.Frame(notebook)


notebook.add(f5, text="5")
f6 = ttk.Frame(notebook)
notebook.add(f6, text="6")
f7 = ttk.Frame(notebook)
notebook.add(f7, text="7")
f8 = ttk.Frame(notebook)
notebook.add(f8, text="8")
f9 = ttk.Frame(notebook)
notebook.add(f9, text="9")
f10 = ttk.Frame(notebook)
notebook.add(f10, text="10")
f11 = ttk.Frame(notebook)
notebook.add(f11, text="11")
text10 = tk.Text(f10, height=250, width=100, bg="wheat")
text10.insert("1.0", tk.END)
text10.grid(row=0, column=4, rowspan=25, columnspan=10)
text11 = tk.Text(f11, height=250, width=100, bg="wheat")
text11.insert("1.0", tk.END)
text11.grid(row=0, column=4, rowspan=25, columnspan=10)
text4 = tk.Text(f4, height=250, width=300, bg="orange")
text4.insert("1.0", tk.END)

text4.grid(row=0, column=4, rowspan=25, columnspan=10)
text5 = tk.Text(f5, height=250, width=300, bg="white")
text5.insert("1.0", tk.END)
text5.grid(row=0, column=4, rowspan=25, columnspan=10)
text6 = tk.Text(f6, height=250, width=100, bg="white")
text6.insert("1.0", tk.END)
text6.grid(row=0, column=4, rowspan=25, columnspan=10)
text7 = tk.Text(f7, height=250, width=100, bg="light blue")
text7.insert("1.0", tk.END)
text7.grid(row=0, column=4, rowspan=25, columnspan=10)
text8 = tk.Text(f8, height=250, width=100, bg="pink")
text8.insert("1.0", tk.END)
text8.grid(row=0, column=4, rowspan=25, columnspan=10)
text9 = tk.Text(f9, height=250, width=100, bg="light green")
text9.insert("1.0", tk.END)
text9.grid(row=0, column=4, rowspan=25, columnspan=10)

# disables the tab
# notebook.tab(0, state = 'disabled')
# entering and displaying multiple lines with the text widget

top = tk.Toplevel()
top.geometry("600x400")
fr1 = tk.Frame(top)
fr1.grid(row=1, column=0, rowspan=20, columnspan=7)


def select_save(ss):

    if ss == 1:
        text = text1.get("1.0", tk.END)
    elif ss == 2:
        text = text2.get("1.0", tk.END)
    elif ss == 3:
        text = text3.get("1.0", tk.END)
    elif ss == 4:
        text = text4.get("1.0", tk.END)
    elif ss == 5:
        text = text5.get("1.0", tk.END)
    elif ss == 6:
        text = text6.get("1.0", tk.END)
    elif ss == 7:
        text = text7.get("1.0", tk.END)
    elif ss == 8:
        text = text8.get("1.0", tk.END)
    elif ss == 9:
        text = text9.get("1.0", tk.END)
    elif ss == 10:
        text = text10.get("1.0", tk.END)
    elif ss == 11:
        text = text10.get("1.0", tk.END)

    text11.insert("1.0", text)
    filepath = asksaveasfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    with open(filepath, "w") as f:
        f.write(text)


r1 = ttk.Radiobutton(fr1, text="save1", variable=1, value="Text Tab 1")
r1.config(command=lambda: select_save(1))
r2 = ttk.Radiobutton(fr1, text="save2", variable=2, value="Text Tab 1")
r2.config(command=lambda: select_save(2))
r3 = ttk.Radiobutton(fr1, text="save3", variable=3, value="Text Tab 2")
r3.config(command=lambda: select_save(3))
r4 = ttk.Radiobutton(fr1, text="save4", variable=4, value="Text Tab 3")
r4.config(command=lambda: select_save(4))
r5 = ttk.Radiobutton(fr1, text="save5", variable=5, value="Text Tab 4")
r5.config(command=lambda: select_save(5))
r6 = ttk.Radiobutton(fr1, text="save6", variable=6, value="Text Tab 5")
r6.config(command=lambda: select_save(6))
r7 = ttk.Radiobutton(fr1, text="save7", variable=7, value="Text Tab 6")
r7.config(command=lambda: select_save(7))
r8 = ttk.Radiobutton(fr1, text="save8", variable=8, value="Text Tab 7")
r8.config(command=lambda: select_save(8))
r9 = ttk.Radiobutton(fr1, text="save9", variable=9, value="Text Tab 8")
r9.config(command=lambda: select_save(9))
r10 = ttk.Radiobutton(fr1, text="save10", variable=10, value="Text Tab 9")
r10.config(command=lambda: select_save(10))
r11 = ttk.Radiobutton(fr1, text="save11", variable=11, value="Text Tab 10")
r11.config(command=lambda: select_save(11))
r1.grid(row=1, column=3)
r2.grid(row=2, column=3)
r3.grid(row=3, column=3)
r4.grid(row=4, column=3)
r5.grid(row=5, column=3)
r6.grid(row=6, column=3)
r7.grid(row=7, column=3)
r8.grid(row=8, column=3)
r9.grid(row=9, column=3)
r10.grid(row=10, column=3)
r11.grid(row=11, column=3)


def select_open(ss):

    if ss == 1:
        text = text1
    elif ss == 2:
        text = text2
    elif ss == 3:
        text = text3
    elif ss == 4:
        text = text4
    elif ss == 5:
        text = text5
    elif ss == 6:
        text = text6
    elif ss == 7:
        text = text7
    elif ss == 8:
        text = text8
    elif ss == 9:
        text = text9
    elif ss == 10:
        text = text10
    elif ss == 11:
        text = text10

    filepath = askopenfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, "r") as f:
        content = f.read()
        text.insert("1.0", content)


r11 = ttk.Radiobutton(fr1, text="open1", variable=1, value="Text Tab 1")
r11.config(command=lambda: select_open(1))
r12 = ttk.Radiobutton(fr1, text="open2", variable=2, value="Text Tab 1")
r12.config(command=lambda: select_open(2))
r13 = ttk.Radiobutton(fr1, text="open3", variable=3, value="Text Tab 2")
r13.config(command=lambda: select_open(3))
r14 = ttk.Radiobutton(fr1, text="open4", variable=4, value="Text Tab 3")
r14.config(command=lambda: select_open(4))
r15 = ttk.Radiobutton(fr1, text="open5", variable=5, value="Text Tab 4")
r15.config(command=lambda: select_open(5))
r16 = ttk.Radiobutton(fr1, text="open6", variable=6, value="Text Tab 5")
r16.config(command=lambda: select_open(6))
r17 = ttk.Radiobutton(fr1, text="open7", variable=7, value="Text Tab 6")
r17.config(command=lambda: select_open(7))
r18 = ttk.Radiobutton(fr1, text="open8", variable=8, value="Text Tab 7")
r18.config(command=lambda: select_open(8))
r19 = ttk.Radiobutton(fr1, text="open9", variable=9, value="Text Tab 8")
r19.config(command=lambda: select_open(9))
r20 = ttk.Radiobutton(fr1, text="open10", variable=10, value="Text Tab 9")
r20.config(command=lambda: select_open(10))
r21 = ttk.Radiobutton(fr1, text="open11", variable=11, value="Text Tab 10")
r21.config(command=lambda: select_open(11))
r11.grid(row=1, column=1)
r12.grid(row=2, column=1)
r13.grid(row=3, column=1)
r14.grid(row=4, column=1)
r15.grid(row=5, column=1)
r16.grid(row=6, column=1)
r17.grid(row=7, column=1)
r18.grid(row=8, column=1)
r19.grid(row=9, column=1)
r20.grid(row=10, column=1)
r20.grid(row=11, column=1)


root.mainloop()
import tkinter as tk
import glob
from PIL import Image, ImageTk
import os


def insertfiles():
    "loads the list of files in the directory"
    for filename in glob.glob("*.png"):
        lst.insert(tk.END, filename)


def delete_item(event):
    "Deletes a file in the list: called by lst.bind('<Control-d>', delete_item)"
    n = lst.curselection()
    os.remove(lst.get(n))
    lst.delete(n)


def get_window_size():
    "Returns the width and height of the screen to set images and canvas alike it: called by root.bind <Configure>"
    root_w = root.winfo_width()
    if root.winfo_width() > 200 and root.winfo_height() > 30:
        w = root.winfo_width() - 200
        h = root.winfo_height() - 30
    else:
        w = 200
        h = 30
    return w, h


def showimg(event):
    "takes the selected image to show it, called by root.bind <Configure> and lst.bind <<ListboxSelect>>"
    n = lst.curselection()
    filename = lst.get(n)
    im = Image.open(filename)
    im = im.resize((get_window_size()), Image.ANTIALIAS)
    img = ImageTk.PhotoImage(im)
    w, h = img.width(), img.height()
    canvas.image = img
    canvas.config(width=w, height=h)
    canvas.create_image(0, 0, image=img)
    root.bind("<Configure>", lambda x: showimg(x))


root = tk.Tk()

root.geometry("800x600+300+50")
lst = tk.Listbox(root, width=20)
lst.grid(row=2, column=2)
lst.bind("<<ListboxSelect>>", showimg)
lst.bind("<Control-d>", delete_item)
insertfiles()
canvas = tk.Canvas(root)
canvas.grid(row=1, column=1)

root.mainloop()
import tkinter as tk

app = tk.Tk()
app.title("My App")
app.geometry("200x75")

def quitCommand():
    quit()

button = tk.Button(text="Quit", command=quitCommand)
button.pack()

app.mainloop()
#!/usr/bin/env python3

"""
ZetCode Tkinter tutorial

In this program, we show various
message boxes.

Author: Jan Bodnar
Last modified: April 2019
Website: www.zetcode.com
"""

from tkinter import Tk, BOTH
from tkinter.ttk import Frame, Button
from tkinter import messagebox as mbox


class Example(Frame):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.master.title("Message boxes")
        self.pack()

        error = Button(self, text="Error", command=self.onError)
        error.grid(padx=5, pady=5)
        warning = Button(self, text="Warning", command=self.onWarn)
        warning.grid(row=1, column=0)
        question = Button(self, text="Question", command=self.onQuest)
        question.grid(row=0, column=1)
        inform = Button(self, text="Information", command=self.onInfo)
        inform.grid(row=1, column=1)

    def onError(self):

        mbox.showerror("Error", "Could not open file")

    def onWarn(self):

        mbox.showwarning("Warning", "Deprecated function call")

    def onQuest(self):

        mbox.askquestion("Question", "Are you sure to quit?")

    def onInfo(self):

        mbox.showinfo("Information", "Download completed")


def main():

    root = Tk()
    ex = Example()
    root.geometry("300x150+300+300")
    root.mainloop()


if __name__ == "__main__":
    main()
from tkinter import filedialog

source = filedialog.askopenfile(
    mode='r',
    title='Select a CSV file to copy',
    filetypes=[('CSV', '*.csv *.CSV')])

if not source:
    exit()

destination = filedialog.asksaveasfile(
    mode='w',
    title='Select a destination file',
    defaultextension='.csv',
    filetypes=[('CSV', '*.csv *.CSV')])

destination.write(source.read())
source.close()
destination.close()
from .. import software_api
import tkinter as tk
from PIL import Image, EpsImagePlugin
from functools import partial
import os
import json

app_icon = "Paintapp_Logo.png"
software_name = "Paintapp"
software_dir = "paintapp"
is_GUI = True
min_size = (600, 400)
max_size = (900, 500)
default_size = None

# Use vars
color = "#000000"
color_var = tk.StringVar()
color_var.set(color)

dot_size = 3
dot_size_var = tk.IntVar()
dot_size_var.set(dot_size)

nbr_imported_images = 0

os.chdir(os.path.dirname(os.path.realpath(__file__)))
# Translations
if software_api.REGISTRY["SYSTEM_LANG"].lower() == "fr":
	translation_file = open("translations_fr.json", "r", encoding="utf-8")
else:
	translation_file = open("translations_en.json", "r")
TRANSLATIONS = json.load(translation_file)
translation_file.close()

os.chdir("../../../")

def on_app_launch(frame:tk.Frame, width:int=100, height:int=100):
	settings_frame_params = {
		"width": width,
		"height": round(height * 0.2),
		"bg": "#e0e0e0"
	}
	canvas_frame_params = {
		"width": width,
		"height": height - settings_frame_params["height"],
		"bg": "#e0e0e0"
	}
	canvas_size = {
		"width": 300,
		"height": 250
	}

	# ! Creating frames
	settings_frame = tk.Frame(
		frame,
		**settings_frame_params
	)
	canvas_frame = tk.Frame(
		frame,
		**canvas_frame_params
	)

	# ! Creating settings
	# Color definition function
	def change_color():
		globals()["color"] = color_var.get()

	# Color definition entry
	color_definition = tk.Entry(
		settings_frame,
		textvariable = color_var
	)
	color_definition.grid(row=0, column=0)
	validate_color_definition = tk.Button(
		settings_frame,
		text = "->",
		command = change_color
	)
	validate_color_definition.grid(row=0, column=1, sticky="w")

	# Creating function for dot size
	def change_dot_size():
		globals()["dot_size"] = dot_size_var.get()

	# Dot size entry
	dot_size = tk.Entry(
		settings_frame,
		textvariable=dot_size_var
	)
import pyperclip
import os
	dot_size.grid(row=1, column=0)
	validate_dot_size = tk.Button(
		settings_frame,
		text="->",
		command=change_dot_size
	)
	validate_dot_size.grid(row=1, column=1, sticky="w")

	# Import image
	import_image_path_var = tk.StringVar()
	import_image_path = tk.Entry(
		settings_frame,
		textvariable = import_image_path_var
	)
	import_image_path.grid(
		row = 0,
		column = 2,
		columnspan = 2
	)
	import_image_button = tk.Button(
		settings_frame,
		text = TRANSLATIONS["Import"],
		command = partial(import_image, import_image_path_var)
	)
	import_image_button.grid(
		row = 1,
		column = 3,
		sticky="w"
	)

	# ! Creating drawable zone
	globals()["main_canvas"] = tk.Canvas(
		canvas_frame,
		highlightthickness = 2,
		bg = "white",
		**canvas_size
	)
	globals()["main_canvas"].bind("<B1-Motion>", display)
	globals()["main_canvas"].pack(anchor="center")

	# Canvas size
	canvas_width_var = tk.IntVar()
	canvas_width_var.set(canvas_size["width"])
	canvas_width = tk.Entry(
		settings_frame,
		textvariable=canvas_width_var,
		width = 10
	)
	canvas_width.grid(row=0, column=4)
	canvas_height_var = tk.IntVar()
	canvas_height_var.set(canvas_size["height"])
	canvas_height = tk.Entry(
		settings_frame,
		textvariable=canvas_height_var,
		width = 10
	)
	canvas_height.grid(row=0, column=5)
	canvas_size_apply = tk.Button(
		settings_frame,
		text = TRANSLATIONS["Apply"],
		command = partial(apply_canvas_size, canvas_width_var, canvas_height_var)
	)
	canvas_size_apply.grid(row=1, column=4, columnspan=2)

	# ! Creating save button
	save_button = tk.Button(
		settings_frame,
		text = TRANSLATIONS["Save"],
		command = partial(getter, globals()["main_canvas"], import_image_path_var)
	)
	save_button.grid(row = 1, column = 2, sticky = "e")

	# ! Reset canvas button
	def reset_canvas():
		globals()["main_canvas"].delete("all")

	reset_canvas_button = tk.Button(
		settings_frame,
		text = TRANSLATIONS["Reset"],
		command = reset_canvas
	)
	reset_canvas_button.grid(
		row = 0,
		column = 6,
		rowspan = 2
	)

	# ! Placing the frames
	settings_frame.place(
		x = 0,
		y = 0,
		width = settings_frame_params["width"],
		height = settings_frame_params["height"]
	)
	canvas_frame.place(
		x = 0,
		y = settings_frame_params["height"]
	)

def display(event):
	global color
	global dot_size
	# Coordinates.
	x1, y1, x2, y2 = (event.x - dot_size), (event.y - dot_size), (event.x + dot_size), (event.y + dot_size)

	# specify type of display
	globals()["main_canvas"].create_arc(
		x1,
		y1,
		x2,
		y2,
		fill = color,
		outline = color
	)

def getter(widget, filename):
	"""
	Grabs the image and saves it.
	"""
	os.chdir(os.path.dirname(os.path.realpath(__file__)))
	filename = filename.get()  # Because it is a StringVar

	# Setting the ghostscript location
	EpsImagePlugin.gs_windows_binary = r'gs9.53.3/bin/gswin64c.exe'
	EpsImagePlugin.gs_linux_binary = r'gs9.53.3/bin/gs-9533-linux-x86_64.exe'

	# Path to the saving directory
	path = f"../../{software_api.REGISTRY['USERS_FOLDER']}/{software_api.current_user}"\
			     f"/_images/_{software_dir}/"

	# If it doesn't exits, we create all the needed folders
	if not os.path.exists(path):
		try:
			os.mkdir(f"../../{software_api.REGISTRY['USERS_FOLDER']}/{software_api.current_user}/_images")
		except:
			pass
		try:
			os.mkdir(f"../../{software_api.REGISTRY['USERS_FOLDER']}/{software_api.current_user}/_images/_{software_dir}")
		except:
			pass

	# Saving as EPS
	widget.postscript(file = path + filename.replace("../", "") + '.eps')

	# Exporting as PNG
	img = Image.open(path + filename.replace("../", "") + '.eps')
	img.save(path + filename.replace("../", "") + '.png', 'png')

	# Trying to remove the EPS image
	try:
		os.remove(filename + ".eps")
	except:
		pass

	software_api.notify(
		software_name, "Saved image to " \
               + path.replace("../", "").replace(software_api.REGISTRY["USERS_FOLDER"], "", 1)\
		               +filename.replace("../", "")+".png"
	)

	os.chdir("../../../")

def import_image(path):
	global nbr_imported_images
	os.chdir(os.path.dirname(os.path.realpath(__file__)))

	path_content = path.get() if not isinstance(path, str) else path

	# Import the image
	try:
		globals()["imported_image_"+str(nbr_imported_images)] = tk.PhotoImage(
			file=f"../../{software_api.REGISTRY['USERS_FOLDER']}/{software_api.current_user}"
			     f"/_images/_{software_dir}/" + path_content.replace("../", "")
		)
	except Exception as e:
		print(path)
		try:
			path.set(TRANSLATIONS["UnableLoadImage"] + " " + path_content)
		except:
			pass
		software_api.notify(software_name, f"Unable to load the image {path_content}")
		print(e)
		return None

	# Displays the image
	globals()["main_canvas"].create_image(
		0,
		0,
		image=globals()["imported_image_"+str(nbr_imported_images)],
		anchor = "nw"
	)
	globals()["main_canvas"].pack_forget()
	globals()["main_canvas"].pack()

	# Increments the number of imported images
	nbr_imported_images += 1

	software_api.notify(software_name, "Imported image")

	os.chdir("../../../")

def apply_canvas_size(width, height):
	width = width.get()
	height = height.get()
	globals()["main_canvas"].config(
		width = width,
		height = height
	)

def on_file_open(path):
	import_image(path.split("/")[-1])
from tkinter import *

canvas_width = 500
canvas_height = 150


def paint(event):
    python_green = "#476042"
    x1, y1 = (event.x - 1), (event.y - 1)
    x2, y2 = (event.x + 1), (event.y + 1)
    w.create_oval(x1, y1, x2, y2, fill=python_green)


master = Tk()
master.title("Painting using Ovals")
w = Canvas(master, width=canvas_width, height=canvas_height)
w.pack(expand=YES, fill=BOTH)
w.bind("<B1-Motion>", paint)

message = Label(master, text="Press and Drag the mouse to draw")
message.pack(side=BOTTOM)

mainloop()
# importing libraries
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import sys

# window class


class Window(QMainWindow):
    def __init__(self):
        super().__init__()

        # setting application window up
        self.setWindowTitle("Paint Application")
        self.setGeometry(100, 100, 800, 600)

        # setting up image object
        self.image = QImage(self.size(), QImage.Format_RGB32)
        self.image.fill(Qt.white)

        # variables
        # drawing flag - shows if currently drawing
        self.drawing = False

        # brush specifications
        self.brushSize = 2
        self.brushColor = Qt.black
        self.brushStyle = Qt.SolidLine

        # QPoint object to track the point of cursor release
        self.lastPoint = QPoint()

        # creating menu bar
        mainMenu = self.menuBar()
        fileMenu = mainMenu.addMenu("File")
        brush_size = mainMenu.addMenu("Brush Size")
        brush_color = mainMenu.addMenu("Brush Color")
        canvas_color = mainMenu.addMenu("Canvas Color")
        brush_style = mainMenu.addMenu("Brush Style")

        # creating save action
        saveAction = QAction("Save", self)
        saveAction.setShortcut("Ctrl + S")
        fileMenu.addAction(saveAction)
        saveAction.triggered.connect(self.save)

        # creating clear action
        clearAction = QAction("Clear", self)
        clearAction.setShortcut("Ctrl + C")
        fileMenu.addAction(clearAction)
        clearAction.triggered.connect(self.clear)

        # creating options for brush sizes
        pix_4 = QAction("4px", self)
        brush_size.addAction(pix_4)
        pix_4.triggered.connect(self.Pixel_4)

        pix_7 = QAction("7px", self)
        brush_size.addAction(pix_7)
        pix_7.triggered.connect(self.Pixel_7)

        pix_9 = QAction("9px", self)
        brush_size.addAction(pix_9)
        pix_9.triggered.connect(self.Pixel_9)

        pix_12 = QAction("12px", self)
        brush_size.addAction(pix_12)
        pix_12.triggered.connect(self.Pixel_12)

        # creating options for brush color
        black = QAction("Black", self)
        brush_color.addAction(black)
        black.triggered.connect(self.blackColor)

        white = QAction("White", self)
        brush_color.addAction(white)
        white.triggered.connect(self.whiteColor)

        green = QAction("Green", self)
        brush_color.addAction(green)
        green.triggered.connect(self.greenColor)

        yellow = QAction("Yellow", self)
        brush_color.addAction(yellow)
        yellow.triggered.connect(self.yellowColor)

        red = QAction("Red", self)
        brush_color.addAction(red)
        red.triggered.connect(self.redColor)

        # Creating Canvas colors
        red_canvas = QAction("Red", self)
        canvas_color.addAction(red_canvas)
        red_canvas.triggered.connect(self.redCanvas)

        black_canvas = QAction("Black", self)
        canvas_color.addAction(black_canvas)
        black_canvas.triggered.connect(self.blackCanvas)

        yellow_canvas = QAction("Yellow", self)
        canvas_color.addAction(yellow_canvas)
        yellow_canvas.triggered.connect(self.yellowCanvas)

        green_canvas = QAction("Green", self)
        canvas_color.addAction(green_canvas)
        green_canvas.triggered.connect(self.greenCanvas)

        white_canvas = QAction("White", self)
        canvas_color.addAction(white_canvas)
        white_canvas.triggered.connect(self.whiteCanvas)

        # Creating Brush styles
        solid_brush = QAction("Solid", self)
        brush_style.addAction(solid_brush)
        solid_brush.triggered.connect(self.solidBrush)

        dot_brush = QAction("Dot", self)
        brush_style.addAction(dot_brush)
        dot_brush.triggered.connect(self.dotBrush)

        dash_brush = QAction("Dash", self)
        brush_style.addAction(dash_brush)
        dash_brush.triggered.connect(self.dashBrush)

        dashDot_brush = QAction("Dash Dot", self)
        brush_style.addAction(dashDot_brush)
        dashDot_brush.triggered.connect(self.dashDotBrush)

    # method for checking mouse clicks
    def mousePressEvent(self, event):

        # if left mouse button is pressed
        if event.button() == Qt.LeftButton:
            # set drawing flag true
            self.drawing = True
            # set last point to the point of cursor
            self.lastPoint = event.pos()

    # method for tracking mouse activity (enables drawing)
    def mouseMoveEvent(self, event):

        # checking if left button is pressed and drawing flag is true
        if (event.buttons() & Qt.LeftButton) & self.drawing:

            # creating painter object
            painter = QPainter(self.image)
            # set the pen of the painter
            painter.setPen(QPen(self.brushColor, self.brushSize,
                                self.brushStyle, Qt.RoundCap, Qt.RoundJoin))
            # draw line from the last point
            # of cursor to the current point
            painter.drawLine(self.lastPoint, event.pos())
            self.lastPoint = event.pos()
            self.update()

    # method for mouse left button release
    def mouseReleaseEvent(self, event):

        if event.button() == Qt.LeftButton:
            # make drawing flag false
            self.drawing = False

    # paint event
    def paintEvent(self, event):
        # create a canvas
        canvasPainter = QPainter(self)
        canvasPainter.drawImage(self.rect(), self.image, self.image.rect())

    # method for saving canvas
    def save(self):
        filePath, _ = QFileDialog.getSaveFileName(self, "Save Image", "",
                                                  "PNG(*.png);;JPEG(*.jpg *.jpeg);;All Files(*.*) ")
        if filePath == "":
            return
        self.image.save(filePath)

    # method for clearing canvas
    def clear(self):
        # make the whole canvas white
        self.image.fill(Qt.white)
        self.update()

    # methods for changing pixel sizes
    def Pixel_4(self):
        self.brushSize = 4

    def Pixel_7(self):
        self.brushSize = 7

    def Pixel_9(self):
        self.brushSize = 9

    def Pixel_12(self):
        self.brushSize = 12

    # methods for changing brush color
    def blackColor(self):
        self.brushColor = Qt.black

    def whiteColor(self):
        self.brushColor = Qt.white

    def greenColor(self):
        self.brushColor = Qt.green

    def yellowColor(self):
        self.brushColor = Qt.yellow

    def redColor(self):
        self.brushColor = Qt.red

    # methods for changing canvas color
    def redCanvas(self):
        self.image.fill(Qt.red)
        red_msg = QMessageBox()
        red_msg.setText("Canvas color changed to Red!")
        x = red_msg.exec_()

    def blackCanvas(self):
        self.image.fill(Qt.black)
        black_msg = QMessageBox()
        black_msg.setText("Canvas color changed to Black!")
        x = black_msg.exec_()

    def yellowCanvas(self):
        self.image.fill(Qt.yellow)
        yellow_msg = QMessageBox()
        yellow_msg.setText("Canvas color changed to yellow!")
        x = yellow_msg.exec_()

    def greenCanvas(self):
        self.image.fill(Qt.green)
        green_msg = QMessageBox()
        green_msg.setText("Canvas color changed to green!")
        x = green_msg.exec_()

    def whiteCanvas(self):
        self.image.fill(Qt.white)
        white_msg = QMessageBox()
        white_msg.setText("Canvas color changed to white!")
        x = white_msg.exec_()

    # methods to change brush style
    def solidBrush(self):
        self.brushStyle = Qt.SolidLine

    def dotBrush(self):
        self.brushStyle = Qt.DotLine

    def dashBrush(self):
        self.brushStyle = Qt.DashLine

    def dashDotBrush(self):
        self.brushStyle = Qt.DashDotLine


# create pyqt5 app
App = QApplication(sys.argv)

# create the instance of our Window
window = Window()
window.show()

# start the app
sys.exit(App.exec())
import tkinter as tk

app = tk.Tk()
app.title("My App")
app.geometry("150x75")

panedwindow = tk.PanedWindow(showhandle=True,sashrelief=tk.SUNKEN)

leftLabel = tk.Label(panedwindow, text="Left Label")
panedwindow.add(leftLabel)

rightLabel = tk.Label(panedwindow, text="Right Pane")
panedwindow.add(rightLabel)

panedwindow.pack(fill=tk.BOTH, expand=True)

app.mainloop()
from tkinter import *

root = Tk()

m1 = PanedWindow()
m1.pack(fill=BOTH, expand=1)

left = Label(m1, text="left pane")
m1.add(left)

m2 = PanedWindow(m1, orient=VERTICAL)
m1.add(m2)

top = Label(m2, text="top pane")
m2.add(top)

bottom = Label(m2, text="bottom pane")

m2.add(bottom)

root.mainloop()
import tkinter as tk
from tkinter import Tk

# Adding a Tk window
root = tk.Tk()
root.geometry("640x480")  # Configuring the resolution

# Adding the canvas to put the graph on it


canvas_width = 1800
canvas_height = 900
canvas = tk.Canvas(root, width=canvas_width, height=canvas_height)
canvas.grid(row=0, column=0)


def draw_axis(
    canvas_object,
):  # a function in order to draw the horizontal and vertical lines and setting the scroll
    canvas_object.update()
    x_origin = canvas_object.winfo_width() // 2
    y_origin = canvas_object.winfo_height() // 2
    canvas_object.configure(scrollregion=(-x_origin, -y_origin, x_origin, y_origin))
    canvas_object.create_line(x_origin, 0, -x_origin, 0)
    canvas_object.create_line(0, y_origin, 0, -y_origin)


def parabola(number, size):  # Calculating the parabola
    result = number * number // size
    return result


def plot(canvas_object, size, color):  # The grand function to do the plotting process
    y_location = []
    x_location = []
    for each in range(-size, size + 1):
        y_location.append(parabola(each, size))
        x_location.append(each)
    for each_of in range(0, size * 2 + 2):
        if each_of <= size * 2 - 1:
            canvas_object.create_line(
                x_location[each_of],
                -y_location[each_of],
                x_location[each_of + 1],
                -y_location[each_of + 1],
                fill=str(color),
            )
            print(
                "A line from X location of {} and Y location of {} to the X location of {} and Y location of {} was"
                " drawn, Color = {}".format(
                    x_location[each_of],
                    y_location[each_of],
                    x_location[each_of + 1],
                    y_location[each_of + 1],
                    color,
                )
            )
        else:
            break


def checkered(canvas, line_distance):
    # vertical lines at an interval of "line_distance" pixel
    for x in range(line_distance, canvas_width, line_distance):
        canvas.create_line(x, 0, x, canvas_height, fill="#476042")
    # horizontal lines at an interval of "line_distance" pixel
    for y in range(line_distance, canvas_height, line_distance):
        canvas.create_line(0, y, canvas_width, y, fill="#476042")

        canvas.create_line(10, 450, 1800, 450, fill="black", width=4)
    canvas.create_line(900, 10, 900, 900, fill="black", width=4)
    

    canvas.create_line(50, 440, 50, 460, fill="blue", width=4)
    canvas.create_line(100, 440, 100, 460, fill="blue", width=4)
    canvas.create_line(150, 440, 150, 460, fill="blue", width=4)
    canvas.create_line(200, 440, 200, 460, fill="blue", width=4)
    canvas.create_line(250, 440, 250, 460, fill="blue", width=4)
    canvas.create_line(300, 440, 300, 460, fill="blue", width=4)
    canvas.create_line(350, 440, 350, 460, fill="blue", width=4)
    canvas.create_line(400, 440, 400, 460, fill="blue", width=4)
    canvas.create_line(450, 440, 450, 460, fill="blue", width=4)
    canvas.create_line(500, 440, 500, 460, fill="blue", width=4)
    canvas.create_line(550, 440, 550, 460, fill="blue", width=4)
    canvas.create_line(600, 440, 600, 460, fill="blue", width=4)
    canvas.create_line(650, 440, 650, 460, fill="blue", width=4)
    canvas.create_line(700, 440, 700, 460, fill="blue", width=4)
    canvas.create_line(750, 440, 750, 460, fill="blue", width=4)
    canvas.create_line(800, 440, 800, 460, fill="blue", width=4)
    canvas.create_line(850, 440, 850, 460, fill="blue", width=4)
    canvas.create_line(900, 440, 900, 460, fill="blue", width=4)
    canvas.create_line(950, 440, 950, 460, fill="blue", width=4)
    canvas.create_line(1000, 440, 1000, 460, fill="blue", width=4)
    canvas.create_line(1050, 440, 1050, 460, fill="blue", width=4)
    canvas.create_line(1100, 440, 1100, 460, fill="blue", width=4)
    canvas.create_line(1150, 440, 1150, 460, fill="blue", width=4)
    canvas.create_line(1200, 440, 1200, 460, fill="blue", width=4)
    canvas.create_line(1250, 440, 1250, 460, fill="blue", width=4)
    canvas.create_line(1300, 440, 1300, 460, fill="blue", width=4)
    canvas.create_line(1350, 440, 1350, 460, fill="blue", width=4)
    canvas.create_line(1400, 440, 1400, 460, fill="blue", width=4)
    canvas.create_line(1450, 440, 1450, 460, fill="blue", width=4)
    canvas.create_line(1500, 440, 1500, 460, fill="blue", width=4)
    canvas.create_line(1550, 440, 1550, 460, fill="blue", width=4)
    canvas.create_line(1600, 440, 1600, 460, fill="blue", width=4)
    canvas.create_line(1650, 440, 1650, 460, fill="blue", width=4)
    canvas.create_line(1700, 440, 1700, 460, fill="blue", width=4)
    canvas.create_line(1750, 440, 1750, 460, fill="blue", width=4)
    canvas.create_line(1800, 440, 1800, 460, fill="blue", width=4)

    
    canvas.create_line(890, 20, 910, 20, fill="blue", width=4)
    canvas.create_line(890, 30, 910, 30, fill="blue", width=4)
    canvas.create_line(890, 50, 910, 50, fill="blue", width=4)
    canvas.create_line(890, 100, 910, 100, fill="blue", width=4)
    canvas.create_line(890, 150, 910, 150, fill="blue", width=4)
    canvas.create_line(890, 200, 910, 200, fill="blue", width=4)
    canvas.create_line(890, 250, 910, 250, fill="blue", width=4)
    canvas.create_line(890, 300, 910, 300, fill="blue", width=4)
    canvas.create_line(890, 350, 910, 350, fill="blue", width=4)
    canvas.create_line(890, 400, 910, 400, fill="blue", width=4)
    canvas.create_line(890, 450, 910, 450, fill="blue", width=4)
    canvas.create_line(890, 500, 910, 500, fill="blue", width=4)
    canvas.create_line(890, 550, 910, 550, fill="blue", width=4)
    canvas.create_line(890, 600, 910, 600, fill="blue", width=4)
    canvas.create_line(890, 650, 910, 650, fill="blue", width=4)
    canvas.create_line(890, 700, 910, 700, fill="blue", width=4)
    canvas.create_line(890, 750, 910, 750, fill="blue", width=4)
    canvas.create_line(890, 800, 910, 800, fill="blue", width=4)
    canvas.create_line(890, 850, 910, 850, fill="blue", width=4)
    canvas.create_line(890, 900, 910, 900, fill="blue", width=4)
    canvas.create_line(890, 950, 910, 950, fill="blue", width=4)
    canvas.create_line(900, 1000, 910, 1000, fill="blue", width=4)


if __name__ == "__main__":
    checkered(canvas, 10)

    draw_axis(canvas)
    plot(canvas, 500, "red")
    root.mainloop()  # running the window
f8 = ttk.Frame(notebook)
f8.grid(row=0, column=0)

notebook.add(f8, text="2")


def grid1(canvas, line_distance):
    # vertical lines at an interval of "line_distance" pixel
    for x in range(line_distance, canvas_width, line_distance):
        canvas.create_line(x, 0, x, canvas_height, fill="#476042")
    # horizontal lines at an interval of "line_distance" pixel
    for y in range(line_distance, canvas_height, line_distance):
        canvas.create_line(0, y, canvas_width, y, fill="#476042")


canvas_width = 1800
canvas_height = 900
boo = Canvas(f8, width=canvas_width, height=canvas_height)
boo.grid(row=0, column=0)
boo.create_line(10, 450, 1800, 450, fill="black", width=4)
boo.create_line(900, 10, 900, 900, fill="black", width=4)

grid1(boo, 10)


boo.create_line(50, 440, 50, 460, fill="blue", width=4)
boo.create_line(100, 440, 100, 460, fill="blue", width=4)
boo.create_line(150, 440, 150, 460, fill="blue", width=4)
boo.create_line(200, 440, 200, 460, fill="blue", width=4)
boo.create_line(250, 440, 250, 460, fill="blue", width=4)
boo.create_line(300, 440, 300, 460, fill="blue", width=4)
boo.create_line(350, 440, 350, 460, fill="blue", width=4)
boo.create_line(400, 440, 400, 460, fill="blue", width=4)
boo.create_line(450, 440, 450, 460, fill="blue", width=4)
boo.create_line(500, 440, 500, 460, fill="blue", width=4)
boo.create_line(550, 440, 550, 460, fill="blue", width=4)
boo.create_line(600, 440, 600, 460, fill="blue", width=4)
boo.create_line(650, 440, 650, 460, fill="blue", width=4)
boo.create_line(700, 440, 700, 460, fill="blue", width=4)
boo.create_line(750, 440, 750, 460, fill="blue", width=4)
boo.create_line(800, 440, 800, 460, fill="blue", width=4)
boo.create_line(850, 440, 850, 460, fill="blue", width=4)
boo.create_line(900, 440, 900, 460, fill="blue", width=4)
boo.create_line(950, 440, 950, 460, fill="blue", width=4)
boo.create_line(1000, 440, 1000, 460, fill="blue", width=4)
boo.create_line(1050, 440, 1050, 460, fill="blue", width=4)
boo.create_line(1100, 440, 1100, 460, fill="blue", width=4)
boo.create_line(1150, 440, 1150, 460, fill="blue", width=4)
boo.create_line(1200, 440, 1200, 460, fill="blue", width=4)
boo.create_line(1250, 440, 1250, 460, fill="blue", width=4)
boo.create_line(1300, 440, 1300, 460, fill="blue", width=4)
boo.create_line(1350, 440, 1350, 460, fill="blue", width=4)
boo.create_line(1400, 440, 1400, 460, fill="blue", width=4)
boo.create_line(1450, 440, 1450, 460, fill="blue", width=4)
boo.create_line(1500, 440, 1500, 460, fill="blue", width=4)
boo.create_line(1550, 440, 1550, 460, fill="blue", width=4)
boo.create_line(1600, 440, 1600, 460, fill="blue", width=4)
boo.create_line(1650, 440, 1650, 460, fill="blue", width=4)
boo.create_line(1700, 440, 1700, 460, fill="blue", width=4)
boo.create_line(1750, 440, 1750, 460, fill="blue", width=4)
boo.create_line(1800, 440, 1800, 460, fill="blue", width=4)


boo.create_line(890, 20, 910, 20, fill="blue", width=4)
boo.create_line(890, 30, 910, 30, fill="blue", width=4)
boo.create_line(890, 50, 910, 50, fill="blue", width=4)
boo.create_line(890, 100, 910, 100, fill="blue", width=4)
boo.create_line(890, 150, 910, 150, fill="blue", width=4)
boo.create_line(890, 200, 910, 200, fill="blue", width=4)
boo.create_line(890, 250, 910, 250, fill="blue", width=4)
boo.create_line(890, 300, 910, 300, fill="blue", width=4)
boo.create_line(890, 350, 910, 350, fill="blue", width=4)
boo.create_line(890, 400, 910, 400, fill="blue", width=4)
boo.create_line(890, 450, 910, 450, fill="blue", width=4)
boo.create_line(890, 500, 910, 500, fill="blue", width=4)
boo.create_line(890, 550, 910, 550, fill="blue", width=4)
boo.create_line(890, 600, 910, 600, fill="blue", width=4)
boo.create_line(890, 650, 910, 650, fill="blue", width=4)
boo.create_line(890, 700, 910, 700, fill="blue", width=4)
boo.create_line(890, 750, 910, 750, fill="blue", width=4)
boo.create_line(890, 800, 910, 800, fill="blue", width=4)
boo.create_line(890, 850, 910, 850, fill="blue", width=4)
boo.create_line(890, 900, 910, 900, fill="blue", width=4)
boo.create_line(890, 950, 910, 950, fill="blue", width=4)
boo.create_line(900, 1000, 910, 1000, fill="blue", width=4)

#
boo.create_text(300, 50, text="300x50", fill="black", font=("URW Chancery L", 15))
boo.create_text(300, 450, text="300x450", fill="black", font=("URW Chancery L", 15))
boo.create_text(50, 450, text="50x450", fill="black", font=("URW Chancery L", 15))
boo.create_text(800, 800, text="800x800", fill="black", font=("URW Chancery L", 15))
boo.create_text(400, 600, text="400x600", fill="black", font=("URW Chancery L", 15))
boo.create_text(200, 150, text="200x150", fill="black", font=("URW Chancery L", 15))
boo.create_text(1300, 500, text="1300x500", fill="black", font=("URW Chancery L", 15))
boo.create_text(1700, 800, text="1700x800", fill="black", font=("URW Chancery L", 15))
boo.create_text(1600, 250, text="1600x250", fill="black", font=("URW Chancery L", 15))
boo.create_text(1500, 150, text="1500x150", fill="black", font=("URW Chancery L", 15))
boo.create_text(1400, 650, text="1400x650", fill="black", font=("URW Chancery L", 15))

boo.create_text(1200, 700, text="1200x700", fill="black", font=("URW Chancery L", 15))
boo.create_text(1100, 900, text="1100x900", fill="black", font=("URW Chancery L", 15))
boo.create_text(1000, 50, text="1000x50", fill="black", font=("URW Chancery L", 15))
boo.create_text(900, 750, text="900x750", fill="black", font=("URW Chancery L", 15))
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 1167
        height = 681
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GLabel_388 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_388["font"] = ft
        GLabel_388["fg"] = "#333333"
        GLabel_388["justify"] = "center"
        GLabel_388["text"] = "label"
        GLabel_388.place(x=70, y=50, width=1016, height=530)

        GButton_26 = tk.Button(root)
        GButton_26["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_26["font"] = ft
        GButton_26["fg"] = "#273134"
        GButton_26["justify"] = "center"
        GButton_26["text"] = "Button"
        GButton_26.place(x=60, y=630, width=70, height=25)
        GButton_26["command"] = self.GButton_26_command

        GButton_542 = tk.Button(root)
        GButton_542["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_542["font"] = ft
        GButton_542["fg"] = "#273134"
        GButton_542["justify"] = "center"
        GButton_542["text"] = "Button"
        GButton_542.place(x=210, y=630, width=70, height=25)
        GButton_542["command"] = self.GButton_542_command

        GButton_505 = tk.Button(root)
        GButton_505["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_505["font"] = ft
        GButton_505["fg"] = "#273134"
        GButton_505["justify"] = "center"
        GButton_505["text"] = "Button"
        GButton_505.place(x=340, y=630, width=70, height=25)
        GButton_505["command"] = self.GButton_505_command

        GButton_341 = tk.Button(root)
        GButton_341["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_341["font"] = ft
        GButton_341["fg"] = "#273134"
        GButton_341["justify"] = "center"
        GButton_341["text"] = "Button"
        GButton_341.place(x=460, y=630, width=70, height=25)
        GButton_341["command"] = self.GButton_341_command

        GButton_526 = tk.Button(root)
        GButton_526["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_526["font"] = ft
        GButton_526["fg"] = "#273134"
        GButton_526["justify"] = "center"
        GButton_526["text"] = "Button"
        GButton_526.place(x=580, y=630, width=70, height=25)
        GButton_526["command"] = self.GButton_526_command

        GButton_815 = tk.Button(root)
        GButton_815["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_815["font"] = ft
        GButton_815["fg"] = "#273134"
        GButton_815["justify"] = "center"
        GButton_815["text"] = "Button"
        GButton_815.place(x=700, y=630, width=70, height=25)
        GButton_815["command"] = self.GButton_815_command

        GButton_863 = tk.Button(root)
        GButton_863["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_863["font"] = ft
        GButton_863["fg"] = "#273134"
        GButton_863["justify"] = "center"
        GButton_863["text"] = "Button"
        GButton_863.place(x=820, y=630, width=70, height=25)
        GButton_863["command"] = self.GButton_863_command

        GButton_217 = tk.Button(root)
        GButton_217["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_217["font"] = ft
        GButton_217["fg"] = "#273134"
        GButton_217["justify"] = "center"
        GButton_217["text"] = "Button"
        GButton_217.place(x=930, y=630, width=70, height=25)
        GButton_217["command"] = self.GButton_217_command

    def GButton_26_command(self):
        print("command")

    def GButton_542_command(self):
        print("command")

    def GButton_505_command(self):
        print("command")

    def GButton_341_command(self):
        print("command")

    def GButton_526_command(self):
        print("command")

    def GButton_815_command(self):
        print("command")

    def GButton_863_command(self):
        print("command")

    def GButton_217_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk  # this is pillow


class PictureViewer(tk.Tk):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.image_display = tk.Label(self)
        self.image_display.pack(expand=1, fill='both')
        self.photoimage = None
        button = tk.Button(self, text='Select image',
                           command=self.choose_file)
        button.pack()

    def choose_file(self):
        filename = filedialog.askopenfilename(
            filetypes=(
                ('PNG files', '*.png *.PNG'),
                ('JPEG files', '*.jpg *.jpeg *.JPG *.JPEG'),
                ('GIF files', '*.gif *.GIF')
            ))
        image = Image.open(filename)
        self.photoimage = ImageTk.PhotoImage(image)
        self.image_display.config(image=self.photoimage)


app = PictureViewer()
app.mainloop()
import tkinter as tk
from tkinter import messagebox

see_more = messagebox.askyesno(
    title='See more?',
    message='Would you like to see another box?',
    detail='Click NO to quit'
)

if not see_more:
    exit()

messagebox.showinfo(
    title='You got it',
    message="Ok, here's another dialog.",
    detail='Hope you like it!'
)
'''
Created on Jan 7, 2018

@author: aditya

This program demonstrates use of Toplevel windows in TKINTER
'''

import tkinter as tk
from tkinter import ttk

class TopLevelApp:
    def __init__(self, master):
        self.master = master
        master.title('Master')
        self.pop_btn = ttk.Button(master, text = 'Show Pop-up', command = self.getPop)
        self.pop_btn.pack()
        self.master.config(padx = 100, pady=50)
        
    def getPop(self):
        self.window  = tk.Toplevel(self.master)
        self.window.title('Popped')
        self.window.grab_set()
        ttk.Button(self.window, text = 'Hide Master', command = self.hideMaster).pack()
        ttk.Button(self.window, text = 'Normalize Master window', command = self.getMaster).pack()
        self.window.config(padx = 100, pady=50)
        ttk.Button(self.window, text = 'Create pop-up', command = self.getPopup).pack()
        ttk.Button(self.window, text = 'Iconify(Minimize)', command = self.iconifywindow).pack()
        
    def iconifywindow(self):
        self.window.iconify()
        
    def getPopup(self):
        self.window2  = tk.Toplevel(self.window)
        self.window2.title('Popped Up')
        self.window2.config(padx = 25, pady=25)
        self.window2.maxsize(640, 480)
        self.window2.minsize(300, 400)
        self.window2.geometry('640x480+60+60')
        self.window2.grab_set()
        ttk.Button(self.window2, text = 'Minimize', command = self.minimizePopUp).pack()
        ttk.Button(self.window2, text = 'Maximize', command = self.maximizePopUp).pack()
        ttk.Button(self.window2, text = 'Normalize', command = self.normalizePopUp).pack()
        ttk.Button(self.window2, text = 'Resize Window - TRUE', command = self.makeResizeTrue).pack()
        ttk.Button(self.window2, text = 'Resize Window - FALSE', command = self.makeResizeFalse).pack()
        ttk.Button(self.window2, text = 'Close', command = self.closewindow).pack()
    
    def makeResizeTrue(self):
        self.window2.resizable(True, True)
    
    def makeResizeFalse(self):
        self.window2.resizable(False, False)
        
    def getMaster(self):
        self.master.state('normal')
        self.window.grab_set()
        
    def hideMaster(self):
        self.master.state('withdrawn')
        
    def minimizePopUp(self):
        self.window2.state('iconic')
    
    def maximizePopUp(self):
        self.window2.state('zoomed')
        
    def normalizePopUp(self):
        self.window2.state('normal')
        
    def closewindow(self):
        self.window2.destroy()
        
def launchTopLevelApp():
    root = tk.Tk()
    TopLevelApp(root)
    tk.mainloop()
    
if __name__=='__main__':
    launchTopLevelApp()
    
    
from tkinter import *
from math import *


def evaluate(event):
    res.configure(text="Result: " + str(eval(entry.get())))


w = Tk()
Label(w, text="Your Expression:").pack()
entry = Entry(w)
entry.bind("<Return>", evaluate)
entry.pack()
res = Label(w)
res.pack()
w.mainloop()
'''
Created on Jan 14, 2018

@author: aditya

This program shows the use of notebook in tkinter
Notebook is used to create Tabs in the application.
This enables browsing different pages in the application.

Frame widget from tkinter is used in this Application to demostrate the use of Notebook/tabs.
Please note that other widgets can also be used as per the requirement.
'''

import tkinter as tk
from tkinter import ttk

class NoteBookApp:
    def __init__(ego, master):
        ego.master = master
        ego.notebk = ttk.Notebook(ego.master)
        ego.notebk.pack()
        ego.frame1 = ttk.Frame(ego.notebk, width = 400, height = 400, relief = tk.SUNKEN)
        ego.frame2 = ttk.Frame(ego.notebk, width = 400, height = 400, relief = tk.SUNKEN)
        ego.notebk.add(ego.frame1, text = 'One')
        ego.notebk.add(ego.frame2, text = 'Two')
        
        ego.btn = ttk.Button(ego.frame1, text='Add/Insert Tab at Position 1', command = ego.AddTab)
        ego.btn.pack()
        
        ego.btn2 = ttk.Button(ego.frame1, text='Disable Tab at Position 1', command = ego.disableTab)
        ego.btn2.pack()

        strdisplay = r'Tab ID:{}'.format(ego.notebk.select())
        ttk.Label(ego.frame1, text = strdisplay).pack()
        
        strdisplay2 = 'Tab index:{}'.format(ego.notebk.index(ego.notebk.select()))
        ttk.Label(ego.frame1, text = strdisplay2).pack()
        
    def AddTab(ego):
        if ego.btn['text'] == 'Add/Insert Tab at Position 1':
            ego.frame3 = ttk.Frame(ego.notebk, width = 400, height = 400, relief = tk.SUNKEN)
            ego.notebk.insert(1, ego.frame3, text = 'Additional Tab')
            ego.btn.config(text = 'Remove/Forget Tab')
        else:
            ego.notebk.forget(1)
            ego.btn.config(text = 'Add/Insert Tab at Position 1')
    
    def disableTab(ego):
        # properties of tab - accessible by using notbook.tab(tab_id, option)
        # to see available properties - print(notbook.tab(tab_id))
        if ego.btn2['text'] == 'Disable Tab at Position 1':
            ego.notebk.tab(1, state = 'disabled')
            ego.btn2.config(text = 'Hide Tab at Position 1')
        elif ego.btn2['text'] == 'Hide Tab at Position 1':
            ego.notebk.tab(1, state = 'hidden')
            ego.btn2.config(text = 'Normalize Tab at Position 1')
        elif ego.btn2['text']== 'Normalize Tab at Position 1':
            ego.notebk.tab(1, state = 'normal')
            ego.btn2.config(text = 'Disable Tab at Position 1')
        

def launchNoteBookApp():
    root = tk.Tk()
    NoteBookApp(root)
    tk.mainloop()
    

if __name__=='__main__':
    launchNoteBookApp()
    
        
# Importing pygame module
import pygame
from pygame.locals import *

# initiate pygame and give permission
# to use pygame's functionality.
pygame.init()

# create the display surface object
# of specific dimension.
window = pygame.display.set_mode((600, 600))

# Fill the scree with white color
window.fill((255, 255, 255))

# Using draw.rect module of
# pygame to draw the outlined rectangle
pygame.draw.rect(window, (0, 0, 255), [100, 100, 400, 100], 2)

# Draws the surface object to the screen.
pygame.display.update()
import pathlib
import tkinter as tk
import tkinter.ttk as ttk

PROJECT_PATH = pathlib.Path(__file__).parent
PROJECT_UI = PROJECT_PATH / "newproject"


class NewprojectWidget(ttk.Frame):
    def __init__(self, master=None, **kw):
        super(NewprojectWidget, self).__init__(master, **kw)
        self.frame2 = ttk.Frame(self)
        self.frame3 = ttk.Frame(self.frame2)
        self.frame4 = ttk.Frame(self.frame3)
        self.button1 = ttk.Button(self.frame4)
        self.button1.configure(text="button1")
        self.button1.pack(side="top")
        self.frame4.configure(height="200", width="200")
        self.frame4.grid(column="0", row="0")
        self.frame3.columnconfigure("0", minsize="1200")
        self.text1 = tk.Text(self.frame3)
        self.text1.configure(font="{URW Chancery L} 12 {}", height="10", width="50")
        self.text1.grid(
            column="0", columnspan="10", padx="10", pady="10", row="1", rowspan="10"
        )
        self.frame3.rowconfigure("1", minsize="600")
        self.frame5 = ttk.Frame(self.frame3)
        self.frame5.configure(height="200", width="200")
        self.frame5.grid(column="0", row="2")
        self.button2 = ttk.Button(self.frame3)
        self.button2.configure(text="button2")
        self.button2.grid(column="0", row="3")
        self.button3 = ttk.Button(self.frame3)
        self.button3.configure(text="button3")
        self.button3.grid(column="0", row="4")
        self.button4 = ttk.Button(self.frame3)
        self.button4.configure(text="button4")
        self.button4.grid(column="0", row="5", sticky="e")
        self.button5 = ttk.Button(self.frame3)
        self.button5.configure(text="button5")
        self.button5.grid(column="0", row="6")
        self.button6 = ttk.Button(self.frame3)
        self.button6.configure(text="button6")
        self.button6.grid(column="0", row="7", sticky="w")
        self.button7 = ttk.Button(self.frame3)
        self.button7.configure(text="button7")
        self.button7.grid(column="0", row="8")
        self.button8 = ttk.Button(self.frame3)
        self.button8.configure(text="button8")
        self.button8.grid(column="0", row="9")
        self.button9 = ttk.Button(self.frame3)
        self.button9.configure(text="button9")
        self.button9.grid(column="0", row="10")
        self.button10 = ttk.Button(self.frame3)
        self.button10.configure(text="button10")
        self.button10.grid(column="0", row="11")
        self.button11 = ttk.Button(self.frame3)
        self.button11.configure(text="button11")
        self.button11.grid(column="0", row="12")
        self.button12 = ttk.Button(self.frame3)
        self.button12.configure(text="button12")
        self.button12.grid(column="0", row="13")
        self.button13 = ttk.Button(self.frame3)
        self.button13.configure(text="button13")
        self.button13.grid(column="0", row="14")
        self.button14 = ttk.Button(self.frame3)
        self.button14.configure(text="button14")
        self.button14.grid(column="0", row="15")
        self.button15 = ttk.Button(self.frame3)
        self.button15.configure(text="button15")
        self.button15.grid(column="0", row="16")
        self.button16 = ttk.Button(self.frame3)
        self.button16.configure(text="button16")
        self.button16.grid(column="0", row="17")
        self.text2 = tk.Text(self.frame3)
        self.text2.configure(height="10", width="50")
        self.text2.grid(column="0", row="18")
        self.scrollbar1 = ttk.Scrollbar(self.frame3)
        self.scrollbar1.configure(orient="horizontal")
        self.scrollbar1.grid(column="0", row="19")
        self.scrollbar2 = ttk.Scrollbar(self.frame3)
        self.scrollbar2.configure(orient="horizontal")
        self.scrollbar2.grid(column="0", row="20")
        self.frame3.configure(height="200", width="200")
        self.frame3.grid(column="0", row="0")
        self.frame2.configure(height="200", width="200")
        self.frame2.grid(column="0", columnspan="10", row="0", sticky="nw")


if __name__ == "__main__":
    root = tk.Tk()
    widget = NewprojectWidget(root)
    widget.pack(expand=True, fill="both")
    root.mainloop()
#!/usr/bin/env python3
import tkinter as tk
import math
import re
from collections import ChainMap

Nrows = 10
Ncols = 10

cellre = re.compile(r"\b[A-Z][0-9]\b")


def cellname(i, j):
    return f'{chr(ord("A")+j)}{i+1}'


class Cell:
    def __init__(id, i, j, siblings, parent):
        id.row = i
        id.col = j
        id.siblings = siblings
        id.name = cellname(i, j)
        id.formula = "0"
        id.value = 0
        # Dependencies - must be updated if this cell changes
        id.deps = set()
        # Requirements - values required for this cell to calculate
        id.reqs = set()

        id.var = tk.StringVar()
        entry = id.widget = tk.Entry(parent, textvariable=id.var, justify="right")
        entry.bind("<FocusIn>", id.edit)
        entry.bind("<FocusOut>", id.update)
        entry.bind("<Return>", id.update)
        entry.bind("<Up>", id.move(-1, 0))
        entry.bind("<Down>", id.move(+1, 0))
        entry.bind("<Left>", id.move(0, -1))
        entry.bind("<Right>", id.move(0, 1))

        id.var.set(id.value)

    def move(id, rowadvance, coladvance):
        targetrow = (id.row + rowadvance) % Nrows
        targetcol = (id.col + coladvance) % Ncols

        def focus(event):
            targetwidget = id.siblings[cellname(targetrow, targetcol)].widget
            targetwidget.focus()

        return focus

    def calculate(id):
        currentreqs = set(cellre.findall(id.formula))

        # Add this cell to the new requirement's dependents
        for r in currentreqs - id.reqs:
            id.siblings[r].deps.add(id.name)
        # Add remove this cell from dependents no longer referenced
        for r in id.reqs - currentreqs:
            id.siblings[r].deps.remove(id.name)

        # Look up the values of our required cells
        reqvalues = {r: id.siblings[r].value for r in currentreqs}
        # Build an environment with these values and basic math functions
        environment = ChainMap(math.__dict__, reqvalues)
        # Note that eval is DANGEROUS and should not be used in production
        id.value = eval(id.formula, {}, environment)

        id.var.set(id.value)

    def propagate(id):
        for d in id.deps:
            id.siblings[d].calculate()
            id.siblings[d].propagate()

    def edit(id, event):
        id.var.set(id.formula)
        id.widget.select_range(0, tk.END)

    def update(id, event):
        id.formula = id.var.get()
        id.calculate()
        id.propagate()
        # If this was after pressing Return, keep showing the formula
        if hasattr(event, "keysym") and event.keysym == "Return":
            id.var.set(id.formula)


class SpreadSheet(tk.Frame):
    def __init__(id, rows, cols, master=None):
        super().__init__(master)
        id.rows = rows
        id.cols = cols
        id.cells = {}

        id.pack()
        id.create_widgets()

    def create_widgets(id):
        # Frame for all the cells
        id.cellframe = tk.Frame(id)
        id.cellframe.pack(side="top")

        # Column labels
        blank = tk.Label(id.cellframe)
        blank.grid(row=0, column=0)
        for j in range(id.cols):
            label = tk.Label(id.cellframe, text=chr(ord("A") + j))
            label.grid(row=0, column=j + 1)

        # Fill in the rows
        for i in range(id.rows):
            rowlabel = tk.Label(id.cellframe, text=str(i + 1))
            rowlabel.grid(row=1 + i, column=0)
            for j in range(id.cols):
                cell = Cell(i, j, id.cells, id.cellframe)
                id.cells[cell.name] = cell
                cell.widget.grid(row=1 + i, column=1 + j)


root = tk.Tk()
app = SpreadSheet(Nrows, Ncols, master=root)
app.mainloop()
import sys
from sys import argv
import pyperclip as pc
from PyQt5.QtCore import QUrl
from PyQt5.QtWebEngineWidgets import QWebEngineView

#                                 Web Browser (HTML Frame)
from PyQt5.QtWidgets import *
import pyautogui as pg


class Window(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(Window, self).__init__(*args, **kwargs)

        self.browser = QWebEngineView()
        self.browser.setUrl(QUrl("https://www.google.com"))
        self.browser.urlChanged.connect(self.update_AddressBar)
        self.setCentralWidget(self.browser)
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.navigation_bar = QToolBar("Navigation Toolbar")
        self.addToolBar(self.navigation_bar)
        # act_button = Qaction("Auto1", self)
        # act_button.triggered.
        back_button = QAction("Back", self)
        back_button.setStatusTip("Go to previous page you visited")
        back_button.triggered.connect(self.browser.back)
        self.navigation_bar.addAction(back_button)
        refresh_button = QAction("Refresh", self)
        refresh_button.setStatusTip("Refresh this page")
        refresh_button.triggered.connect(self.browser.reload)
        self.navigation_bar.addAction(refresh_button)
        next_button = QAction("Next", self)
        next_button.setStatusTip("Go to next page")
        next_button.triggered.connect(self.browser.forward)
        self.navigation_bar.addAction(next_button)
        home_button = QAction("Home", self)
        home_button.setStatusTip("Go to home page (Google page)")
        home_button.triggered.connect(self.go_to_home)
        self.navigation_bar.addAction(home_button)
        self.navigation_bar.addSeparator()
        self.URLBar = QLineEdit()
        self.URLBar.returnPressed.connect(
            lambda: self.go_to_URL(QUrl(self.URLBar.text()))
        )  # This specifies what to do when enter is pressed in the Entry field
        self.navigation_bar.addWidget(self.URLBar)
        self.addToolBarBreak()
        # Adding another toolbar which contains the bookmarks
        bookmarks_toolbar = QToolBar("Bookmarks", self)
        self.addToolBar(bookmarks_toolbar)

        self.show()

    def go_to_home(self):
        self.browser.setUrl(QUrl("https://www.google.com/gmail"))

    def go_to_URL(self, url: QUrl):
        if url.scheme() == "":
            url.setScheme("https://")
        self.browser.setUrl(url)
        self.update_AddressBar(url)

    def update_AddressBar(self, url):
        self.URLBar.setText(url.toString())
        self.URLBar.setCursorPosition(0)

    def automation():
        text1 = "jonnie5kat@gmail.com"
        pc.copy(text1)
        text2 = pc.paste()

        pg.write("anglefish", interval=1)

        pyautogui.PAUSE = 1

        # pg.hotkey('ctrl', 'a')   # select  all
        # pg.hotkey('ctrl', 'c')
        # pg.hotkey('alt', 'tab')
        # pg.hotkey('alt', 'tab')
        # pg.hotkey('ctrl', 'v')


def mousepos1():
    coot = Toplevel()

    tk.Label(coot, text="enter x").grid(row=1, column=0)
    x = tk.Entry(coot)
    y = tk.Entry(coot)
    y.grid(row=2, column=1)
    x.grid(row=1, column=1)
    x = x.get()
    y = y.get()

    x, y = pyautogui.position()
    positionStr = "X: " + str(x).rjust(4) + " Y: " + str(y).rjust(4)
    print(positionStr, end="")
    print("\b" * len(positionStr), end="", flush=True)


app = QApplication(argv)
app.setApplicationName("PythonGeeks Web Browser")
window = Window()
app.exec_()
#!/usr/bin/env python

__author__ = "Dmitriy Krasota aka g0t0wasd"

# An example of Quadratic Calc using Tkinter.               
# More at http://pythonicway.com/index.php/python-examples/python-gui-examples/14-python-tkinter-quadratic-equations


from tkinter import *
from math import sqrt

def solver(a,b,c):
    """ Solves quadratic equation and returns the result in formatted string """
    D = b*b - 4*a*c
    if D >= 0:
        x1 = (-b + sqrt(D)) / (2*a)
        x2 = (-b - sqrt(D)) / (2*a)
        text = "The discriminant is: %s \n X1 is: %s \n X2 is: %s \n" % (D, x1, x2)        
    else:
        text = "The discriminant is: %s \n This equation has no solutions" % D 
    return text

def inserter(value):
    """ Inserts specified value into text widget """
    output.delete("0.0","end")
    output.insert("0.0",value)    

def clear(event):
    """ Clears entry form """
    caller = event.widget
    caller.delete("0", "end")

def handler():
    """ Get the content of entries and passes result to the text """
    try:
        # make sure that we entered correct values
        a_val = float(a.get())
        b_val = float(b.get())
        c_val = float(c.get())
        inserter(solver(a_val, b_val, c_val))
    except ValueError:
        inserter("Make sure you entered 3 numbers")

root = Tk()
root.title("Quadratic calculator")
root.minsize(325,230)
root.resizable(width=False, height=False)


frame = Frame(root)
frame.grid()

a = Entry(frame, width=3)
a.grid(row=1,column=1,padx=(10,0))
a.bind("<FocusIn>", clear)
a_lab = Label(frame, text="x**2+").grid(row=1,column=2)

b = Entry(frame, width=3)
b.bind("<FocusIn>", clear)
b.grid(row=1,column=3)
b_lab = Label(frame, text="x+").grid(row=1, column=4)

c = Entry(frame, width=3)
c.bind("<FocusIn>", clear)
c.grid(row=1, column=5)
c_lab = Label(frame, text="= 0").grid(row=1, column=6)

but = Button(frame, text="Solve", command=handler).grid(row=1, column=7, padx=(10,0))

output = Text(frame, bg="lightblue", font="Arial 12", width=35, height=10)
output.grid(row=2, columnspan=8)

root.mainloop()
def select_open(ss):
    
    filepath = askopenfilename(filetypes=[('Text Files', '*.txt'), ('Python', 'py'), ('All Files', '*.*')])
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, 'r') as input_file:
        text = input_file.read()
    if ss == 1:
        text = text1.insert('1.0', tk.END)
    elif ss == 2:
        text = text2.insert('1.0', tk.END)
    elif ss == 3:
        text = text3.insert('1.0', tk.END) 
    elif ss == 4:
        text = text4.insert('1.0', tk.END)
    elif ss == 5:
        text = text5.insert('1.0' ,tk.END)
    elif ss == 6:
        text = text6.insert('1.0', tk.END)
    elif ss == 7:
        text = text7.insert('1.0', tk.END)
    elif ss == 8:
        text = text8.insert('1.0', tk.END)
    elif ss == 9:
        text = text9.insert('1.0', tk.END)
    elif ss == 10:
        text = text10.insert('1.0', tk.END)
    elif ss == 11:
        text = text10.insert('1.0', tk.END)

  

top = tk.Toplevel()
top.geometry("600x400")
fr1 = tk.Frame(top)
fr1.grid(row=1, column=0, rowspan=20, columnspan=7)


def select_save(ss):

    if ss == 1:
        text = text1.get("1.0", tk.END)
    elif ss == 2:
        text = text2.get("1.0", tk.END)
    elif ss == 3:
        text = text3.get("1.0", tk.END)
    elif ss == 4:
        text = text4.get("1.0", tk.END)
    elif ss == 5:
        text = text5.get("1.0", tk.END)
    elif ss == 6:
        text = text6.get("1.0", tk.END)
    elif ss == 7:
        text = text7.get("1.0", tk.END)
    elif ss == 8:
        text = text8.get("1.0", tk.END)
    elif ss == 9:
        text = text9.get("1.0", tk.END)
    elif ss == 10:
        text = text10.get("1.0", tk.END)
    elif ss == 11:
        text = text10.get("1.0", tk.END)

    text11.insert("1.0", text)
    filepath = asksaveasfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    with open(filepath, "w") as f:
        f.write(text)


r1 = ttk.Radiobutton(fr1, text="save1", variable=1, value="Text Tab 1")
r1.config(command=lambda: select_save(1))
r2 = ttk.Radiobutton(fr1, text="save2", variable=2, value="Text Tab 1")
r2.config(command=lambda: select_save(2))
r3 = ttk.Radiobutton(fr1, text="save3", variable=3, value="Text Tab 2")
r3.config(command=lambda: select_save(3))
r4 = ttk.Radiobutton(fr1, text="save4", variable=4, value="Text Tab 3")
r4.config(command=lambda: select_save(4))
r5 = ttk.Radiobutton(fr1, text="save5", variable=5, value="Text Tab 4")
r5.config(command=lambda: select_save(5))
r6 = ttk.Radiobutton(fr1, text="save6", variable=6, value="Text Tab 5")
r6.config(command=lambda: select_save(6))
r7 = ttk.Radiobutton(fr1, text="save7", variable=7, value="Text Tab 6")
r7.config(command=lambda: select_save(7))
r8 = ttk.Radiobutton(fr1, text="save8", variable=8, value="Text Tab 7")
r8.config(command=lambda: select_save(8))
r9 = ttk.Radiobutton(fr1, text="save9", variable=9, value="Text Tab 8")
r9.config(command=lambda: select_save(9))
r10 = ttk.Radiobutton(fr1, text="save10", variable=10, value="Text Tab 9")
r10.config(command=lambda: select_save(10))
r11 = ttk.Radiobutton(fr1, text="save11", variable=11, value="Text Tab 10")
r11.config(command=lambda: select_save(11))
r1.grid(row=1, column=3)
r2.grid(row=2, column=3)
r3.grid(row=3, column=3)
r4.grid(row=4, column=3)
r5.grid(row=5, column=3)
r6.grid(row=6, column=3)
r7.grid(row=7, column=3)
r8.grid(row=8, column=3)
r9.grid(row=9, column=3)
r10.grid(row=10, column=3)
r11.grid(row=11, column=3)


def select_open(ss):

    if ss == 1:
        text = text1
    elif ss == 2:
        text = text2
    elif ss == 3:
        text = text3
    elif ss == 4:
        text = text4
    elif ss == 5:
        text = text5
    elif ss == 6:
        text = text6
    elif ss == 7:
        text = text7
    elif ss == 8:
        text = text8
    elif ss == 9:
        text = text9
    elif ss == 10:
        text = text10
    elif ss == 11:
        text = text10

    filepath = askopenfilename(
        defaultextension="py",
        filetypes=[("Text Files", "*.txt"), ("Python", "py"), ("All Files", "*.*")],
    )
    if not filepath:
        return
    text.delete(1.0, tk.END)
    with open(filepath, "r") as f:
        content = f.read()
        text.insert("1.0", content)


r11 = ttk.Radiobutton(fr1, text="open1", variable=1, value="Text Tab 1")
r11.config(command=lambda: select_open(1))
r12 = ttk.Radiobutton(fr1, text="open2", variable=2, value="Text Tab 1")
r12.config(command=lambda: select_open(2))
r13 = ttk.Radiobutton(fr1, text="open3", variable=3, value="Text Tab 2")
r13.config(command=lambda: select_open(3))
r14 = ttk.Radiobutton(fr1, text="open4", variable=4, value="Text Tab 3")
r14.config(command=lambda: select_open(4))
r15 = ttk.Radiobutton(fr1, text="open5", variable=5, value="Text Tab 4")
r15.config(command=lambda: select_open(5))
r16 = ttk.Radiobutton(fr1, text="open6", variable=6, value="Text Tab 5")
r16.config(command=lambda: select_open(6))
r17 = ttk.Radiobutton(fr1, text="open7", variable=7, value="Text Tab 6")
r17.config(command=lambda: select_open(7))
r18 = ttk.Radiobutton(fr1, text="open8", variable=8, value="Text Tab 7")
r18.config(command=lambda: select_open(8))
r19 = ttk.Radiobutton(fr1, text="open9", variable=9, value="Text Tab 8")
r19.config(command=lambda: select_open(9))
r20 = ttk.Radiobutton(fr1, text="open10", variable=10, value="Text Tab 9")
r20.config(command=lambda: select_open(10))
r21 = ttk.Radiobutton(fr1, text="open11", variable=11, value="Text Tab 10")
r21.config(command=lambda: select_open(11))
r11.grid(row=1, column=1)
r12.grid(row=2, column=1)
r13.grid(row=3, column=1)
r14.grid(row=4, column=1)
r15.grid(row=5, column=1)
r16.grid(row=6, column=1)
r17.grid(row=7, column=1)
r18.grid(row=8, column=1)
r19.grid(row=9, column=1)
r20.grid(row=10, column=1)
r20.grid(row=11, column=1)
from tkinter import *
from tkinter import messagebox

ws = Tk()
ws.title('PythonGuides')
ws.geometry('200x200')

def viewSelected():
    choice  = var.get()
    if choice == 1:
       output = "Science"

    elif choice == 2:
       output =  "Commerce"
    
    elif choice == 3:
       output =  "Arts"
    else:
        output = "Invalid selection"

    return messagebox.showinfo('PythonGuides', f'You Selected {output}.')
    
var = IntVar()
Radiobutton(ws, text="Science", variable=var, value=1, command=viewSelected).pack()
Radiobutton(ws, text="Commerce", variable=var, value=2, command=viewSelected).pack()
Radiobutton(ws, text="Arts", variable=var, value=3, command=viewSelected).pack()

ws.mainloop()
import tkinter as tk

root = tk.Tk()

v = tk.IntVar()
v.set(1)  # initializing the choice, i.e. Python

languages = [("Python", 1), ("Perl", 2), ("Java", 3), ("C++", 4), ("C", 5)]


def ShowChoice():
    print(v.get())


tk.Label(
    root,
    text="""Choose your favourite 
programming language:""",
    justify=tk.LEFT,
    padx=20,
).pack()

for val, language in enumerate(languages):
    tk.Radiobutton(
        root, text=language, padx=20, variable=v, command=ShowChoice, value=val
    ).pack(anchor=tk.W)


root.mainloop()
import tkinter as tk


from tkinter import *

from tkinter import ttk

from tkinter import filedialog as fd

from tkinter import messagebox as mb

import os

import subprocess

import shutil


root = tk.Tk()

root.geometry("1920x1080")


frm = Frame(root, height=1000, width=1900)

frm.grid(row=0, rowspan=5, column=0, columnspan=5)

canvas = Canvas(frm, height=500, width=600)


canvas.grid(row=0, rowspan=10, column=0, columnspan=10)

line = canvas.create_line(80, 70, 110, 70, fill="black", width=4)


line = canvas.create_line(110, 70, 130, 90, fill="black", width=4)


line2 = canvas.create_line(130, 90, 150, 70, fill="black", width=4)


line3 = canvas.create_line(150, 70, 170, 90, fill="black", width=4)


line4 = canvas.create_line(170, 90, 190, 70, fill="black", width=4)


line5 = canvas.create_line(190, 70, 210, 90, fill="black", width=4)


line6 = canvas.create_line(210, 90, 230, 70, fill="black", width=4)


line7 = canvas.create_line(230, 70, 250, 90, fill="black", width=4)


line8 = canvas.create_line(250, 90, 280, 90, fill="black", width=4)


inbetween = canvas.create_line(250, 90, 380, 90, fill="black", width=4)


l = canvas.create_line(380, 90, 410, 90, fill="black", width=4)


line = canvas.create_line(410, 90, 430, 70, fill="black", width=4)


l2 = canvas.create_line(430, 70, 450, 90, fill="black", width=4)


l3 = canvas.create_line(450, 90, 470, 70, fill="black", width=4)


l4 = canvas.create_line(470, 70, 490, 90, fill="black", width=4)


l5 = canvas.create_line(490, 90, 510, 70, fill="black", width=4)


l6 = canvas.create_line(510, 70, 530, 90, fill="black", width=4)


l7 = canvas.create_line(530, 90, 550, 70, fill="black", width=4)


l8 = canvas.create_line(550, 70, 570, 90, fill="black", width=4)


l9 = canvas.create_line(570, 90, 570, 420, fill="black", width=4)


l10 = canvas.create_line(530, 420, 610, 420, fill="black", width=4)


l11 = canvas.create_line(555, 440, 585, 440, fill="black", width=4)


l12 = canvas.create_line(565, 460, 575, 460, fill="black", width=4)


l15 = canvas.create_line(40, 280, 120, 280, fill="black", width=4)

l17 = canvas.create_line(80, 70, 80, 280, fill="black", width=4)

l18 = canvas.create_line(60, 300, 100, 300, fill="black", width=4)


l118 = canvas.create_line(80, 300, 80, 420, fill="black", width=4)


gndl20 = canvas.create_line(40, 420, 120, 420, fill="black", width=4)

gndl21 = canvas.create_line(60, 440, 100, 440, fill="black", width=4)


gndl22 = canvas.create_line(75, 460, 85, 460, fill="black", width=4)


l19 = canvas.create_line(40, 280, 120, 280, fill ='black', width = 4)

l20 = canvas.create_line(80 ,70, 80, 280, fill ='black', width = 4)



l14 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)



    line6 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

# 7

    line7 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)



    line8 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)


def checkered(canvas, line_distance):

    for line in range(0, width, 10):  # range(start, stop, step)

        canvas.create_line(
            [(line, 0), (line, height)], fill="black", tags="grid_line_w"
        )

        canvas.create_line(x, y, x2, y2, fill="#476042")

    for line in range(0, height, 10):

        canvas.create_line([(0, line), (width, line)], fill="black", tags="grid_line_h")

        canvas.create_line(x, y, x2, y2, fill="#476042")


def lines():

        line5 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line6 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line7 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line8 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

    

        line9 = canvas.create_line(480, 70, 510, 70, fill ='black', width = 4)

    

    

        line10 = canvas.create_line(510,70, 530, 90, fill ='black', width = 4)

    

        line11 = canvas.create_line(530,90, 550, 70, fill ='black', width = 4)

    

        line12 = canvas.create_line(550,70, 570, 90, fill ='black', width = 4)

    

        line13 = canvas.create_line(570, 90, 590, 70, fill ='black', width = 4)

    

        line14 = canvas.create_line(590, 70, 610, 90, fill ='black', width = 4)

    

        line15 = canvas.create_line(610, 90, 630, 70, fill ='black', width = 4)

    

        line16 = canvas.create_line(630, 70, 650, 90, fill ='black', width = 4)

    

        line17 = canvas.create_line(650, 90, 680, 90, fill ='black', width = 4)

    

        line18 = canvas.create_line(680, 70, 710, 70, fill ='black', width = 4)

    

    

        line19 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line20 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line21 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line22 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line23 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line24 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line25 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line26 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line27 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line28 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line29 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line30 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line31 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line32 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line33 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line34 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line35 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line36 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line37 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line38 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line39= canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line40 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line41 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line42 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line43 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line44 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line45 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line46 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line47 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line48 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line49 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line50 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line51 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line52 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line53 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line54 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line55 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line56 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line57 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line58 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line59 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line60 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line61 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line62 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line63 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line64 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line65 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line66 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line67 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line68 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line69 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line70 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line71 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line72 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line73 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line74 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line75 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line76 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line77 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line78 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line79 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line80 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line81 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line82 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line83 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line84 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line85 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line86 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line87 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line88 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line89 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

        line90 = canvas.create_line(80, 70, 110, 70, fill ='black', width = 4)

    

    

        line91 = canvas.create_line(110,70, 130, 90, fill ='black', width = 4)

    

        line91 = canvas.create_line(130,90, 150, 70, fill ='black', width = 4)

    

        line92 = canvas.create_line(150,70, 170, 90, fill ='black', width = 4)

    

        line93 = canvas.create_line(170, 90, 190, 70, fill ='black', width = 4)

    

        line94 = canvas.create_line(190, 70, 210, 90, fill ='black', width = 4)

    

        line95 = canvas.create_line(210, 90, 230, 70, fill ='black', width = 4)

    

        line96 = canvas.create_line(230, 70, 250, 90, fill ='black', width = 4)

    

        line97 = canvas.create_line(250, 90, 280, 90, fill ='black', width = 4)

    

    

    

    line = canvas.create_line(80,70, 120,140 , fill ='black', width = 4)

    

    line2 = canvas.create_line(120,140, 160,70 , fill ='black', width = 4)

    

    line3 = canvas.create_line(161,70, 200,140 , fill ='black', width = 4)

    

    line4 = canvas.create_line(200,140, 240,70 , fill ='black', width = 4)

    

    line5 = canvas.create_line(240,70, 280,140 , fill ='black', width = 4)

    

    line6 = canvas.create_line(280,140, 320,140 , fill ='black', width = 4)

    

    line7 = canvas.create_line(80,70, 40,140 , fill ='black', width = 4)

    

    line8 = canvas.create_line(40,140, 10,140 , fill ='black', width = 4)

    

    

    def grid loop(canvas, line_distance):

       # vertical lines at an interval of "line_distance" pixel

       for x in range(1000):

          canvas.create_line(x, y, x2, y2, fill="#476042")

       # horizontal lines at an interval of "line_distance" pixel

       for y in range(1000):

          canvas.create_line(x, y, x2, y2, fill="#476042")

    if __name__ == "__main__":

        checkered(canvas, 10)

        root.mainloop()
from tkinter import Tk, Label, Button, StringVar


class MyFirstGUI:
    LABEL_TEXT = [
        "This is our first GUI!",
        "Actually, this is our second GUI.",
        "We made it more interesting...",
        "...by making this label interactive.",
        "Go on, click on it again.",
    ]

    def __init__(self, master):
        self.master = master
        master.title("A simple GUI")

        self.label_index = 0
        self.label_text = StringVar()
        self.label_text.set(self.LABEL_TEXT[self.label_index])
        self.label = Label(master, textvariable=self.label_text)
        self.label.bind("<Button-1>", self.cycle_label_text)
        self.label.pack()

        self.greet_button = Button(master, text="Greet", command=self.greet)
        self.greet_button.pack()
        self.greet_button.bind("<Enter>", self.mouseOverEnter)
        self.greet_button.bind("<Leave>", self.mouseOverLeave)

        self.close_button = Button(master, text="Close", command=master.quit)
        self.close_button.pack()

        self.varHintLabel = StringVar()
        self.hintLabel = Label(master, textvariable=self.varHintLabel)
        self.hintLabel.pack()

    def greet(self):
        print("Greetings!")

    def cycle_label_text(self, event):
        self.label_index += 1
        self.label_index %= len(self.LABEL_TEXT)  # wrap around
        self.label_text.set(self.LABEL_TEXT[self.label_index])

    def mouseOverEnter(self, event):
        self.varHintLabel.set("Click to greet")

    def mouseOverLeave(self, event):
        self.varHintLabel.set("")


root = Tk()
my_gui = MyFirstGUI(root)
root.mainloop()
from tkinter import *

root = Tk()
root.geometry("200x200")
frame = Frame(root)
frame.pack()

Scala = Scale(frame, from_=0, to=10)
Scala.pack(padx=5, pady=5)

Scala2 = Scale(frame, from_=0, to=10, orient=HORIZONTAL)
Scala2.pack(padx=5, pady=5)
import tkinter as tk

app = tk.Tk()
app.title("My App")
app.geometry("200x150")

scale = tk.Scale()
scale.pack()

scale = tk.Scale(orient=tk.HORIZONTAL)
scale.pack()

app.mainloop()
from tkinter import *

root = Tk()

# sets the name on the top of the gui
root.title("Scientific Calculator")

# sets the background color of the calculator
# as white
root.configure(background="white")

# fixed the width and height of the gui,
# hence can't be expanded/stretched
root.resizable(width=False, height=False)

# sets the geometry
root.geometry("480x568+450+90")

# holds the buttons in the calculator,
# act as a container for numbers and operators
calc = Frame(root)

# create a grid like pattern of the frame
# i.e buttons
calc.grid()


class Calc:
    def __init__(self):
        self.total = 0
        self.current = ""
        self.input_value = True
        self.check_sum = False
        self.op = ""
        self.result = False

    def numberEnter(self, num):
        self.result = False
        firstnum = txtDisplay.get()
        secondnum = str(num)
        if self.input_value:
            self.current = secondnum
            self.input_value = False
        else:
            if secondnum == ".":
                if secondnum in firstnum:
                    return
            self.current = firstnum + secondnum
        self.display(self.current)

    def sum_of_total(self):
        self.result = True
        self.current = float(self.current)
        if self.check_sum == True:
            self.valid_function()
        else:
            self.total = float(txtDisplay.get())

    def display(self, value):
        txtDisplay.delete(0, END)
        txtDisplay.insert(0, value)

    def valid_function(self):
        if self.op == "add":
            self.total += self.current
        if self.op == "sub":
            self.total -= self.current
        if self.op == "multi":
            self.total *= self.current
        if self.op == "divide":
            self.total /= self.current
        if self.op == "mod":
            self.total %= self.current
        self.input_value = True
        self.check_sum = False
        self.display(self.total)

    def operation(self, op):
        self.current = float(self.current)
        if self.check_sum:
            self.valid_function()
        elif not self.result:
            self.total = self.current
            self.input_value = True
        self.check_sum = True
        self.op = op
        self.result = False

    def Clear_Entry(self):
        self.result = False
        self.current = "0"
        self.display(0)
        self.input_value = True

    def All_Clear_Entry(self):
        self.Clear_Entry()
        self.total = 0

    def pi(self):
        self.result = False
        self.current = math.pi
        self.display(self.current)

    def tau(self):
        self.result = False
        self.current = math.tau
        self.display(self.current)

    def e(self):
        self.result = False
        self.current = math.e
        self.display(self.current)

    def mathPM(self):
        self.result = False
        self.current = -(float(txtDisplay.get()))
        self.display(self.current)

    def squared(self):
        self.result = False
        self.current = math.sqrt(float(txtDisplay.get()))
        self.display(self.current)

    def cos(self):
        self.result = False
        self.current = math.cos(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def cosh(self):
        self.result = False
        self.current = math.cosh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tan(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tanh(self):
        self.result = False
        self.current = math.tanh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sin(self):
        self.result = False
        self.current = math.sin(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sinh(self):
        self.result = False
        self.current = math.sinh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def log(self):
        self.result = False
        self.current = math.log(float(txtDisplay.get()))
        self.display(self.current)

    def exp(self):
        self.result = False
        self.current = math.exp(float(txtDisplay.get()))
        self.display(self.current)

    def acosh(self):
        self.result = False
        self.current = math.acosh(float(txtDisplay.get()))
        self.display(self.current)

    def asinh(self):
        self.result = False
        self.current = math.asinh(float(txtDisplay.get()))
        self.display(self.current)

    def expm1(self):
        self.result = False
        self.current = math.expm1(float(txtDisplay.get()))
        self.display(self.current)

    def lgamma(self):
        self.result = False
        self.current = math.lgamma(float(txtDisplay.get()))
        self.display(self.current)

    def degrees(self):
        self.result = False
        self.current = math.degrees(float(txtDisplay.get()))
        self.display(self.current)

    def log2(self):
        self.result = False
        self.current = math.log2(float(txtDisplay.get()))
        self.display(self.current)

    def log10(self):
        self.result = False
        self.current = math.log10(float(txtDisplay.get()))
        self.display(self.current)

    def log1p(self):
        self.result = False
        self.current = math.log1p(float(txtDisplay.get()))
        self.display(self.current)


added_value = Calc()
from tkinter import *
import math
import parser
import tkinter.messagebox

root = Tk()
root.title("Calculator")
root.configure(background="gray60")
root.resizable(width=False, height=False)
root.geometry("480x568+0+0")

calc = Frame(root)
calc.grid()

# ----------------------------------------------------------------Calc Class and methods-----------------------------------------------------------


class Calc:
    def __init__(self):
        self.total = 0
        self.current = ""
        self.ip_val = True
        self.check_sum = False
        self.op = ""
        self.result = False

    def numberEnter(self, num):
        self.result = False
        first_num = txtDisplay.get()
        second_num = str(num)

        if self.ip_val:
            self.current = second_num
            self.ip_val = False
        else:
            if second_num == ".":
                if second_num in first_num:
                    return
            self.current = first_num + second_num
        self.display(self.current)

    def sum_of_total(self):
        self.result = True
        self.current = float(self.current)
        if self.check_sum:
            self.valid_function()
        else:
            self.total = float(txtDisplay.get())

    def valid_function(self):
        if self.op == "add":
            self.total += self.current
        elif self.op == "sub":
            self.total -= self.current
        elif self.op == "mul":
            self.total *= self.current
        elif self.op == "div":
            self.total /= self.current
        elif self.op == "mod":
            self.total %= self.current

        self.ip_val = True
        self.check_sum = False
        self.display(self.total)

    def operation(self, op):
        self.current = float(self.current)
        if self.check_sum:
            self.valid_function()
        elif not self.result:
            self.total = self.current
            self.ip_val = True
        self.check_sum = True
        self.op = op
        self.result = False

    # ------Manipulation of display

    def display(self, value):
        txtDisplay.delete(0, END)
        txtDisplay.insert(0, value)

    def clear_entry(self):
        self.result = False
        self.current = "0"
        self.display(0)
        self.ip_val = True

    def clear_all(self):
        self.clear_entry()
        self.total = 0

    # --------Functions for standard constants

    def pi(self):
        self.result = False
        self.current = math.pi
        self.display(self.current)

    def e(self):
        self.result = False
        self.current = math.e
        self.display(self.current)

    # --------Functions for calculation

    def PM(self):
        self.result = False
        self.current = -(float(txtDisplay.get()))
        self.display(self.current)

    def sq_rt(self):
        self.result = False
        self.current = math.sqrt(float(txtDisplay.get()))
        self.display(self.current)

    def ln(self):
        self.result = False
        self.current = math.log(float(txtDisplay.get()))
        self.display(self.current)

    def log(self):
        self.result = False
        self.current = math.log10(float(txtDisplay.get()))
        self.display(self.current)

    def log2(self):
        self.result = False
        self.current = math.log2(float(txtDisplay.get()))
        self.display(self.current)

    def exp(self):
        self.result = False
        self.current = math.exp(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sin(self):
        self.result = False
        self.current = math.sin(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def cos(self):
        self.result = False
        self.current = math.cos(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tan(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sinh(self):
        self.result = False
        self.current = math.sinh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def cosh(self):
        self.result = False
        self.current = math.cosh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tanh(self):
        self.result = False
        self.current = math.tanh(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def degrees(self):
        self.result = False
        self.current = math.degrees(float(txtDisplay.get()))
        self.display(self.current)

    def radians(self):
        self.result = False
        self.current = math.radians(float(txtDisplay.get()))
        self.display(self.current)


res = Calc()


# ----------------------------------------------------------------Build Grid-----------------------------------------------------------------------

txtDisplay = Entry(
    calc, font=("arial", 20, "bold"), bd=30, bg="gray60", width=28, justify=RIGHT
)
txtDisplay.grid(row=0, column=0, columnspan=4, pady=1)
txtDisplay.insert(0, "0")

numpad = "789456123"
i = 0
btn = []

for j in range(2, 5):
    for k in range(3):
        btn.append(
            Button(
                calc,
                width=6,
                height=2,
                font=("arial", 20, "bold"),
                bd=4,
                text=numpad[i],
                bg="gray10",
            )
        )
        btn[i].grid(row=j, column=k, pady=1)
        btn[i]["command"] = lambda x=numpad[i]: res.numberEnter(x)
        i += 1

# Standard Calculator
Button(
    calc,
    text=chr(67),
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=res.clear_entry,
).grid(row=1, column=0, pady=1)
Button(
    calc,
    text=chr(67) + chr(69),
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=res.clear_all,
).grid(row=1, column=1, pady=1)
Button(
    calc,
    text=u"\u221A",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=res.sq_rt,
).grid(row=1, column=2, pady=1)
Button(
    calc,
    text="+",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=lambda: res.operation("add"),
).grid(row=1, column=3, pady=1)

Button(
    calc,
    text="-",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=lambda: res.operation("sub"),
).grid(row=2, column=3, pady=1)
Button(
    calc,
    text="*",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=lambda: res.operation("mul"),
).grid(row=3, column=3, pady=1)
Button(
    calc,
    text="/",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=lambda: res.operation("div"),
).grid(row=4, column=3, pady=1)
Button(
    calc,
    text="=",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=res.sum_of_total,
).grid(row=5, column=3, pady=1)

Button(
    calc,
    text=".",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=lambda: res.numberEnter("."),
).grid(row=5, column=0, pady=1)
Button(
    calc,
    text="0",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray10",
    command=lambda: res.numberEnter(0),
).grid(row=5, column=1, pady=1)
Button(
    calc,
    text=chr(177),
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray40",
    command=res.PM,
).grid(row=5, column=2, pady=1)

# Scientific
Button(
    calc,
    text=u"\u03C0",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.pi,
).grid(row=1, column=4, pady=1)
Button(
    calc,
    text="sin",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.sin,
).grid(row=2, column=4, pady=1)
Button(
    calc,
    text="cos",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.cos,
).grid(row=2, column=5, pady=1)
Button(
    calc,
    text="tan",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.tan,
).grid(row=2, column=6, pady=1)

Button(
    calc,
    text="log",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.log,
).grid(row=4, column=4, pady=1)
Button(
    calc,
    text="sinh",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.sinh,
).grid(row=3, column=4, pady=1)
Button(
    calc,
    text="cosh",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.cosh,
).grid(row=3, column=5, pady=1)
Button(
    calc,
    text="tanh",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.tanh,
).grid(row=3, column=6, pady=1)

Button(
    calc,
    text="ln",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.ln,
).grid(row=4, column=5, pady=1)
Button(
    calc,
    text="exp",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.exp,
).grid(row=1, column=6, pady=1)
Button(
    calc,
    text="mod",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=lambda: res.operation("mod"),
).grid(row=5, column=6, pady=1)
Button(
    calc,
    text="e",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.e,
).grid(row=1, column=5, pady=1)

Button(
    calc,
    text="log2",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.log2,
).grid(row=4, column=6, pady=1)
Button(
    calc,
    text="deg",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.degrees,
).grid(row=5, column=4, pady=1)
Button(
    calc,
    text="rad",
    width=6,
    height=2,
    font=("arial", 20, "bold"),
    bd=4,
    bg="gray20",
    command=res.radians,
).grid(row=5, column=5, pady=1)


# -----------------------------------------------------------------File Menu----------------------------------------------------------------------


def Exit():
    if tkinter.messagebox.askyesno("Calculator", "Confirm if you want to quit") > 0:
        root.destroy()
        return


def Sci():
    root.resizable(width=False, height=False)
    root.geometry("835x568+0+0")


def Std():
    root.resizable(width=False, height=False)
    root.geometry("480x568+0+0")


menubar = Menu(calc)

file_menu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Standard", command=Std)
file_menu.add_command(label="Scientific", command=Sci)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=Exit)

root.config(menu=menubar)
root.mainloop()
from tkinter import *

ws = Tk()
ws.title('PythonGuides')
ws.config(bg='#5F734C')

frame = Frame(
    ws,
    bg='#A8B9BF'
    )

text_box = Text(
    ws,
    height=13,
    width=32, 
    font=(12)  
)

text_box.grid(row=0, column=0)
text_box.config(bg='#D9D8D7')

sb = Scrollbar(
    ws,
    orient=VERTICAL
    )

sb.grid(row=0, column=1, sticky=NS)

text_box.config(yscrollcommand=sb.set)
sb.config(command=text_box.yview)


ws.mainloop()
from tkinter import *

ws = Tk()
ws.title('PythonGuides')
ws.geometry('400x300')
ws.config(bg='#5F734C')

frame = Frame(
    ws,
    bg='#A8B9BF'
    )

text_box = Text(
    ws,
    height=13,
    width=32, 
    font=(12)  
)
text_box.pack(side=LEFT,expand=True)
text_box.config(bg='#D9D8D7')

sb_ver = Scrollbar(
    ws,
    orient=VERTICAL
    )

sb_ver.pack(side=RIGHT, fill=Y)

text_box.config(yscrollcommand=sb_ver.set)
sb_ver.config(command=text_box.yview)


ws.mainloop()
from tkinter import *

def extract_data():
    print(text_box.get('1.0', 'end'))


ws = Tk()
ws.title('PythonGuides')
ws.geometry('400x300')
ws.config(bg='#84BF04')


message ='''
One
Two
Three
Four
Five
Six
Seven
Eight
Nine
Ten
eleven
twelve 
thirteen
fourteen
fifteen 
sixteen
seventeen
eighteen
nineteen
twenty

'''

frame = Frame(ws)

text_box = Text(
    frame,
    height=13,
    width=20,
    wrap='word'
)
text_box.insert('end', message)
text_box.pack(side=LEFT,expand=True)


sb = Scrollbar(frame)
sb.pack(side=RIGHT, fill=BOTH)

text_box.config(yscrollcommand=sb.set)
sb.config(command=text_box.yview)

frame.pack(expand=True)

ws.mainloop()
# File Name: Tkinter ttk Treeview Simple Demo
# Reference: http://knowpapa.com/ttk-treeview/

from tkinter import *
from tkinter import ttk

root = Tk()

tree = ttk.Treeview(root)

tree["columns"] = ("one", "two")
tree.column("one", width=150)
tree.column("two", width=100)
tree.heading("one", text="column A")
tree.heading("two", text="column B")


# insert format -> insert(parent, index, iid=None, **kw)
# reference: https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview
tree.insert("", 0, text="Line 1", values=("1A", "1b"))
tree.insert("", "end", text="sub dir 2", values=("2A", "2B"))


# insert sub-item, method 1
id2 = tree.insert("", "end", "dir2", text="Dir 2")
tree.insert(id2, "end", text="sub dir 2-1", values=("2A", "2B"))
tree.insert(id2, "end", text="sub dir 2-2", values=("2A-2", "2B-2"))

# insert sub-item, method 2
tree.insert("", "end", "dir3", text="Dir 3")
tree.insert("dir3", "end", text=" sub dir 3", values=("3A", "3B"))

tree.pack()
root.mainloop()
import tkinter as tk
from tkinter import ttk

parent = tk.Tk()
my_text_var = tk.StringVar()

my_entry = ttk.Entry(
    parent,
    textvariable=my_text_var
)
my_entry.pack()

parent.mainloop()
from tkinter import *


def show_values():
    print(w1.get(), w2.get())


master = Tk()
w1 = Scale(master, from_=0, to=42, tickinterval=0)
w1.set(19)
w1.pack()
w2 = Scale(master, from_=0, to=200, length=600, tickinterval=10, orient=HORIZONTAL)
w2.set(23)
w2.pack()
Button(master, text="Show", command=show_values).pack()

mainloop()
import tkinter
from tkinter import *
from functools import partial
win = Tk()

def sum(label,x1,x2):
    n1 = (x1.get())
    n2 = (x2.get())
    sum = int(n1) + int(n2)
    label.config(text="sum is : %d " %sum)
    return

l1 = Label(win,text="First Value")
l1.grid(row=1,column=0)
l2 = Label(win,text="Second Value")
l2.grid(row=2,column=0)
label = Label(win)
label.grid(row=6,column=3)

x1 = StringVar()
x2 = StringVar()

e1 = Entry(win,textvariable=x1,width=20)
e1.grid(row=1,column=3)
e2 = Entry(win,textvariable=x2,width=20)
e2.grid(row=2,column=3)

sum = partial(sum,label,x1,x2)
button = Button(win,text="Calculate",command=sum,bg="blue")
button.grid(row=4,column=0)

win.mainloop()
from tkinter import filedialog





def source():
    

    source = filedialog.askopenfile(
    mode='r',
    title='Select  imagefile',
    filetypes=[('jpg', '*.png *bmp')])


def destination():
    destination = filedialog.asksaveasfile(
    mode='w',
    title='Select a destination file',
    defaultextension='.csv',
    filetypes=[('png', '*.jpg *.bmp')])






def openwriteclose():
    destination.write(source.read())
    source.close()
    destination.close()

import tkinter as tk
from tkinter import ttk

parent = tk.Tk()
my_double_var = tk.DoubleVar()

my_spinbox = tk.Spinbox(
    parent,
    from_=0.5,
    to=52.0,
    increment=.01,
    textvariable=my_double_var
)
my_spinbox.pack()
parent.mainloop()
import tkinter as tk
from tkinter import ttk


class windows(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        # Adding a title to the window
        self.wm_title("Test Application")

        # creating a frame and assigning it to container
        container = tk.Frame(self, height=400, width=600)
        # specifying the region where the frame is packed in root
        container.pack(side="top", fill="both", expand=True)

        # configuring the location of the container using grid
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        # We will now create a dictionary of frames
        self.frames = {}
        # we'll create the frames themselves later but let's add the components to the dictionary.
        for F in (MainPage, SidePage, CompletionScreen):
            frame = F(container, self)

        # the windows class acts as the root window for the frames.
        self.frames[F] = frame
        frame.grid(row=0, column=0, sticky="nsew")

        # Using a method to switch frames
        self.show_frame(MainPage)
from tkinter import *
import tkinter.messagebox


# Status bar class

class StatusBar:
    #
    # Constructor
    # @param root   : Window in which this status bar should lie
    # @param width  : Width of the status bar
    #
    def __init__(self, root, width):
        self.frame = Frame(root, padx=2, pady=2)
        self.frame.pack(side=BOTTOM)

        self.lblTitle = Label(self.frame, text="Status: ")
        self.lblTitle.pack(side=LEFT)

        self.lblStatusBar = Label(
            self.frame, text="Welcome", width=width, bd=1, relief=SUNKEN
        )
        self.lblStatusBar.pack(side=RIGHT)

    def Set(self, value):
        self.lblStatusBar.config(text=value)



# Global functions

def ButtonTestHandler(statusBar):
    statusBar.Set("Clicked Test button")


def ButtonQuitHandler(statusBar, root):
    statusBar.Set("Clicked on Quit")
    response = str(
        tkinter.messagebox.askquestion("Quit", "Are you sure you want to quit?")
    )
    statusBar.Set("{} selected".format(response))

    if response == "yes":
        statusBar.Set("Quitting")
        root.quit()
    else:
        statusBar.Set("Ignoring")



# Main

root = Tk()
root.title("Status bar test window")


sb = StatusBar(root, 20)

btnTest = Button(root, text="Test", command=lambda: ButtonTestHandler(sb))
btnTest.pack(side=LEFT)

btnQuit = Button(root, text="Quit", command=lambda: ButtonQuitHandler(sb, root))
btnQuit.pack(side=RIGHT)

root.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 1131
        height = 661
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_6 = tk.Listbox(root)
        GListBox_6["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_6["font"] = ft
        GListBox_6["fg"] = "#333333"
        GListBox_6["justify"] = "center"
        GListBox_6.place(x=0, y=50, width=138, height=188)

        GListBox_11 = tk.Listbox(root)
        GListBox_11["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_11["font"] = ft
        GListBox_11["fg"] = "#333333"
        GListBox_11["justify"] = "center"
        GListBox_11.place(x=160, y=50, width=140, height=197)

        GListBox_906 = tk.Listbox(root)
        GListBox_906["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_906["font"] = ft
        GListBox_906["fg"] = "#333333"
        GListBox_906["justify"] = "center"
        GListBox_906.place(x=310, y=50, width=142, height=196)

        GLineEdit_753 = tk.Entry(root)
        GLineEdit_753["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_753["font"] = ft
        GLineEdit_753["fg"] = "#333333"
        GLineEdit_753["justify"] = "center"
        GLineEdit_753["text"] = "Entry"
        GLineEdit_753.place(x=30, y=10, width=70, height=25)

        GLineEdit_98 = tk.Entry(root)
        GLineEdit_98["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_98["font"] = ft
        GLineEdit_98["fg"] = "#333333"
        GLineEdit_98["justify"] = "center"
        GLineEdit_98["text"] = "Entry"
        GLineEdit_98.place(x=200, y=10, width=70, height=25)

        GLineEdit_365 = tk.Entry(root)
        GLineEdit_365["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_365["font"] = ft
        GLineEdit_365["fg"] = "#333333"
        GLineEdit_365["justify"] = "center"
        GLineEdit_365["text"] = "Entry"
        GLineEdit_365.place(x=350, y=10, width=70, height=25)

        GLabel_272 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_272["font"] = ft
        GLabel_272["fg"] = "#333333"
        GLabel_272["justify"] = "center"
        GLabel_272["text"] = "label"
        GLabel_272.place(x=30, y=250, width=70, height=25)

        GLabel_73 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_73["font"] = ft
        GLabel_73["fg"] = "#333333"
        GLabel_73["justify"] = "center"
        GLabel_73["text"] = "label"
        GLabel_73.place(x=200, y=250, width=70, height=25)

        GLabel_811 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_811["font"] = ft
        GLabel_811["fg"] = "#333333"
        GLabel_811["justify"] = "center"
        GLabel_811["text"] = "label"
        GLabel_811.place(x=350, y=250, width=70, height=25)

        GMessage_577 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_577["font"] = ft
        GMessage_577["fg"] = "#333333"
        GMessage_577["justify"] = "center"
        GMessage_577["text"] = "Message"
        GMessage_577.place(x=490, y=50, width=89, height=88)

        GButton_28 = tk.Button(root)
        GButton_28["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_28["font"] = ft
        GButton_28["fg"] = "#273134"
        GButton_28["justify"] = "center"
        GButton_28["text"] = "Button"
        GButton_28.place(x=30, y=300, width=70, height=25)
        GButton_28["command"] = self.GButton_28_command

        GButton_893 = tk.Button(root)
        GButton_893["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_893["font"] = ft
        GButton_893["fg"] = "#273134"
        GButton_893["justify"] = "center"
        GButton_893["text"] = "Button"
        GButton_893.place(x=200, y=300, width=70, height=25)
        GButton_893["command"] = self.GButton_893_command

        GButton_958 = tk.Button(root)
        GButton_958["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_958["font"] = ft
        GButton_958["fg"] = "#273134"
        GButton_958["justify"] = "center"
        GButton_958["text"] = "Button"
        GButton_958.place(x=200, y=330, width=70, height=25)
        GButton_958["command"] = self.GButton_958_command

        GButton_733 = tk.Button(root)
        GButton_733["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_733["font"] = ft
        GButton_733["fg"] = "#273134"
        GButton_733["justify"] = "center"
        GButton_733["text"] = "Button"
        GButton_733.place(x=200, y=360, width=70, height=25)
        GButton_733["command"] = self.GButton_733_command

        GButton_398 = tk.Button(root)
        GButton_398["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_398["font"] = ft
        GButton_398["fg"] = "#273134"
        GButton_398["justify"] = "center"
        GButton_398["text"] = "Button"
        GButton_398.place(x=350, y=300, width=70, height=25)
        GButton_398["command"] = self.GButton_398_command

        GButton_495 = tk.Button(root)
        GButton_495["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_495["font"] = ft
        GButton_495["fg"] = "#273134"
        GButton_495["justify"] = "center"
        GButton_495["text"] = "Button"
        GButton_495.place(x=30, y=330, width=70, height=25)
        GButton_495["command"] = self.GButton_495_command

        GButton_855 = tk.Button(root)
        GButton_855["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_855["font"] = ft
        GButton_855["fg"] = "#273134"
        GButton_855["justify"] = "center"
        GButton_855["text"] = "Button"
        GButton_855.place(x=30, y=360, width=70, height=25)
        GButton_855["command"] = self.GButton_855_command

        GButton_986 = tk.Button(root)
        GButton_986["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_986["font"] = ft
        GButton_986["fg"] = "#273134"
        GButton_986["justify"] = "center"
        GButton_986["text"] = "Button"
        GButton_986.place(x=350, y=330, width=70, height=25)
        GButton_986["command"] = self.GButton_986_command

        GButton_164 = tk.Button(root)
        GButton_164["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_164["font"] = ft
        GButton_164["fg"] = "#273134"
        GButton_164["justify"] = "center"
        GButton_164["text"] = "Button"
        GButton_164.place(x=350, y=360, width=70, height=25)
        GButton_164["command"] = self.GButton_164_command

        GButton_638 = tk.Button(root)
        GButton_638["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_638["font"] = ft
        GButton_638["fg"] = "#273134"
        GButton_638["justify"] = "center"
        GButton_638["text"] = "Button"
        GButton_638.place(x=30, y=390, width=70, height=25)
        GButton_638["command"] = self.GButton_638_command

        GButton_511 = tk.Button(root)
        GButton_511["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_511["font"] = ft
        GButton_511["fg"] = "#273134"
        GButton_511["justify"] = "center"
        GButton_511["text"] = "Button"
        GButton_511.place(x=200, y=390, width=70, height=25)
        GButton_511["command"] = self.GButton_511_command

        GButton_128 = tk.Button(root)
        GButton_128["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_128["font"] = ft
        GButton_128["fg"] = "#273134"
        GButton_128["justify"] = "center"
        GButton_128["text"] = "Button"
        GButton_128.place(x=350, y=390, width=70, height=25)
        GButton_128["command"] = self.GButton_128_command

        GRadio_857 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_857["font"] = ft
        GRadio_857["fg"] = "#333333"
        GRadio_857["justify"] = "center"
        GRadio_857["text"] = "RadioButton"
        GRadio_857.place(x=490, y=230, width=85, height=25)
        GRadio_857["command"] = self.GRadio_857_command

        GRadio_377 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_377["font"] = ft
        GRadio_377["fg"] = "#333333"
        GRadio_377["justify"] = "center"
        GRadio_377["text"] = "RadioButton"
        GRadio_377.place(x=490, y=250, width=85, height=25)
        GRadio_377["command"] = self.GRadio_377_command

        GRadio_77 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_77["font"] = ft
        GRadio_77["fg"] = "#333333"
        GRadio_77["justify"] = "center"
        GRadio_77["text"] = "RadioButton"
        GRadio_77.place(x=490, y=270, width=85, height=25)
        GRadio_77["command"] = self.GRadio_77_command

        GRadio_983 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_983["font"] = ft
        GRadio_983["fg"] = "#333333"
        GRadio_983["justify"] = "center"
        GRadio_983["text"] = "RadioButton"
        GRadio_983.place(x=490, y=290, width=85, height=25)
        GRadio_983["command"] = self.GRadio_983_command

        GRadio_680 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_680["font"] = ft
        GRadio_680["fg"] = "#333333"
        GRadio_680["justify"] = "center"
        GRadio_680["text"] = "RadioButton"
        GRadio_680.place(x=490, y=310, width=85, height=25)
        GRadio_680["command"] = self.GRadio_680_command

        GMessage_194 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_194["font"] = ft
        GMessage_194["fg"] = "#333333"
        GMessage_194["justify"] = "center"
        GMessage_194["text"] = "Message"
        GMessage_194.place(x=20, y=440, width=80, height=25)

        GMessage_723 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_723["font"] = ft
        GMessage_723["fg"] = "#333333"
        GMessage_723["justify"] = "center"
        GMessage_723["text"] = "Message"
        GMessage_723.place(x=200, y=440, width=80, height=25)

        GMessage_278 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_278["font"] = ft
        GMessage_278["fg"] = "#333333"
        GMessage_278["justify"] = "center"
        GMessage_278["text"] = "Message"
        GMessage_278.place(x=350, y=440, width=80, height=25)

        GLineEdit_551 = tk.Entry(root)
        GLineEdit_551["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_551["font"] = ft
        GLineEdit_551["fg"] = "#333333"
        GLineEdit_551["justify"] = "center"
        GLineEdit_551["text"] = "Entry"
        GLineEdit_551.place(x=730, y=90, width=323, height=85)

        GLabel_707 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_707["font"] = ft
        GLabel_707["fg"] = "#333333"
        GLabel_707["justify"] = "center"
        GLabel_707["text"] = "label"
        GLabel_707.place(x=860, y=40, width=70, height=25)

        GLabel_124 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_124["font"] = ft
        GLabel_124["fg"] = "#333333"
        GLabel_124["justify"] = "center"
        GLabel_124["text"] = "label"
        GLabel_124.place(x=500, y=190, width=70, height=25)

        GLineEdit_398 = tk.Entry(root)
        GLineEdit_398["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_398["font"] = ft
        GLineEdit_398["fg"] = "#333333"
        GLineEdit_398["justify"] = "center"
        GLineEdit_398["text"] = "Entry"
        GLineEdit_398.place(x=620, y=190, width=498, height=444)

    def GButton_28_command(self):
        print("command")

    def GButton_893_command(self):
        print("command")

    def GButton_958_command(self):
        print("command")

    def GButton_733_command(self):
        print("command")

    def GButton_398_command(self):
        print("command")

    def GButton_495_command(self):
        print("command")

    def GButton_855_command(self):
        print("command")

    def GButton_986_command(self):
        print("command")

    def GButton_164_command(self):
        print("command")

    def GButton_638_command(self):
        print("command")

    def GButton_511_command(self):
        print("command")

    def GButton_128_command(self):
        print("command")

    def GRadio_857_command(self):
        print("command")

    def GRadio_377_command(self):
        print("command")

    def GRadio_77_command(self):
        print("command")

    def GRadio_983_command(self):
        print("command")

    def GRadio_680_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 1131
        height = 661
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_6 = tk.Listbox(root)
        GListBox_6["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_6["font"] = ft
        GListBox_6["fg"] = "#333333"
        GListBox_6["justify"] = "center"
        GListBox_6.place(x=0, y=50, width=138, height=188)

        GListBox_11 = tk.Listbox(root)
        GListBox_11["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_11["font"] = ft
        GListBox_11["fg"] = "#333333"
        GListBox_11["justify"] = "center"
        GListBox_11.place(x=160, y=50, width=140, height=197)

        GListBox_906 = tk.Listbox(root)
        GListBox_906["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_906["font"] = ft
        GListBox_906["fg"] = "#333333"
        GListBox_906["justify"] = "center"
        GListBox_906.place(x=310, y=50, width=142, height=196)

        GLineEdit_753 = tk.Entry(root)
        GLineEdit_753["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_753["font"] = ft
        GLineEdit_753["fg"] = "#333333"
        GLineEdit_753["justify"] = "center"
        GLineEdit_753["text"] = "Entry"
        GLineEdit_753.place(x=30, y=10, width=70, height=25)

        GLineEdit_98 = tk.Entry(root)
        GLineEdit_98["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_98["font"] = ft
        GLineEdit_98["fg"] = "#333333"
        GLineEdit_98["justify"] = "center"
        GLineEdit_98["text"] = "Entry"
        GLineEdit_98.place(x=200, y=10, width=70, height=25)

        GLineEdit_365 = tk.Entry(root)
        GLineEdit_365["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_365["font"] = ft
        GLineEdit_365["fg"] = "#333333"
        GLineEdit_365["justify"] = "center"
        GLineEdit_365["text"] = "Entry"
        GLineEdit_365.place(x=350, y=10, width=70, height=25)

        GLabel_272 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_272["font"] = ft
        GLabel_272["fg"] = "#333333"
        GLabel_272["justify"] = "center"
        GLabel_272["text"] = "label"
        GLabel_272.place(x=30, y=250, width=70, height=25)

        GLabel_73 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_73["font"] = ft
        GLabel_73["fg"] = "#333333"
        GLabel_73["justify"] = "center"
        GLabel_73["text"] = "label"
        GLabel_73.place(x=200, y=250, width=70, height=25)

        GLabel_811 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_811["font"] = ft
        GLabel_811["fg"] = "#333333"
        GLabel_811["justify"] = "center"
        GLabel_811["text"] = "label"
        GLabel_811.place(x=350, y=250, width=70, height=25)

        GMessage_577 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_577["font"] = ft
        GMessage_577["fg"] = "#333333"
        GMessage_577["justify"] = "center"
        GMessage_577["text"] = "Message"
        GMessage_577.place(x=490, y=50, width=89, height=88)

        GButton_28 = tk.Button(root)
        GButton_28["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_28["font"] = ft
        GButton_28["fg"] = "#273134"
        GButton_28["justify"] = "center"
        GButton_28["text"] = "Button"
        GButton_28.place(x=30, y=300, width=70, height=25)
        GButton_28["command"] = self.GButton_28_command

        GButton_893 = tk.Button(root)
        GButton_893["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_893["font"] = ft
        GButton_893["fg"] = "#273134"
        GButton_893["justify"] = "center"
        GButton_893["text"] = "Button"
        GButton_893.place(x=200, y=300, width=70, height=25)
        GButton_893["command"] = self.GButton_893_command

        GButton_958 = tk.Button(root)
        GButton_958["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_958["font"] = ft
        GButton_958["fg"] = "#273134"
        GButton_958["justify"] = "center"
        GButton_958["text"] = "Button"
        GButton_958.place(x=200, y=330, width=70, height=25)
        GButton_958["command"] = self.GButton_958_command

        GButton_733 = tk.Button(root)
        GButton_733["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_733["font"] = ft
        GButton_733["fg"] = "#273134"
        GButton_733["justify"] = "center"
        GButton_733["text"] = "Button"
        GButton_733.place(x=200, y=360, width=70, height=25)
        GButton_733["command"] = self.GButton_733_command

        GButton_398 = tk.Button(root)
        GButton_398["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_398["font"] = ft
        GButton_398["fg"] = "#273134"
        GButton_398["justify"] = "center"
        GButton_398["text"] = "Button"
        GButton_398.place(x=350, y=300, width=70, height=25)
        GButton_398["command"] = self.GButton_398_command

        GButton_495 = tk.Button(root)
        GButton_495["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_495["font"] = ft
        GButton_495["fg"] = "#273134"
        GButton_495["justify"] = "center"
        GButton_495["text"] = "Button"
        GButton_495.place(x=30, y=330, width=70, height=25)
        GButton_495["command"] = self.GButton_495_command

        GButton_855 = tk.Button(root)
        GButton_855["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_855["font"] = ft
        GButton_855["fg"] = "#273134"
        GButton_855["justify"] = "center"
        GButton_855["text"] = "Button"
        GButton_855.place(x=30, y=360, width=70, height=25)
        GButton_855["command"] = self.GButton_855_command

        GButton_986 = tk.Button(root)
        GButton_986["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_986["font"] = ft
        GButton_986["fg"] = "#273134"
        GButton_986["justify"] = "center"
        GButton_986["text"] = "Button"
        GButton_986.place(x=350, y=330, width=70, height=25)
        GButton_986["command"] = self.GButton_986_command

        GButton_164 = tk.Button(root)
        GButton_164["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_164["font"] = ft
        GButton_164["fg"] = "#273134"
        GButton_164["justify"] = "center"
        GButton_164["text"] = "Button"
        GButton_164.place(x=350, y=360, width=70, height=25)
        GButton_164["command"] = self.GButton_164_command

        GButton_638 = tk.Button(root)
        GButton_638["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_638["font"] = ft
        GButton_638["fg"] = "#273134"
        GButton_638["justify"] = "center"
        GButton_638["text"] = "Button"
        GButton_638.place(x=30, y=390, width=70, height=25)
        GButton_638["command"] = self.GButton_638_command

        GButton_511 = tk.Button(root)
        GButton_511["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_511["font"] = ft
        GButton_511["fg"] = "#273134"
        GButton_511["justify"] = "center"
        GButton_511["text"] = "Button"
        GButton_511.place(x=200, y=390, width=70, height=25)
        GButton_511["command"] = self.GButton_511_command

        GButton_128 = tk.Button(root)
        GButton_128["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_128["font"] = ft
        GButton_128["fg"] = "#273134"
        GButton_128["justify"] = "center"
        GButton_128["text"] = "Button"
        GButton_128.place(x=350, y=390, width=70, height=25)
        GButton_128["command"] = self.GButton_128_command

        GRadio_857 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_857["font"] = ft
        GRadio_857["fg"] = "#333333"
        GRadio_857["justify"] = "center"
        GRadio_857["text"] = "RadioButton"
        GRadio_857.place(x=490, y=230, width=85, height=25)
        GRadio_857["command"] = self.GRadio_857_command

        GRadio_377 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_377["font"] = ft
        GRadio_377["fg"] = "#333333"
        GRadio_377["justify"] = "center"
        GRadio_377["text"] = "RadioButton"
        GRadio_377.place(x=490, y=250, width=85, height=25)
        GRadio_377["command"] = self.GRadio_377_command

        GRadio_77 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_77["font"] = ft
        GRadio_77["fg"] = "#333333"
        GRadio_77["justify"] = "center"
        GRadio_77["text"] = "RadioButton"
        GRadio_77.place(x=490, y=270, width=85, height=25)
        GRadio_77["command"] = self.GRadio_77_command

        GRadio_983 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_983["font"] = ft
        GRadio_983["fg"] = "#333333"
        GRadio_983["justify"] = "center"
        GRadio_983["text"] = "RadioButton"
        GRadio_983.place(x=490, y=290, width=85, height=25)
        GRadio_983["command"] = self.GRadio_983_command

        GRadio_680 = tk.Radiobutton(root)
        ft = tkFont.Font(family="Times", size=10)
        GRadio_680["font"] = ft
        GRadio_680["fg"] = "#333333"
        GRadio_680["justify"] = "center"
        GRadio_680["text"] = "RadioButton"
        GRadio_680.place(x=490, y=310, width=85, height=25)
        GRadio_680["command"] = self.GRadio_680_command

        GMessage_194 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_194["font"] = ft
        GMessage_194["fg"] = "#333333"
        GMessage_194["justify"] = "center"
        GMessage_194["text"] = "Message"
        GMessage_194.place(x=20, y=440, width=80, height=25)

        GMessage_723 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_723["font"] = ft
        GMessage_723["fg"] = "#333333"
        GMessage_723["justify"] = "center"
        GMessage_723["text"] = "Message"
        GMessage_723.place(x=200, y=440, width=80, height=25)

        GMessage_278 = tk.Message(root)
        ft = tkFont.Font(family="Times", size=10)
        GMessage_278["font"] = ft
        GMessage_278["fg"] = "#333333"
        GMessage_278["justify"] = "center"
        GMessage_278["text"] = "Message"
        GMessage_278.place(x=350, y=440, width=80, height=25)

        GLineEdit_551 = tk.Entry(root)
        GLineEdit_551["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GLineEdit_551["font"] = ft
        GLineEdit_551["fg"] = "#333333"
        GLineEdit_551["justify"] = "center"
        GLineEdit_551["text"] = "Entry"
        GLineEdit_551.place(x=730, y=70, width=324, height=30)

        GLabel_707 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_707["font"] = ft
        GLabel_707["fg"] = "#333333"
        GLabel_707["justify"] = "center"
        GLabel_707["text"] = "label"
        GLabel_707.place(x=860, y=40, width=70, height=25)

        GLabel_124 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_124["font"] = ft
        GLabel_124["fg"] = "#333333"
        GLabel_124["justify"] = "center"
        GLabel_124["text"] = "label"
        GLabel_124.place(x=500, y=190, width=70, height=25)

        GLabel_96 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_96["font"] = ft
        GLabel_96["fg"] = "#333333"
        GLabel_96["justify"] = "center"
        GLabel_96["text"] = "label"
        GLabel_96.place(x=730, y=120, width=364, height=436)

    def GButton_28_command(self):
        print("command")

    def GButton_893_command(self):
        print("command")

    def GButton_958_command(self):
        print("command")

    def GButton_733_command(self):
        print("command")

    def GButton_398_command(self):
        print("command")

    def GButton_495_command(self):
        print("command")

    def GButton_855_command(self):
        print("command")

    def GButton_986_command(self):
        print("command")

    def GButton_164_command(self):
        print("command")

    def GButton_638_command(self):
        print("command")

    def GButton_511_command(self):
        print("command")

    def GButton_128_command(self):
        print("command")

    def GRadio_857_command(self):
        print("command")

    def GRadio_377_command(self):
        print("command")

    def GRadio_77_command(self):
        print("command")

    def GRadio_983_command(self):
        print("command")

    def GRadio_680_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk

root = tk.Tk()

S = tk.Scrollbar(root)
T = tk.Text(root, height=4, width=50)

S.pack(side=tk.RIGHT, fill=tk.Y)
T.pack(side=tk.LEFT, fill=tk.Y)

S.config(command=T.yview)
T.config(yscrollcommand=S.set)

quote = """HAMLET: To be, or not to be--that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune
Or to take arms against a sea of troubles
And by opposing end them. To die, to sleep--
No more--and by a sleep to say we end
The heartache, and the thousand natural shocks
That flesh is heir to. 'Tis a consummation
Devoutly to be wished."""

T.insert(tk.END, quote)
tk.mainloop()
import tkinter as tk
from tkinter import ttk
from tkinter import *
from tkinter import filedialog, messagebox
import tkinter.scrolledtext as st
import os

root = tk.Tk()
# root.iconbitmap('icons/favicon.ico')

PROGRAM_NAME = "TextEditor"
root.title(PROGRAM_NAME)
file_name = None
root.geometry("1600x800")

# all codes goes here


# FILE MENU
def cmd():
    pass


def main_menu(event=None):

    file_name = None

    def new_file(event=None):
        root.title("JH APPS")

        nonlocal file_name
        file_name = None
        text.delete(1.0, END)
        on_content_changed()

    def open_file(event=None):
        input_file_name = tk.filedialog.askopenfilename(
            defaultextension=".txt",
            filetypes=[
                ("All Files", "*.*"),
                ("Text Documents", "*.txt"),
                ("Python Scripts", "*.py"),
                ("HTML", "*.html"),
                ("CSS", "*.css"),
                ("JavaScript", "*.js"),
            ],
        )
        if input_file_name:
            nonlocal file_name
            file_name = input_file_name
            root.title("{} - {}".format(os.path.basename(file_name), PROGRAM_NAME))
            text.delete(1.0, END)
            with open(file_name) as _file:
                text.insert(1.0, _file.read())

        on_content_changed()

    def write_to_file(file_name):
        try:
            content = text.get(1.0, "end")
            with open(file_name, "w") as the_file:
                the_file.write(content)
        except IOError:
            pass

    def save_as(event=None):
        input_file_name = tk.filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[
                ("All Files", "*.*"),
                ("Text Documents", "*.txt"),
                ("HTML", "*.html"),
                ("CSS", "*.css"),
                ("JavaScript", "*.js"),
            ],
        )
        if input_file_name:
            nonlocal file_name
            file_name = input_file_name
            write_to_file(file_name)
            root.title("{} - {}".format(os.path.basename(file_name), PROGRAM_NAME))
        return "break"

    def save(event=None):
        nonlocal file_name
        if not file_name:
            save_as()
        else:
            write_to_file(file_name)
        return "break"

    # EDIT MENU
    def cut():
        text.event_generate("<<Cut>>")
        on_content_changed()
        return "break"

    def copy():
        text.event_generate("<<Copy>>")
        on_content_changed()
        return "break"

    def paste():
        text.event_generate("<<Paste>>")
        on_content_changed()
        return "break"

    def undo():
        text.event_generate("<<Undo>>")
        on_content_changed()
        return "break"

    def redo(event=None):
        text.event_generate("<<Redo>>")
        on_content_changed()
        return "break"

    def selectall(event=None):
        text.tag_add("sel", "1.0", "end")
        return "break"

    def find_text(event=None):
        search_toplevel = Toplevel(root)
        search_toplevel.title("Find Text")
        search_toplevel.transient(root)
        search_toplevel.resizable(False, False)
        Label(search_toplevel, text="Find All:").grid(row=0, column=0, sticky="e")
        search_entry_widget = Entry(search_toplevel, width=25)
        search_entry_widget.grid(row=0, column=1, padx=2, pady=2, sticky="we")
        search_entry_widget.focus_set()
        ignore_case_value = IntVar()
        Checkbutton(
            search_toplevel, text="Ignore Case", variable=ignore_case_value
        ).grid(row=1, column=1, sticky="e", padx=2, pady=2)
        Button(
            search_toplevel,
            text="Find All",
            underline=0,
            command=lambda: search_output(
                search_entry_widget.get(),
                ignore_case_value.get(),
                text,
                search_toplevel,
                search_entry_widget,
            ),
        ).grid(row=0, column=2, sticky="e" + "w", padx=2, pady=2)

        def close_search_window():
            text.tag_remove("match", "1.0", END)
            search_toplevel.destroy()

        search_toplevel.protocol("WM_DELETE_WINDOW", close_search_window)
        return "break"

    def search_output(needle, if_ignore_case, text, search_toplevel, search_box):
        text.tag_remove("match", "1.0", END)
        matches_found = 0
        if needle:
            start_pos = "1.0"
            while True:
                start_pos = text.search(
                    needle, start_pos, nocase=if_ignore_case, stopindex=END
                )
                if not start_pos:
                    break

                end_pos = "{} + {}c".format(start_pos, len(needle))
                text.tag_add("match", start_pos, end_pos)
                matches_found += 1
                start_pos = end_pos
            text.tag_config("match", background="yellow", foreground="blue")
        search_box.focus_set()
        search_toplevel.title("{} matches found".format(matches_found))

    # ABOUT MENU

    def display_about(event=None):
        tk.messagebox.showinfo(
            "About", PROGRAM_NAME + "Simple Text Editor made in Python"
        )

    def display_help(event=None):
        tk.messagebox.showinfo(
            "Help",
            "This Text Editor works similar to any other editors.",
            icon="question",
        )

    def exit_editor(event=None):
        if tk.messagebox.askokcancel("Exit", "Are you sure you want to Quit?"):
            root.destroy()

    # adding Line Numbers Functionality
    def get_line_numbers():
        output = ""
        if show_line_number.get():
            row, col = text.index("end").split(".")
            for i in range(1, int(row)):
                output += str(i) + "\n"
        return output

    def on_content_changed(event=None):
        update_line_numbers()
        update_cursor()

    def update_line_numbers(event=None):
        line_numbers = get_line_numbers()
        line_number_bar.config(state="normal")
        line_number_bar.delete("1.0", "end")
        line_number_bar.insert("1.0", line_numbers)
        line_number_bar.config(state="normal")

    # Adding Cursor Functionality
    def show_cursor():
        show_cursor_info_checked = show_cursor_info.get()
        if show_cursor_info_checked:
            cursor_info_bar.grid(row=1, column=4)

    def update_cursor(event=None):
        row, col = text.index(INSERT).split(".")
        line_num, col_num = str(int(row)), str(int(col) + 1)  # col starts at 0
        infotext = "Line: {0} | Column: {1}".format(line_num, col_num)
        cursor_info_bar.config(text=infotext)

    # Adding Text Highlight Functionality
    def highlight_line(interval=100):

        text.tag_add("active_line", "insert linestart", "insert lineend+1c")
        text.after(interval, toggle_highlight)

    def undo_highlight():
        text.tag_remove("active_line", 1.0, "end")

    def toggle_highlight(event=None):
        if to_highlight_line.get():
            highlight_line()
        else:
            undo_highlight()

    # Adding Change Theme Functionality
    def change_theme(event=None):
        selected_theme = theme_choice.get()
        fg_bg_colors = color_schemes.get(selected_theme)
        foreground_color, background_color = fg_bg_colors.split(".")
        text.config(background=background_color, fg=foreground_color)

    # pop-up menu
    def show_popup_menu(event):
        popup_menu.tk_popup(event.x_root, event.y_root)

    # ICONS for the compound menu
    new_file_icon = PhotoImage(file='icons/new_file.gif')
    open_file_icon = PhotoImage(file='icons/open_file.gif')
    save_file_icon = PhotoImage(file='icons/save.gif')
    cut_icon = PhotoImage(file='icons/cut.gif')
    copy_icon = PhotoImage(file='icons/copy.gif')
    paste_icon = PhotoImage(file='icons/paste.gif')
    undo_icon = PhotoImage(file='icons/undo.gif')
    redo_icon = PhotoImage(file='icons/redo.gif')
    find_icon = PhotoImage(file='icons/find_text.gif')

    # MENU CODES GOES HERE
    menu_bar = Menu(root)  # menu begins
    file_menu = Menu(menu_bar, tearoff=0)
    file_menu.add_command(label='New', accelerator='Ctrl+N', compound='left', image=new_file_icon, underline=0, command=new_file)
    file_menu.add_command(label='Open', accelerator='Ctrl+O', compound='left', image=open_file_icon, underline=0, command=open_file)
    file_menu.add_command(label="Save", accelerator='Ctrl+S', compound='left', image=save_file_icon, underline=0, command=save)
    file_menu.add_command(label="Save As", accelerator='Ctrl+Shift+S', compound='left', underline=0, command = save_as)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", accelerator='Alt+F4', compound='left', underline=0, command=exit_editor)
    menu_bar.add_cascade(label='File', menu=file_menu)

    file_menu = Menu(menu_bar, tearoff=0)
    file_menu.add_command(
        label="New",
        accelerator="Ctrl+N",
        compound="left",
        underline=0,
        command=new_file,
    )
    file_menu.add_command(
        label="Open",
        accelerator="Ctrl+O",
        compound="left",
        underline=0,
        command=open_file,
    )
    file_menu.add_command(
        label="Save", accelerator="Ctrl+S", compound="left", underline=0, command=save
    )
    file_menu.add_command(
        label="Save As",
        accelerator="Ctrl+Shift+S",
        compound="left",
        underline=0,
        command=save_as,
    )
    file_menu.add_separator()
    file_menu.add_command(
        label="Exit",
        accelerator="Alt+F4",
        compound="left",
        underline=0,
        command=exit_editor,
    )
    menu_bar.add_cascade(label="File", menu=file_menu)
    # end of File Menu
    edit_menu = Menu(menu_bar, tearoff=0)
    edit_menu.add_command(label='Undo', accelerator='Ctrl + Z', compound='left', image=undo_icon, underline=0, command=undo)
    edit_menu.add_command(label='Redo', accelerator='Ctrl+Y', compound='left', image=redo_icon, underline=0, command=redo)
    edit_menu.add_separator()
    edit_menu.add_command(label='Cut', accelerator='Ctrl+X', compound='left',  image=cut_icon, underline=0, command=cut)
    edit_menu.add_command(label='Copy', accelerator='Ctrl+C', compound='left', image=copy_icon, underline=0, command=copy)
    edit_menu.add_command(label='Paste', accelerator='Ctrl+V', compound='left',  image=paste_icon, underline=0, command=paste)
    edit_menu.add_separator()
    edit_menu.add_command(label='Find', accelerator='Ctrl+F', compound='left',  image=find_icon, underline=0, command=find_text)
    edit_menu.add_separator()
    edit_menu.add_command(label='Select All', accelerator='Ctrl+A', compound='left', underline=0, command=selectall)
    menu_bar.add_cascade(label='Edit', menu=edit_menu)
    #end of Edit Menu

    edit_menu = Menu(menu_bar, tearoff=0)
    edit_menu.add_command(
        label="Undo", accelerator="Ctrl + Z", compound="left", underline=0, command=undo
    )
    edit_menu.add_command(
        label="Redo", accelerator="Ctrl+Y", compound="left", underline=0, command=redo
    )
    edit_menu.add_separator()
    edit_menu.add_command(
        label="Cut", accelerator="Ctrl+X", compound="left", underline=0, command=cut
    )
    edit_menu.add_command(
        label="Copy", accelerator="Ctrl+C", compound="left", underline=0, command=copy
    )
    edit_menu.add_command(
        label="Paste", accelerator="Ctrl+V", compound="left", underline=0, command=paste
    )
    edit_menu.add_separator()
    edit_menu.add_command(
        label="Find",
        accelerator="Ctrl+F",
        compound="left",
        underline=0,
        command=find_text,
    )
    edit_menu.add_separator()
    edit_menu.add_command(
        label="Select All",
        accelerator="Ctrl+A",
        compound="left",
        underline=0,
        command=selectall,
    )
    menu_bar.add_cascade(label="Edit", menu=edit_menu)
    # end of Edit Menu

    view_menu = Menu(menu_bar, tearoff=0)
    show_line_number = IntVar()
    show_line_number.set(1)
    view_menu.add_checkbutton(label="Show Line Number", variable=show_line_number)
    show_cursor_info = IntVar()
    show_cursor_info.set(1)
    view_menu.add_checkbutton(
        label="Show Cursor Location at Bottom",
        variable=show_cursor_info,
        command=show_cursor,
    )
    to_highlight_line = IntVar()
    view_menu.add_checkbutton(
        label="Highlight Current Line",
        variable=to_highlight_line,
        onvalue=1,
        offvalue=0,
        command=toggle_highlight,
    )
    themes_menu = Menu(menu_bar, tearoff=0)
    view_menu.add_cascade(label="Themes", menu=themes_menu, command=change_theme)

    """ THEMES OPTIONS"""
    color_schemes = {
        "Default": "#000000.#FFFFFF",
        "Greygarious": "#83406A.#D1D4D1",
        "Aquamarine": "#5B8340.#D1E7E0",
        "Bold Beige": "#4B4620.#FFF0E1",
        "Cobalt Blue": "#ffffBB.#3333aa",
        "Olive Green": "#D1E7E0.#5B8340",
        "Night Mode": "#FFFFFF.#000000",
    }

    theme_choice = StringVar()
    theme_choice.set("Default")
    for k in sorted(color_schemes):
        themes_menu.add_radiobutton(
            label=k, variable=theme_choice, command=change_theme
        )

    menu_bar.add_cascade(label="View", menu=view_menu)

    # start of About Menu
    about_menu = Menu(menu_bar, tearoff=0)
    menu_bar.add_cascade(label="About", menu=about_menu)
    about_menu.add_command(label="About", underline=0, command=display_about)
    about_menu.add_command(label="Help", underline=0, command=display_help)
    # end of About Menu
    root.config(menu=menu_bar)
    # setting up the pop-up menu
    popup_menu = Menu(text)
    for i in ("cut", "copy", "paste", "undo", "redo"):

        popup_menu.add_command(label=i, compound="left", command=cmd)
    popup_menu.add_separator()
    popup_menu.add_command(label="Select All", underline=7, command=selectall)
    text.bind("<Control-N>", new_file)
    text.bind("<Control-n>", new_file)
    text.bind("<Control-O>", open_file)
    text.bind("<Control-o>", open_file)
    text.bind("<Control-S>", save)
    text.bind("<Control-s>", save)

    text.bind("<Control-Y>", redo)
    text.bind("<Control-y>", redo)
    text.bind("<Control-A>", selectall)
    text.bind("<Control-a>", selectall)
    text.bind("<Control-F>", find_text)
    text.bind("<Control-f>", find_text)

    text.bind("<KeyPress-F1>", display_help)

    text.bind("<Any-KeyPress>", on_content_changed)
    text.tag_configure("active_line", background="ivory2")

    text.bind("<Button-3>", show_popup_menu)
    text.focus_set()
    text.bind("<Button-3>", show_popup_menu)
    root.protocol("WM_DELETE_WINDOW", exit_editor)


shortcutbar = ttk.Frame(root, height=2, width=30)
shortcutbar.grid(row=0, column=1, columnspan=6, sticky="nswe")
btn1 = Button(shortcutbar, text="1", command=None)
btn1.grid(row=0, column=1)
btn2 = Button(shortcutbar, text="2", command=None)
btn2.grid(row=0, column=2)
btn3 = Button(shortcutbar, text="3", command=None)
btn3.grid(row=0, column=3)
btn4 = Button(shortcutbar, text="4", command=None)
btn4.grid(row=0, column=4)
btn5 = Button(shortcutbar, text="5", command=cmd)
btn5.grid(row=0, column=5)
btn6 = Button(shortcutbar, text="6", command=cmd)
btn6.grid(row=0, column=6)
btn7 = Button(shortcutbar, text="7", command=cmd)
btn7.grid(row=0, column=7)
btn8 = Button(shortcutbar, text="8", command=cmd)
btn8.grid(row=0, column=8)
btn9 = Button(shortcutbar, text="9", command=cmd)
btn9.grid(row=0, column=9)
btna = Button(shortcutbar, text="10", command=cmd)
btna.grid(row=0, column=10)
btnb = Button(shortcutbar, text="11", command=cmd)
btnb.grid(row=0, column=11)
btnc = Button(shortcutbar, text="12", command=cmd)
btnc.grid(row=0, column=12)
btnd = Button(shortcutbar, text="13", command=cmd)
btnd.grid(row=0, column=13)
btne = Button(shortcutbar, text="14", command=cmd)
btne.grid(row=0, column=14)
btnf = Button(shortcutbar, text="15", command=cmd)
btnf.grid(row=0, column=15)
btng = Button(shortcutbar, text="16", command=cmd)
btng.grid(row=0, column=16)
btnh = Button(shortcutbar, text="17", command=cmd)
btnh.grid(row=0, column=17)
btni = Button(shortcutbar, text="18", command=cmd)
btni.grid(row=0, column=18)
btnj = Button(shortcutbar, text="19", command=cmd)
btnj.grid(row=0, column=19)
btnk = Button(shortcutbar, text="20", command=cmd)
btnk.grid(row=0, column=20)


line_number_bar = st.ScrolledText(
    root,
    height=48,
    width=4,
    padx=3,
    takefocus=0,
    fg="purple",
    border=8,
    background="gold",
    state="disabled",
    wrap="none",
)
line_number_bar.grid(row=2, column=0, rowspan=4, sticky="w")

# adding the main context Text widget and Scrollbar Widget
frm = ttk.Frame(root, width=100, height=48)
frm.grid(row=2, column=1, rowspan=10, columnspan=10)

text = st.ScrolledText(root, wrap="word", bg="cyan", height=48, width=150)
text.grid(row=2, column=1, columnspan=7, rowspan=8)


cursor_info_bar = Label(root, text="Line: 1 | Column: 1")
cursor_info_bar.grid(row=39, column=2, sticky="w")


# handling binding


# END OF MENU
if __name__ == "__main__":
    main_menu()

    root.mainloop()
import tkinter as tk
import tkinter.font as tkFont

class App:
    def __init__(self, root):
        #setting title
        root.title("undefined")
        #setting window size
        width=600
        height=500
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_13=tk.Listbox(root)
        GListBox_13["borderwidth"] = "1px"
        ft = tkFont.Font(family='Times',size=10)
        GListBox_13["font"] = ft
        GListBox_13["fg"] = "#0b0c1b"
        GListBox_13["justify"] = "center"
        GListBox_13.place(x=90,y=80,width=104,height=283)

        GListBox_144=tk.Listbox(root)
        GListBox_144["borderwidth"] = "1px"
        ft = tkFont.Font(family='Times',size=10)
        GListBox_144["font"] = ft
        GListBox_144["fg"] = "#0b0c1b"
        GListBox_144["justify"] = "center"
        GListBox_144.place(x=210,y=80,width=70,height=282)

        GListBox_688=tk.Listbox(root)
        GListBox_688["borderwidth"] = "1px"
        ft = tkFont.Font(family='Times',size=10)
        GListBox_688["font"] = ft
        GListBox_688["fg"] = "#0b0c1b"
        GListBox_688["justify"] = "center"
        GListBox_688.place(x=300,y=80,width=60,height=283)

        GLineEdit_39=tk.Entry(root)
        GLineEdit_39["borderwidth"] = "1px"
        ft = tkFont.Font(family='Times',size=10)
        GLineEdit_39["font"] = ft
        GLineEdit_39["fg"] = "#0b0c1b"
        GLineEdit_39["justify"] = "center"
        GLineEdit_39["text"] = "Entry"
        GLineEdit_39.place(x=80,y=390,width=370,height=25)

        GButton_1=tk.Button(root)
        GButton_1["bg"] = "#f6f5f4"
        ft = tkFont.Font(family='Times',size=10)
        GButton_1["font"] = ft
        GButton_1["fg"] = "#2e3436"
        GButton_1["justify"] = "center"
        GButton_1["text"] = "Execute"
        GButton_1.place(x=230,y=450,width=70,height=25)
        GButton_1["command"] = self.GButton_1_command

        GButton_300=tk.Button(root)
        GButton_300["bg"] = "#f6f5f4"
        ft = tkFont.Font(family='Times',size=10)
        GButton_300["font"] = ft
        GButton_300["fg"] = "#2e3436"
        GButton_300["justify"] = "center"
        GButton_300["text"] = "Quit"
        GButton_300.place(x=150,y=450,width=70,height=25)
        GButton_300["command"] = self.GButton_300_command

        GButton_377=tk.Button(root)
        GButton_377["bg"] = "#f6f5f4"
        ft = tkFont.Font(family='Times',size=10)
        GButton_377["font"] = ft
        GButton_377["fg"] = "#2e3436"
        GButton_377["justify"] = "center"
        GButton_377["text"] = "Reset"
        GButton_377.place(x=310,y=450,width=70,height=25)
        GButton_377["command"] = self.GButton_377_command

    def GButton_1_command(self):
        print("command")


    def GButton_300_command(self):
        print("command")


    def GButton_377_command(self):
        print("command")

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
import tkinter as tk
import os
import subprocess
import sys
from tkinter import ttk
from tkinter import filedialog
from tkinter import simpledialog
from tkinter import messagebox
from tkinter import *
from PIL import Image, ImageTk
import runpy

# WIDGETS STRINGS
root = tk.Tk()
root.geometry("900x900")
root.title("TK GUI Generator HPC Engineering")
ecount = 1
btncount = 1
btncount2 = 1
labelcount = 1
canvascount = 1
lboxcount = 1
rowcount = 1
columncount = 1
combocount = 1
spincount = 1
textcount = 1
slidercount = 1
scrollcount = 1
projectcount = 1


start_string = """
#! /usr/bin/python3
# proj_str
root = tk.Tk()
root.title("Tkinter widget helper")

f1 = tk.Frame(root, height=300, width=300)
f1.grid(row=0, rowspan=10, column=5, columnspan=10)
f2 = tk.Frame(root, height=300, width=300)
f2.grid(row=0, column=0, rowspan=5, columnspan=5)
"""


def e_code():
    global ecount, rowcount
    w_str = """
display1 = tk.StringVar()
entry1 = tk.e(root,
    relief=tk.FLAT,
    textvariable=display1,
    justify='right',
    bg='orange')
entry1.grid(row=3, column=4)
entry1["font"] = "arial 12 bold"
    """
    w_str2 = w_str.replace("display1", "display" + str(ecount))
    w_str3 = w_str2.replace("entry1", "entry" + str(ecount))
    w_str4 = w_str3.replace("row=1", "row=" + str(rowcount))
    text.insert(tk.END, w_str4)
    ecount += 1
    rowcount += 1


def button_code1():
    global btncount, rowcount
    w_str = """
b1 = tk.Button(root,
            #relief=tk.FLAT,
            compound=tk.LEFT,
            text="new",
            #command=None,

            )
b1.grid(row=1, column=2)
"""
    w_str2 = w_str.replace("b1", "b" + str(btncount))
    w_str3 = w_str2.replace("row=1", "row=" + str(rowcount))
    text.insert(tk.END, w_str3)
    btncount += 1
    rowcount += 1


def button_code2():
    global btncount2, columncount
    w_str = """
btn1 = tk.Button(root,
            #relief=tk.FLAT,
            compound=tk.LEFT,
            text="new",
            #command=None,

            )
btn1.grid(row=2, column=1)
"""
    w_str2 = w_str.replace("btn1", "btn" + str(btncount2))
    w_str3 = w_str2.replace("column=1", "column=" + str(columncount))
    text.insert(tk.END, w_str3)
    btncount2 += 1
    columncount += 1


def label_code1():
    global labelcount, rowcount
    label_str = """
label1 = tk.Label(root
        ft = tkFont.Font(family='Ariel Black',size=10)
        label1["font"] = ft
        label1["fg"] = "#333333",
        label1["justify"] = "center",
        label1["text"] = "label",
        width=100,height=25)
        label1.grid(row=4, column=2) """
    label_str2 = label_str.replace("label1", "label" + str(labelcount))
    label_str3 = label_str2.replace("row=1", "row=" + str(rowcount))
    text.insert(tk.END, label_str3)
    labelcount += 1
    rowcount += 1


def label_code2():
    global labelcount, columncount
    label_str = """
label1 = tk.Label(root
        ft = tkFont.Font(family='Ariel Black',size=10)
        label1["font"] = ft
        label1["fg"] = "#333333",
        label1["justify"] = "center",
        label1["text"] = "label",
        width=100,height=25)
        label1.grid(row=5, column=2) """
    label_str2 = label_str.replace("label1", "label" + str(labelcount))
    label_str3 = label_str2.replace("column=1", "column=" + str(columncount))
    text.insert(tk.END, label_str3)
    labelcount += 1
    columncount += 1


def listbox_code():
    global lboxcount
    lbox_str = """
lbox1=tk.Listbox(root, width=80, height=25)
    lbox1["borderwidth"] = "1px"
    ft = tkFont.Font(family='Times',size=10)
    lbox1["font"] = ft
    lbox1["fg"] = "#333333"
    lbox1["justify"] = "center"
    lbox1.grid(row=9, coloumn=3)  """
    lbox_str2 = lbox_str.replace("lbox1", "lbox" + str(lboxcount))
    text.insert(tk.END, lbox_str2)
    lboxcount += 1


def menu1_code():
    menu1_str = """
root.option_add('*tearOff',False)
    menubar = Menu(root)
    root.config(menu = menubar)
    File = Menu(menubar)
    Edit = Menu(menubar)
    Help_ = Menu(menubar)
    menubar.add_cascade( menu = File , label = 'File')
    menubar.add_cascade( menu = Edit , label = 'Edit')
    menubar.add_cascade( menu = Help_, label = 'Help')
    File.add_command( label = 'New', command = lambda: print(" New File"))
    File.add_separator()
    File.add_command( label = 'Open',command = lambda: print("Open File"))
    File.add_separator()
    save = Menu(File)
    File.add_cascade( menu = save , label ='Save')
    save.add_command(label ='Save_as', command = lambda: print(" Save as"))
    save.add_command(label ='Save_all',command = lambda: print(" Save all"))
    """
    text.insert(tk.END, menu1_str)


def menu2_code():
    menu2_str = """
    def open():
    messagebox.shorootfo('From My Computer','Your File has been Opened')
    def close():
    messagebox.shorootfo('From My Computer','Your File has been Closed')
    def nothing():
    messagebox.shorootfo('From My Computer','Are You Feeling Well')

    menubar = Menu(root)

    filemenu = Menu(menubar)
    filemenu.add_command(label="Open File",command=open)
    filemenu.add_command(label="New File",command=nothing)
    filemenu.add_separator()
    filemenu.add_command(label="Save",command=nothing)
    filemenu.add_command(label="Save As",command=nothing)
    filemenu.add_separator()
    filemenu.add_command(label="Close",command=close)
    filemenu.add_command(label="Close Tab",command=nothing)
    filemenu.add_command(label="Close rootdow",command=nothing)
    filemenu.add_separator()
    filemenu.add_command(label="Exit",command=root.quit)

    menubar.add_cascade(label="File", menu = filemenu)

    editmenu = Menu(menubar)
    editmenu.add_command(label="Undo",command=nothing)
    editmenu.add_command(label="Redo",command=nothing)
    editmenu.add_separator()
    editmenu.add_command(label="Copy",command=nothing)
    editmenu.add_command(label="Paste",command=nothing)
    editmenu.add_separator()
    editmenu.add_command(label="Columns",command=nothing)
    editmenu.add_command(label="Lines",command=nothing)
    editmenu.add_command(label="Text",command=nothing)
    editmenu.add_separator()
    editmenu.add_command(label="Exit",command=root.quit)

    menubar.add_cascade(label="Edit", menu = editmenu)

    root.config(menu = menubar)
    """
    text.insert(tk.END, menu2_str)


def canvas_code():
    global canvascount
    canvas_str = """
canvas1 = Canvas(root)
    canvas.grid(row=1, column=1)
    canvas.config(width = 700 , height = 800)

    line = canvas.create_line(40,70, 79,140 , fill ='red', width = 7)

    """

    canvas_str2 = canvas_str.replace("canvas1", "canvas" + str(canvascount))
    text.insert(tk.END, canvas_str2)
    canvascount += 1


def combo_code():
    global combo_str, combocount
    combo_str = """
cbox1 = ttk.Combobox(root, values=["Value1", "value2, "value3"])
cbox1.grid(column=0, row=1)"""
    combo_str2 = combo_str.replace("cbox1", "cbox" + str(combocount))
    text.insert(tk.END, combo_str2)
    combocount += 1


def spin_code():
    global sp, image, img, spincount
    spin_str = """
sp1 = tk.Spinbox(root, from_=1.0, to=1000.0, increment=0.1)
    sp1.grid(row=1, column=0)"""
    spin_str2 = spin_str.replace("sp1", "sp" + str(spincount))
    text.insert(tk.END, spin_str2)
    spincount += 1


def text_code():
    global textcount, spincount
    txt_str = """
txt1 = tk.Text(root, height=60, width=150, bg='white')
txt1.insert('1.0', tk.END)
txt1.grid(row=02
, column=3)"""
    txt_str2 = txt_str.replace("txt1", "txt" + str(txtcount))
    text.insert(tk.END, txt_str2)
    textcount += 1


def slider():
    global txt_str, sld_str

    sld_str = """
slider1 = ttk.Scale(slider_str2 = slidar_str.replace("slider1", "slider" + str(slidercount))
    text.insert(tk.END, slider_str2)
    slidercount += 1"""
    text.insert(tk.END, sld_str)


def scrollbar():
    global txt_str
    # scrollcount not goint to add counter for this yet
    scr_str1 = """
scrollbar = tk.Scrollbar(command=text.yview)
scrollbar.grid(row=0, column=1, sticky='ns')

text['yscrollcommand'] = scrollbar.set
"""
    text.insert(tk.END, scr_str1)


def restartstr():
    text.insert(tk.END, start_string)


def cleartext():
    text.delete("1.0", tk.END)


def open_code():
    # file type
    filetypes = [
        ("Python files", "*.py"),
        ("text files", "*.txt"),
        ("All files", "*.*"),
    ]
    # show the open file dialog
    f = filedialog.askopenfile(filetypes=filetypes)
    # read the text file and show its content on the Text
    text.insert("1.0", f.readlines())


def save_code():
    global text, projectpy, start_string
    stop_str = """
root.mainloop()"""
    text.insert(tk.END, stop_str)
    filetypes = [
        ("Python files", "*.py"),
        ("Text files", "*.txt"),
        ("All files", "*.*"),
    ]

    projectpy = tk.filedialog.asksaveasfilename(
        title="Open a file", initialdir="/home/jh/Desktop", filetypes=filetypes
    )


def runcode():
    runpy.run_path(path_name="projoect.py")


f1 = tk.Frame(root, height=300, width=300)
f1.grid(row=0, rowspan=4, column=0, columnspan=2)
f2 = tk.Frame(root, height=300, width=300)
f2.grid(row=3, column=3, rowspan=5, columnspan=5)


text = tk.Text(f2, height=60, width=100)
text.grid(row=1, column=3)
text.insert(tk.END, start_string)
b1 = tk.Button(f1, text="Entry Widget", command=e_code)
b1.grid(row=2, column=0)
b2 = tk.Button(f1, text="Insert Button row", command=button_code1)
b2.grid(row=3, column=0)
b55 = tk.Button(f1, text="Insert Button column", command=button_code2)
b55.grid(row=4, column=0)
b4 = tk.Button(f1, text="Insert label row", command=label_code1)
b4.grid(row=5, column=0)
b5 = tk.Button(f1, text="List Box", command=listbox_code)
b5.grid(row=6, column=0)
b6 = tk.Button(f1, text="Menu1", command=menu1_code)
b6.grid(row=7, column=0)
b7 = tk.Button(f1, text="Menu2", command=menu2_code)
b7.grid(row=8, column=0)
b8 = tk.Button(f1, text="Canvas", command=canvas_code)
b8.grid(row=9, column=0)
b9 = tk.Button(f1, text="Combobox", command=combo_code)
b9.grid(row=10, column=0)
bba = tk.Button(f1, text="Spinbox", command=spin_code)
bba.grid(row=11, column=0)
bb1 = tk.Button(f1, text="Text Box", command=text_code)
bb1.grid(row=12, column=0)
b14 = tk.Button(f1, text="insert label col", command=label_code2)
b14.grid(row=14, column=0)
b15 = tk.Button(f1, text="Slider Widget", command=slider)
b15.grid(row=15, column=0)
b16 = tk.Button(f1, text="Scroll Bar", command=scrollbar)
b16.grid(row=16, column=0)
b17 = tk.Button(f1, text="Clear Code Box", command=cleartext)
b17.grid(row=17, column=0)
b18 = tk.Button(f1, text="Restart 1st Code Block", command=restartstr)
b18.grid(row=18, column=0)
b19 = tk.Button(f1, text="Finish & Save", command=save_code)
b19.grid(row=19, column=0)
b20 = tk.Button(f1, text="Open File", command=open_code)
b20.grid(row=20, column=0)

b21 = tk.Button(f1, text="Run project", command=runcode)
b21.grid(row=21, column=0)


root.mainloop()


#
#
#
#


#
#
#
#   Original code with run fix cross platform
#
#
#
#

import tkinter as tk
from tkinter import *
import os
import subprocess
import sys

# WIDGETS STRINGS





entry_counter = 1

button_counter = 1

lbcount = 1

labelcount = 1

cbcount = 1

def entry_code():

    global entry_counter

    w_string = """

display1 = tk.StringVar()

entry1 = tk.Entry(root,

    relief=tk.FLAT,

    textvariable=display1,

    justify='right',

    bg='orange')

entry1.pack()

entry1["font"] = "Arial Black 12 bold"

    """

    w_string2 = w_string.replace("display1", "display" + str(entry_counter))

    w_string2 = w_string2.replace("entry1", "entry" +  str(entry_counter))

    text.insert(tk.END, w_string2)

    entry_counter += 1



def button_code():

    global button_counter

    w_string = """

b1 = tk.Button(root,

            #relief=tk.FLAT,

            compound=tk.LEFT,

            text="new",

            #command=None,

            #image=tk.PhotoImage("img.png")

            )

b1.pack()

"""

    w_string2 = w_string.replace("b1", "b" + str(button_counter))

    text.insert(tk.END, w_string2)

    button_counter += 1



def label_code():

    global labelcount

    w_str = """ label1 = tk.Label(root)





        label1["font"] = "Arial Black 12 bold"

        label1["fg"] = "#333333",

        label1["justify"] = "center",

        label1["text"] = "label",

        width=100,height=25)

        label1.pack()"""

    w_str2 = w_str.replace("label1", "label" + str(labelcount))

    text.insert(tk.END, w_str2)

    labelcount += 1



def listbox_code():

     global lbcount

     w_str = """ lbox1=tk.Listbox(root, width=80, height=25)

        lbox1["borderwidth"] = "1px"

        ft = tkFont.Font(family='Times',size=10)



        lbox1["fg"] = "#333333"

        lbox1["justify"] = "center"

        lbox1.pack()"""

def combobox_code():

    global cbcount

    w_str = """ lbox1=tk.Listbox(root, width=80, height=25)

        lbox1["borderwidth"] = "1px"





        lbox1["fg"] = "#333333"

        lbox1["justify"] = "center"

        lbox1.pack()  """




root = tk.Tk()

root.title("Tkinter widget helper")

f1 = tk.Frame(root)

f1.pack(side="left")

b1 = tk.Button(f1, text="entry", command=entry_code)

b1.pack()





b2 = tk.Button(f1, text="button", command=button_code)

b2.pack()



b3 = tk.Button(f1, text="save", command=save_code)

b3.pack()



b4 = tk.Button(f1, text="insert label", command=label_code)

b4.pack()

b5 = tk.Button(f1, text="list box", command=listbox_code)

b5.pack()



f2 = tk.Frame(root)

f2.pack(side="left")

text = tk.Text(f2)

text.pack()

start_string = """# project.py

import tkinter as tk

from tkinter import ttk

from tkinter import simpledialog

from tkinter import messagebox

from tkinter import *

root = tk.Tk()

"""

text.insert("0.0", start_string)



root.mainloop()
from tkinter import *

root = Tk()
display = Text(root, width = 20 , height = 10)
display.pack()
display.insert('1.0' , 'this is my string')
#Adding a tag
display.tag_add( 'my_tag','1.0','1.3')
display.tag_config('my_tag', background = 'blue')
display.mark_names()
root.mainloop()from tkinter import *
from tkinter import ttk

root = Tk()
label = ttk.Label(root, text ="Hello my name is Hamza welcome to this tkinter tutorial")
label.pack()
label.config(foreground ='black')
label.config(font = ('arial',15, 'bold'))
PhotoImage(file ="python_logo.gif")
logo =PhotoImage(file ="python_logo.gif")
label.config(image = logo)
label.config(compound = LEFT)
root.mainloop()
from tkinter import *
from tkinter import ttk

root = Tk()
RadioButton = ttk.Radiobutton(root , text = 'Breakfast').pack()
ttk.Checkbutton(root, text = ' sausage').pack()
ttk.Checkbutton(root, text = ' milk').pack()
ttk.Checkbutton(root, text = ' eggs').pack()
ttk.Checkbutton(root, text = ' pancake').pack()
ttk.Checkbutton(root, text = ' cheese').pack()
root.mainloop()from tkinter import *
from tkinter import ttk

root = Tk()
label = ttk.Label(root, text ="Hello my name is Hamza welcome to this tkinter tutorial")
label.pack()
label.config(wrap = 100)
label.config(foreground ='white' , background ='black')
label.config(font = ('arial', 12 ,'bold'))
root.mainloop()
from tkinter import *
from tkinter import ttk
root = Tk()
button = ttk.Button(root , text ="Push her")
button.pack()
text = Label(root, text = " This is some random text")
text.pack()
root.mainloop()import tkinter as tk
from tkinter import *

fv = "Field value to output"  # returned from another part of the code

# triggered off left button click on text_field
def copy_text_to_clipboard(event):
    fv = text.get(
        "1.0", "end-1c"
    )  # get field value from event, but remove line return at end
    root.clipboard_clear()  # clear clipboard contents
    root.clipboard_append(fv)  # append new value to clipbaord


root = tk.Tk()

# setup frame and grid
frm = tk.Frame(root)
frm.grid()

# setup our inline label and widget
Label(frm, text="Field Label").grid(row=0, column=0)
text = tk.Text(frm, height=1, borderwidth=0)
text.insert(1.0, fv)
text.grid(row=0, column=1)

# Bind left click on text widget to copy_text_to_clipboard() function
text.bind("<Button-1>", copy_text_to_clipboard)
root.mainloop()
from tkinter import *

root = Tk()
display = Text(root, width = 20 , height = 10)
display.pack()
display.insert('1.0','end', ' this is my string')
root.mainloop()from tkinter import *

root = Tk()
canvas = Canvas(root)
canvas.grid(row=1, column=1)
canvas.config(width = 700 , height = 800)

line = canvas.create_line(40,70, 79,140 , fill ='red', width = 7)

root.mainloop()from tkinter import *

root = Tk()
canvas = Canvas(root)
canvas.pack()
canvas.config(width = 700 , height = 800)

line = canvas.create_line(40,70, 79,140 , fill ='red', width = 7)

root.mainloop()from tkinter import *

root = Tk()
canvas = Canvas(root)
canvas.grid(row=1, column=1)
canvas.config(width = 700 , height = 800)

line = canvas.create_line(40,70, 79,140 , fill ='red', width = 7)

root.mainloop()
from tkinter import *

root =Tk()
root.option_add('*tearOff',False)
menubar =Menu(root)
root.config(menu = menubar)
File = Menu(menubar)
Edit = Menu(menubar)
Help_ = Menu(menubar)
menubar.add_cascade( menu = File , label = 'File')
menubar.add_cascade( menu = Edit , label = 'Edit')
menubar.add_cascade( menu = Help_, label = 'Help')
File.add_command( label = 'New', command = lambda: print(" New File"))
File.add_separator()
File.add_command( label = 'Open',command = lambda: print("Open File"))
File.add_separator()
save = Menu(File)
File.add_cascade( menu = save , label ='Save')
save.add_command(label ='Save_as', command = lambda: print(" Save as"))
save.add_command(label ='Save_all',command = lambda: print(" Save all"))

root.mainloop()
from tkinter import *
import tkinter.filedialog as fd
import tkinter.messagebox as mb
import os
import shutil
# Creating the backend functions for python file explorer project
def open_file():
    file = fd.askopenfilename(title='Choose a file of any type', filetypes=[("All files", "*.*")])
    os.startfile(os.path.abspath(file))
def copy_file():
    file_to_copy = fd.askopenfilename(title='Choose a file to copy', filetypes=[("All files", "*.*")])
    dir_to_copy_to = fd.askdirectory(title="In which folder to copy to?")
    
def open_file():
    file = fd.askopenfilename(title='Choose a file of any type', filetypes=[("All files", "*.*")])
    os.startfile(os.path.abspath(file))
def copy_file():
    file_to_copy = fd.askopenfilename(title='Choose a file to copy', filetypes=[("All files", "*.*")])
    dir_to_copy_to = fd.askdirectory(title="In which folder to copy to?")
    try:
        shutil.copy(file_to_copy, dir_to_copy_to)
        mb.showinfo(title='File copied!', message='Your desired file has been copied to your desired location')
    except:
        mb.showerror(title='Error!', message='We were unable to copy your file to the desired location. Please try again')
def delete_file():
    file = fd.askopenfilename(title='Choose a file to delete', filetypes=[("All files", "*.*")])
    os.remove(os.path.abspath(file))
    mb.showinfo(title='File deleted', message='Your desired file has been deleted')
def rename_file():
    file = fd.askopenfilename(title='Choose a file to rename', filetypes=[("All files", "*.*")])
    rename_wn = Toplevel(r)
    rename_wn.title("Rename the file to")
    rename_wn.geometry("250x70"); rename_wn.resizable(0, 0)
    Label(rename_wn, text='What should be the new name of the file?', font=("Times New Roman", 10)).grid(row=0, column=0)
    new_name = Entry(rename_wn, width=40, font=("Times New Roman", 10))
    new_name.grid(row=1, column=1)
    new_file_name = os.path.join(os.path.dirname(file), new_name.get()+os.path.splitext(file)[1])
    os.rename(file, new_file_name)
    mb.showinfo(title="File Renamed", message='Your desired file has been renamed')
def open_folder():
    folder = fd.askdirectory(title="Select Folder to open")
    os.startfile(folder)
def delete_folder():
    folder_to_delete = fd.askdirectory(title='Choose a folder to delete')
    os.rmdir(folder_to_delete)
    mb.showinfo("Folder Deleted", "Your desired folder has been deleted")
def move_folder():
    folder_to_move = fd.askdirectory(title='Select the folder you want to move')
    mb.showinfo(message='You just selected the folder to move, now please select the desired destination where you want to move the folder to')
    destination = fd.askdirectory(title='Where to move the folder to')
    try:
        shutil.move(folder_to_move, destination)
        mb.showinfo("Folder moved", 'Your desired folder has been moved to the location you wanted')
    except:
        mb.showerror('Error', 'We could not move your folder. Please make sure that the destination exists')
def list_files_in_folder():
    i = 0
    folder = fd.askdirectory(title='Select the folder whose files you want to list')
    files = os.listdir(os.path.abspath(folder))
    list_files_wn = Toplevel(r)
    list_files_wn.title(f'Files in {folder}')
    list_files_wn.geometry('250x250')
    list_files_wn.resizable(0, 0)
    listbox = Listbox(list_files_wn, selectbackground='SteelBlue', font=("Georgia", 10))
    listbox.grid(rowspan=5, column=1, row=1)
    scrollbar = Scrollbar(listbox, orient=VERTICAL, command=listbox.yview)
    scrollbar.grid(row=0, rowspan=4, column=2)
    listbox.config(yscrollcommand=scrollbar.set)
    while i < len(files):
        listbox.insert(END, files[i])
        i += 1
    # Defining the variables
    title = 'File Manager'
    background = 'Light Green'
    button_font = ("Times New Roman", 13)
    button_background = 'Turquoise'
    # Initializing the window
    r = Tk()
    r.title(title)
    r.geometry('220x400')
    root.resizable(0, 0)
    root.config(bg=background)
    # Creating and placing the components in the window
    Label(root, text=" ", font=("Ariel Black", 15), bg=background, wraplength=250).grid(column=0, row=1)
    Label(root, text=title, font=("Ariel Black", 15), bg=background, wraplength=250).grid(column=1, row=1)
    Button(root, text='Open a file', width=20, font=button_font, bg=button_background, command=open_file).grid(column=1, row=2)
    Button(root, text='Copy a file', width=20, font=button_font, bg=button_background, command=copy_file).grid(column=1, row=3)
    Button(root, text='Rename a file', width=20, font=button_font, bg=button_background, command=rename_file).grid(column=1, row=4)
    Button(root, text='Delete a file', width=20, font=button_font, bg=button_background, command=delete_file).grid(column=1, row=5)
    Button(root, text='Open a folder', width=20, font=button_font, bg=button_background, command=open_folder).grid(column=1, row=6)
    Button(root, text='Delete a folder', width=20, font=button_font, bg=button_background, command=delete_folder).grid(column=1, row=6)
    Button(root, text='Move a folder', width=20, font=button_font, bg=button_background, command=move_folder).grid(column=1, row=7)
    Button(root, text='List all files in a folder', width=20, font=button_font, bg=button_background,
    command=list_files_in_folder).grid(column=1, row=9)
    # Finalizing the window
    root.update()
    root.mainloop()

    try:
        shutil.copy(file_to_copy, dir_to_copy_to)
        mb.showinfo(title='File copied!', message='Your desired file has been copied to your desired location')
    except:
        mb.showerror(title='Error!', message='We were unable to copy your file to the desired location. Please try again')
def delete_file():
    file = fd.askopenfilename(title='Choose a file to delete', filetypes=[("All files", "*.*")])
    os.remove(os.path.abspath(file))
    mb.showinfo(title='File deleted', message='Your desired file has been deleted')
def rename_file():
    file = fd.askopenfilename(title='Choose a file to rename', filetypes=[("All files", "*.*")])
    rename_wn = Toplevel(r)
    rename_wn.title("Rename the file to")
    rename_wn.geometry("250x70"); rename_wn.resizable(0, 0)
    Label(rename_wn, text='What should be the new name of the file?', font=("Times New Roman", 10)).grid(row=0, column=0)
    new_name = Entry(rename_wn, width=40, font=("Times New Roman", 10))
    new_name.grid(row=1, column=1)
    new_file_name = os.path.join(os.path.dirname(file), new_name.get()+os.path.splitext(file)[1])
    os.rename(file, new_file_name)
    mb.showinfo(title="File Renamed", message='Your desired file has been renamed')
def open_folder():
    folder = fd.askdirectory(title="Select Folder to open")
    os.startfile(folder)
def delete_folder():
    folder_to_delete = fd.askdirectory(title='Choose a folder to delete')
    os.rmdir(folder_to_delete)
    mb.showinfo("Folder Deleted", "Your desired folder has been deleted")
def move_folder():
    folder_to_move = fd.askdirectory(title='Select the folder you want to move')
    mb.showinfo(message='You just selected the folder to move, now please select the desired destination where you want to move the folder to')
    destination = fd.askdirectory(title='Where to move the folder to')
    try:
        shutil.move(folder_to_move, destination)
        mb.showinfo("Folder moved", 'Your desired folder has been moved to the location you wanted')
    except:
        mb.showerror('Error', 'We could not move your folder. Please make sure that the destination exists')
def list_files_in_folder():
    i = 0
    folder = fd.askdirectory(title='Select the folder whose files you want to list')
    files = os.listdir(os.path.abspath(folder))
    list_files_wn = Toplevel(r)
    list_files_wn.title(f'Files in {folder}')
    list_files_wn.geometry('250x250')
    list_files_wn.resizable(0, 0)
    listbox = Listbox(list_files_wn, selectbackground='SteelBlue', font=("Georgia", 10))
    listbox.grid(rowspan=5, column=1, row=1)
    scrollbar = Scrollbar(listbox, orient=VERTICAL, command=listbox.yview)
    scrollbar.grid(row=0, rowspan=4, column=2)
    listbox.config(yscrollcommand=scrollbar.set)
    while i < len(files):
        listbox.insert(END, files[i])
        i += 1
    # Defining the variables
title = 'File Manager'
background = 'Light Green'
button_font = ("Times New Roman", 13)
button_background = 'Turquoise'
# Initializing the window
root = Tk()
root.title(title)
root.geometry('220x400')
root.resizable(0, 0)
root.config(bg=background)
# Creating and placing the components in the window
Label(root, text=" ", font=("Ariel Black", 15), bg=background, wraplength=250).grid(column=0, row=1)
Label(root, text=title, font=("Ariel Black", 15), bg=background, wraplength=250).grid(column=1, row=1)
Button(root, text='Open a file', width=20, font=button_font, bg=button_background, command=open_file).grid(column=1, row=2)
Button(root, text='Copy a file', width=20, font=button_font, bg=button_background, command=copy_file).grid(column=1, row=3)
Button(root, text='Rename a file', width=20, font=button_font, bg=button_background, command=rename_file).grid(column=1, row=4)
Button(root, text='Delete a file', width=20, font=button_font, bg=button_background, command=delete_file).grid(column=1, row=5)
Button(root, text='Open a folder', width=20, font=button_font, bg=button_background, command=open_folder).grid(column=1, row=6)
Button(root, text='Delete a folder', width=20, font=button_font, bg=button_background, command=delete_folder).grid(column=1, row=6)
Button(root, text='Move a folder', width=20, font=button_font, bg=button_background, command=move_folder).grid(column=1, row=7)
Button(root, text='List all files in a folder', width=20, font=button_font, bg=button_background,
command=list_files_in_folder).grid(column=1, row=9)
# Finalizing the window
root.update()
root.mainloop()
from tkinter import *
import tkinter.filedialog as fd
import tkinter.messagebox as mb
import os
import shutil
# Creating the backend functions for python file explorer project
def open_file():
    file = fd.askopenfilename(title='Choose a file of any type', filetypes=[("All files", "*.*")])
    os.startfile(os.path.abspath(file))
def copy_file():
    file_to_copy = fd.askopenfilename(title='Choose a file to copy', filetypes=[("All files", "*.*")])
    dir_to_copy_to = fd.askdirectory(title="In which folder to copy to?")
    try:
        shutil.copy(file_to_copy, dir_to_copy_to)
        mb.showinfo(title='File copied!', message='Your desired file has been copied to your desired location')
    except:
        mb.showerror(title='Error!', message='We were unable to copy your file to the desired location. Please try again')
def delete_file():
    file = fd.askopenfilename(title='Choose a file to delete', filetypes=[("All files", "*.*")])
    os.remove(os.path.abspath(file))
    mb.showinfo(title='File deleted', message='Your desired file has been deleted')
def rename_file():
    file = fd.askopenfilename(title='Choose a file to rename', filetypes=[("All files", "*.*")])
    rename_wn = Toplevel(root)
    rename_wn.title("Rename the file to")
    rename_wn.geometry("250x70"); rename_wn.resizable(0, 0)
    Label(rename_wn, text='What should be the new name of the file?', font=("Times New Roman", 10)).place(x=0, y=0)
    new_name = Entry(rename_wn, width=40, font=("Times New Roman", 10))
    new_name.place(x=0, y=30)
    new_file_name = os.path.join(os.path.dirname(file), new_name.get()+os.path.splitext(file)[1])
    os.rename(file, new_file_name)
    mb.showinfo(title="File Renamed", message='Your desired file has been renamed')
def open_folder():
    folder = fd.askdirectory(title="Select Folder to open")
    os.startfile(folder)
def delete_folder():
    folder_to_delete = fd.askdirectory(title='Choose a folder to delete')
    os.rmdir(folder_to_delete)
    mb.showinfo("Folder Deleted", "Your desired folder has been deleted")
def move_folder():
    folder_to_move = fd.askdirectory(title='Select the folder you want to move')
    mb.showinfo(message='You just selected the folder to move, now please select the desired destination where you want to move the folder to')
    destination = fd.askdirectory(title='Where to move the folder to')
    try:
        shutil.move(folder_to_move, destination)
        mb.showinfo("Folder moved", 'Your desired folder has been moved to the location you wanted')
    except:
        mb.showerror('Error', 'We could not move your folder. Please make sure that the destination exists')
def list_files_in_folder():
    i = 0
    folder = fd.askdirectory(title='Select the folder whose files you want to list')
    files = os.listdir(os.path.abspath(folder))
    list_files_wn = Toplevel(root)
    list_files_wn.title(f'Files in {folder}')
    list_files_wn.geometry('250x250')
    list_files_wn.resizable(0, 0)
    listbox = Listbox(list_files_wn, selectbackground='SteelBlue', font=("Georgia", 10))
    listbox.place(relx=0, rely=0, relheight=1, relwidth=1)
    scrollbar = Scrollbar(listbox, orient=VERTICAL, command=listbox.yview)
    scrollbar.pack(side=RIGHT, fill=Y)
    listbox.config(yscrollcommand=scrollbar.set)
    while i < len(files):
        listbox.insert(END, files[i])
        i += 1
    # Defining the variables
title = 'File Manager'
background = 'Orange'
button_font = ("Times New Roman", 13)
button_background = 'Turquoise'
# Initializing the window
root = Tk()
root.title(title)
root.geometry('250x400')
root.resizable(0, 0)
root.config(bg=background)
# Creating and placing the components in the window
Label(root, text=title, font=("Ariel Black", 15), bg=background, wraplength=250).place(x=20, y=0)
Button(root, text='Open a file', width=20, font=button_font, bg=button_background, command=open_file).place(x=30, y=50)
Button(root, text='Copy a file', width=20, font=button_font, bg=button_background, command=copy_file).place(x=30, y=90)
Button(root, text='Rename a file', width=20, font=button_font, bg=button_background, command=rename_file).place(x=30, y=130)
Button(root, text='Delete a file', width=20, font=button_font, bg=button_background, command=delete_file).place(x=30, y=170)
Button(root, text='Open a folder', width=20, font=button_font, bg=button_background, command=open_folder).place(x=30, y=210)
Button(root, text='Delete a folder', width=20, font=button_font, bg=button_background, command=delete_folder).place(x=30, y=250)
Button(root, text='Move a folder', width=20, font=button_font, bg=button_background, command=move_folder).place(x=30, y=290)
Button(root, text='List all files in a folder', width=20, font=button_font, bg=button_background,
command=list_files_in_folder).place(x=30, y=330)
# Finalizing the window
root.update()
root.mainloop()
from tkinter import *
from tkinter import ttk

class Helloapp:
       def __init__(self,master):
           self.label = ttk.Label(master , text ="Hello Everyone")
           self.label.grid(row =0, column =0, columnspan =2)

           ttk.Button(master, text = 'Oregon', command = self.Oregon).grid(row =1 , column =0)
           ttk.Button(master, text = 'California', command = self.California).grid(row =1 , column =1)
       def Oregon(self):
           self.label.config( text = 'Welcome to Oregon')
       def California(self):
           self.label.config( text = 'Welcome to California')
def main():
    root= Tk()
    app = Helloapp(root)
    root.mainloop()
if __name__== "__main__":main()#Python Tkinter and Sqlite3 Login Form
#Made By Namah Jain Form Youtube Channel All About Code
#Please Subscribe To Our Youtube Channel.
#https://www.youtube.com/channel/UCUGAq4ALoWW4PDU6Cm1riSg?view_as=subscriber

#imports
from tkinter import *
from tkinter import messagebox as ms
import sqlite3

# make database and users (if not exists already) table at programme start up
with sqlite3.connect('quit.db') as db:
    c = db.cursor()

c.execute('CREATE TABLE IF NOT EXISTS user (username TEXT NOT NULL PRIMARY KEY,password TEX NOT NULL);')
db.commit()
db.close()

#main Class
class main:
    def __init__(self,master):
    	# Window 
        self.master = master
        # Some Usefull variables
        self.username = StringVar()
        self.password = StringVar()
        self.n_username = StringVar()
        self.n_password = StringVar()
        #Create Widgets
        self.widgets()

    #Login Function
    def login(self):
    	#Establish Connection
        with sqlite3.connect('quit.db') as db:
            c = db.cursor()

        #Find user If there is any take proper action
        find_user = ('SELECT * FROM user WHERE username = ? and password = ?')
        c.execute(find_user,[(self.username.get()),(self.password.get())])
        result = c.fetchall()
        if result:
            self.logf.pack_forget()
            self.head['text'] = self.username.get() + '\n Loged In'
            self.head['pady'] = 150
        else:
            ms.showerror('Oops!','Username Not Found.')
            
    def new_user(self):
    	#Establish Connection
        with sqlite3.connect('quit.db') as db:
            c = db.cursor()

        #Find Existing username if any take proper action
        find_user = ('SELECT username FROM user WHERE username = ?')
        c.execute(find_user,[(self.n_username.get())])        
        if c.fetchall():
            ms.showerror('Error!','Username Taken Try a Diffrent One.')
        else:
            ms.showinfo('Success!','Account Created!')
            self.log()
        #Create New Account 
        insert = 'INSERT INTO user(username,password) VALUES(?,?)'
        c.execute(insert,[(self.n_username.get()),(self.n_password.get())])
        db.commit()

        #Frame Packing Methords
    def log(self):
        self.username.set('')
        self.password.set('')
        self.crf.pack_forget()
        self.head['text'] = 'LOGIN'
        self.logf.pack()
    def cr(self):
        self.n_username.set('')
        self.n_password.set('')
        self.logf.pack_forget()
        self.head['text'] = 'Create Account'
        self.crf.pack()
        
    #Draw Widgets
    def widgets(self):
        self.head = Label(self.master,text = 'LOGIN',font = ('',35),pady = 10)
        self.head.pack()
        self.logf = Frame(self.master,padx =10,pady = 10)
        Label(self.logf,text = 'Username: ',font = ('',20),pady=5,padx=5).grid(sticky = W)
        Entry(self.logf,textvariable = self.username,bd = 5,font = ('',15)).grid(row=0,column=1)
        Label(self.logf,text = 'Password: ',font = ('',20),pady=5,padx=5).grid(sticky = W)
        Entry(self.logf,textvariable = self.password,bd = 5,font = ('',15),show = '*').grid(row=1,column=1)
        Button(self.logf,text = ' Login ',bd = 3 ,font = ('',15),padx=5,pady=5,command=self.login).grid()
        Button(self.logf,text = ' Create Account ',bd = 3 ,font = ('',15),padx=5,pady=5,command=self.cr).grid(row=2,column=1)
        self.logf.pack()
        
        self.crf = Frame(self.master,padx =10,pady = 10)
        Label(self.crf,text = 'Username: ',font = ('',20),pady=5,padx=5).grid(sticky = W)
        Entry(self.crf,textvariable = self.n_username,bd = 5,font = ('',15)).grid(row=0,column=1)
        Label(self.crf,text = 'Password: ',font = ('',20),pady=5,padx=5).grid(sticky = W)
        Entry(self.crf,textvariable = self.n_password,bd = 5,font = ('',15),show = '*').grid(row=1,column=1)
        Button(self.crf,text = 'Create Account',bd = 3 ,font = ('',15),padx=5,pady=5,command=self.new_user).grid()
        Button(self.crf,text = 'Go to Login',bd = 3 ,font = ('',15),padx=5,pady=5,command=self.log).grid(row=2,column=1)

if __name__ == '__main__':
    #Create Object
    #and setup window
    root = Tk()
    root.title('Login Form')
    #root.geometry('400x350+300+300')
    main(root)
    root.mainloop()
from tkinter import *


class AppetiserClass:
    meal1 = 0
    root = Tk()
    app = Frame(self.root)

    def __init__(self):
        self.root.title("Appetiser Page")
        self.root.geometry("1920x1080")

        self.app.grid()

        Label(self.app, text="", width=75, height=20).grid(row=1, column=0, sticky=N)

        self.DisplayButton = Button(self.app, text=self.meal1)
        self.DisplayButton.grid(column=1, row=2, sticky=W)
        self.DisplayButton.config(height=10, width=10)

        self.Plus1Button = Button(self.app, text="+1", command=self.plus1, bg="green")
        self.Plus1Button.grid(column=2, row=2, sticky=W)
        self.Plus1Button.config(height=10, width=10)

        self.Neg1Button = Button(self.app, text="-1", command=self.neg1, bg="green")
        self.Neg1Button.grid(column=3, row=2, sticky=W)
        self.Neg1Button.config(height=10, width=10)

        self.root.mainloop()

    def plus1(self):
        self.meal1 += 1
        self.DisplayButton["text"] = str(self.meal1)

    def neg1(self):
        self.meal1 -= 1
        self.DisplayButton["text"] = str(self.meal1)


if __name__ == "__main__":
    AppetiserClass()
from tkinter import *
from tkinter import ttk

root = Tk()
progress = ttk.Progressbar(root , orient = HORIZONTAL, length = 200)
progress.pack()
progress.config( value = 4.5 , mode ='determinate', max = 11)
scale = ttk.Scale(root, orient = HORIZONTAL , length = 400)
scale.pack()
root.mainloop()
from tkinter import *
from tkinter import ttk

root = Tk()
window = Toplevel(root)
window.title('New window')
#Lower the window
window.lower()
#makes the root window as the first window
window.lift(root)
#makes the window in its maximum size
window.state('zoomed')
#makes the window iconic
window.state('iconic')
# It gives a width and a length plus an x and y position
window.geometry('600*500+100+100')
root.mainloop()from tkinter import *
from tkinter import ttk
root = Tk()
treeview = ttk.Treeview(root)
treeview.pack()
treeview.insert("", "1", "item1",text = "First Item")
treeview.insert("", "2", "item2",text = "Second Item")
treeview.insert("","end","item3",text = "Third Item")
treeview.insert("","end","item4",text = "Fourth Item")
image = PhotoImage(file = "python_logo.gif").subsample(10,10)
treeview.insert("item2", "end", "image", text = "Python3", image=image)
treeview.config( height = "5")
root.mainloop()import tkinter as tk
from tkinter import ttk


# root window
root = tk.Tk()
root.geometry('300x200')
root.resizable(False, False)
root.title('Slider Demo')


root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=3)


# slider current value
current_value = tk.DoubleVar()


def get_current_value():
    return '{: .2f}'.format(current_value.get())


def slider_changed(event):
    value_label.configure(text=get_current_value())


# label for the slider
slider_label = ttk.Label(
    root,
    text='Slider:'
)

slider_label.grid(
    column=0,
    row=0,
    sticky='w'
)

#  slider
slider = ttk.Scale(
    root,
    from_=0,
    to=100,
    orient='horizontal',  # vertical
    command=slider_changed,
    variable=current_value
)

slider.grid(
    column=1,
    row=0,
    sticky='we'
)

# current value label
current_value_label = ttk.Label(
    root,
    text='Current Value:'
)

current_value_label.grid(
    row=1,
    columnspan=2,
    sticky='n',
    ipadx=10,
    ipady=10
)

# value label
value_label = ttk.Label(
    root,
    text=get_current_value()
)
value_label.grid(
    row=2,
    columnspan=2,
    sticky='n'
)


root.mainloop()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("1700x800")


canvas = tk.Canvas(root, height=800, width=1600, background="lavender")
canvas.grid(row=2, column=2)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=2, column=6, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=7)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=2, column=0)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=2, column=1)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=2, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=2, column=3)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=2, column=4)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=2, column=5)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("400x800")


canvas = tk.Canvas(root, height=800, width=100, background="lavender")
canvas.grid(row=0, column=2, rowspan=10)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=1, column=2, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=2)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=3, column=2)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=4, column=2)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=5, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=6, column=2)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=7, column=2)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=9, column=2)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("1700x800")


canvas = tk.Canvas(root, height=800, width=1600, background="lavender")
canvas.grid(row=2, column=2)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=2, column=6, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=7)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=2, column=0)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=2, column=1)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=2, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=2, column=3)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=2, column=4)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=2, column=5)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("400x800")


canvas = tk.Canvas(root, height=800, width=100, background="lavender")
canvas.grid(row=0, column=2, rowspan=10)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=1, column=2, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=2)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=3, column=2)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=4, column=2)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=5, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=6, column=2)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=7, column=2)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=9, column=2)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("1700x800")


canvas = tk.Canvas(root, height=800, width=1600, background="lavender")
canvas.grid(row=2, column=2)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=2, column=6, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=7)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=2, column=0)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=2, column=1)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=2, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=2, column=3)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=2, column=4)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=2, column=5)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("4+00x800")


canvas = tk.Canvas(root, height=800, width=100, background="lavender")
canvas.grid(row=0, column=2, rowspan=10)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=1, column=2, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=2)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=3, column=2)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=4, column=2)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=5, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=6, column=2)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=7, column=2)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=9, column=2)


root.mainlopp()
import tkinter as tk
from tkinter import ttk
import glob
import os
from PIL import *


root = tk.Tk()

root.geometry("1700x800")


canvas = tk.Canvas(root, height=800, width=1600, background="lavender")
canvas.grid(row=2, column=2)


ee1 = ttk.Combobox(canvas, values=["value1", "value2", "values3"])
ee1.grid(row=2, column=6, padx=20, sticky="w")


sp4 = tk.Spinbox(canvas, from_=0, to=100, increment=1)
sp4.grid(row=2, column=7)

btn30 = tk.Button(
    canvas,
    text="Widget type",
    bd=10,
    bg="light blue",
    font=("URW Chancery L", 12, "bold"),
)
btn30.grid(row=2, column=0)
btn31 = tk.Button(
    canvas, text="Tag widget", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn31.grid(row=2, column=1)
btn32 = tk.Button(
    canvas,
    text="Build Widget",
    bd=10,
    bg="lavender",
    font=("URW Chancery L", 12, "bold"),
)
btn32.grid(row=2, column=2)
btn33 = tk.Button(
    canvas, text="bg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn33.grid(row=2, column=3)
btn34 = tk.Button(
    canvas, text="fg color", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn34.grid(row=2, column=4)
btn35 = tk.Button(
    canvas, text="row column", bd=10, bg="lavender", font=("URW Chancery L", 12, "bold")
)
btn35.grid(row=2, column=5)


root.mainlopp()
import tkinter as tk
import tkinter.ttk as ttk

win = tk.Tk()
button_tk = tk.Button(win, text="tk")
button_ttk = ttk.Button(win, text="ttk")

button_tk.pack(padx=10, pady=10)
button_ttk.pack(padx=10, pady=10)

win.mainloop()
import tkinter as tk
import tkinter.font as tkFont


class App:
    def __init__(self, root):
        # setting title
        root.title("undefined")
        # setting window size
        width = 1231
        height = 626
        screenwidth = root.winfo_screenwidth()
        screenheight = root.winfo_screenheight()
        alignstr = "%dx%d+%d+%d" % (
            width,
            height,
            (screenwidth - width) / 2,
            (screenheight - height) / 2,
        )
        root.geometry(alignstr)
        root.resizable(width=False, height=False)

        GListBox_669 = tk.Listbox(root)
        GListBox_669["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_669["font"] = ft
        GListBox_669["fg"] = "#333333"
        GListBox_669["justify"] = "center"
        GListBox_669.place(x=230, y=100, width=197, height=378)

        GButton_940 = tk.Button(root)
        GButton_940["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_940["font"] = ft
        GButton_940["fg"] = "#273134"
        GButton_940["justify"] = "center"
        GButton_940["text"] = "Button"
        GButton_940.place(x=30, y=100, width=70, height=25)
        GButton_940["command"] = self.GButton_940_command

        GButton_472 = tk.Button(root)
        GButton_472["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_472["font"] = ft
        GButton_472["fg"] = "#273134"
        GButton_472["justify"] = "center"
        GButton_472["text"] = "Button"
        GButton_472.place(x=30, y=130, width=70, height=25)
        GButton_472["command"] = self.GButton_472_command

        GButton_205 = tk.Button(root)
        GButton_205["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_205["font"] = ft
        GButton_205["fg"] = "#273134"
        GButton_205["justify"] = "center"
        GButton_205["text"] = "Button"
        GButton_205.place(x=30, y=160, width=70, height=25)
        GButton_205["command"] = self.GButton_205_command

        GButton_751 = tk.Button(root)
        GButton_751["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_751["font"] = ft
        GButton_751["fg"] = "#273134"
        GButton_751["justify"] = "center"
        GButton_751["text"] = "Button"
        GButton_751.place(x=30, y=190, width=70, height=25)
        GButton_751["command"] = self.GButton_751_command

        GButton_705 = tk.Button(root)
        GButton_705["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_705["font"] = ft
        GButton_705["fg"] = "#273134"
        GButton_705["justify"] = "center"
        GButton_705["text"] = "Button"
        GButton_705.place(x=30, y=220, width=70, height=25)
        GButton_705["command"] = self.GButton_705_command

        GButton_182 = tk.Button(root)
        GButton_182["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_182["font"] = ft
        GButton_182["fg"] = "#273134"
        GButton_182["justify"] = "center"
        GButton_182["text"] = "Button"
        GButton_182.place(x=30, y=250, width=70, height=25)
        GButton_182["command"] = self.GButton_182_command

        GButton_304 = tk.Button(root)
        GButton_304["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_304["font"] = ft
        GButton_304["fg"] = "#273134"
        GButton_304["justify"] = "center"
        GButton_304["text"] = "Button"
        GButton_304.place(x=30, y=280, width=70, height=25)
        GButton_304["command"] = self.GButton_304_command

        GListBox_718 = tk.Listbox(root)
        GListBox_718["borderwidth"] = "1px"
        ft = tkFont.Font(family="Times", size=10)
        GListBox_718["font"] = ft
        GListBox_718["fg"] = "#333333"
        GListBox_718["justify"] = "center"
        GListBox_718.place(x=470, y=110, width=219, height=388)

        GButton_229 = tk.Button(root)
        GButton_229["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_229["font"] = ft
        GButton_229["fg"] = "#273134"
        GButton_229["justify"] = "center"
        GButton_229["text"] = "Button"
        GButton_229.place(x=30, y=310, width=70, height=25)
        GButton_229["command"] = self.GButton_229_command

        GButton_588 = tk.Button(root)
        GButton_588["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_588["font"] = ft
        GButton_588["fg"] = "#273134"
        GButton_588["justify"] = "center"
        GButton_588["text"] = "Button"
        GButton_588.place(x=30, y=340, width=70, height=25)
        GButton_588["command"] = self.GButton_588_command

        GButton_449 = tk.Button(root)
        GButton_449["bg"] = "#f7f7f7"
        ft = tkFont.Font(family="Times", size=10)
        GButton_449["font"] = ft
        GButton_449["fg"] = "#273134"
        GButton_449["justify"] = "center"
        GButton_449["text"] = "Button"
        GButton_449.place(x=30, y=370, width=70, height=25)
        GButton_449["command"] = self.GButton_449_command

        GLabel_534 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_534["font"] = ft
        GLabel_534["fg"] = "#333333"
        GLabel_534["justify"] = "center"
        GLabel_534["text"] = "label"
        GLabel_534.place(x=270, y=50, width=70, height=25)

        GLabel_64 = tk.Label(root)
        ft = tkFont.Font(family="Times", size=10)
        GLabel_64["font"] = ft
        GLabel_64["fg"] = "#333333"
        GLabel_64["justify"] = "center"
        GLabel_64["text"] = "label"
        GLabel_64.place(x=530, y=50, width=70, height=25)

    def GButton_940_command(self):
        print("command")

    def GButton_472_command(self):
        print("command")

    def GButton_205_command(self):
        print("command")

    def GButton_751_command(self):
        print("command")

    def GButton_705_command(self):
        print("command")

    def GButton_182_command(self):
        print("command")

    def GButton_304_command(self):
        print("command")

    def GButton_229_command(self):
        print("command")

    def GButton_588_command(self):
        print("command")

    def GButton_449_command(self):
        print("command")


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
from tkinter import *
import tkinter.filedialog as fd
import tkinter.messagebox as mb
import os
import shutil
# Creating the backend functions for python file explorer project
def open_file():
    file = fd.askopenfilename(title='Choose a file of any type', filetypes=[("All files", "*.*")])
    os.startfile(os.path.abspath(file))
def copy_file():
    file_to_copy = fd.askopenfilename(title='Choose a file to copy', filetypes=[("All files", "*.*")])
    dir_to_copy_to = fd.askdirectory(title="In which folder to copy to?")
try:
    shutil.copy(file_to_copy, dir_to_copy_to)
    mb.showinfo(title='File copied!', message='Your desired file has been copied to your desired location')
except:
    mb.showerror(title='Error!', message='We were unable to copy your file to the desired location. Please try again')
def delete_file():
    file = fd.askopenfilename(title='Choose a file to delete', filetypes=[("All files", "*.*")])
    os.remove(os.path.abspath(file))
    mb.showinfo(title='File deleted', message='Your desired file has been deleted')
def rename_file():
    file = fd.askopenfilename(title='Choose a file to rename', filetypes=[("All files", "*.*")])
    rename_wn = Toplevel(root)
    rename_wn.title("Rename the file to")
    rename_wn.geometry("250x70"); rename_wn.resizable(0, 0)
    Label(rename_wn, text='What should be the new name of the file?', font=("Times New Roman", 10)).place(x=0, y=0)
    new_name = Entry(rename_wn, width=40, font=("Times New Roman", 10))
    new_name.place(x=0, y=30)
    new_file_name = os.path.join(os.path.dirname(file), new_name.get()+os.path.splitext(file)[1])
    os.rename(file, new_file_name)
    mb.showinfo(title="File Renamed", message='Your desired file has been renamed')
def open_folder():
    folder = fd.askdirectory(title="Select Folder to open")
    os.startfile(folder)
def delete_folder():
    folder_to_delete = fd.askdirectory(title='Choose a folder to delete')
    os.rmdir(folder_to_delete)
    mb.showinfo("Folder Deleted", "Your desired folder has been deleted")
def move_folder():
    folder_to_move = fd.askdirectory(title='Select the folder you want to move')
    mb.showinfo(message='You just selected the folder to move, now please select the desired destination where you want to move the folder to')
    destination = fd.askdirectory(title='Where to move the folder to')
try:
    shutil.move(folder_to_move, destination)
    mb.showinfo("Folder moved", 'Your desired folder has been moved to the location you wanted')
except:
    mb.showerror('Error', 'We could not move your folder. Please make sure that the destination exists')
def list_files_in_folder():
    i = 0
    folder = fd.askdirectory(title='Select the folder whose files you want to list')
    files = os.listdir(os.path.abspath(folder))
    list_files_wn = Toplevel(root)
    list_files_wn.title(f'Files in {folder}')
    list_files_wn.geometry('250x250')
    list_files_wn.resizable(0, 0)
    listbox = Listbox(list_files_wn, selectbackground='SteelBlue', font=("Georgia", 10))
    listbox.place(relx=0, rely=0, relheight=1, relwidth=1)
    scrollbar = Scrollbar(listbox, orient=VERTICAL, command=listbox.yview)
    scrollbar.pack(side=RIGHT, fill=Y)
    listbox.config(yscrollcommand=scrollbar.set)
    while i < len(files):
        listbox.insert(END, files[i])
        i += 1
# Defining the variables
title = 'DataFlair File Manager'
background = 'Yellow'
button_font = ("Times New Roman", 13)
button_background = 'Turquoise'

# Initializing the window
root = Tk()
root.title(title)
root.geometry('250x400')
root.resizable(0, 0)
root.config(bg=background)
# Creating and placing the components in the window
Label(root, text=title, font=("Comic Sans MS", 15), bg=background, wraplength=250).place(x=20, y=0)
Button(root, text='Open a file', width=20, font=button_font, bg=button_background, command=open_file).place(x=30, y=50)
Button(root, text='Copy a file', width=20, font=button_font, bg=button_background, command=copy_file).place(x=30, y=90)
Button(root, text='Rename a file', width=20, font=button_font, bg=button_background, command=rename_file).place(x=30, y=130)
Button(root, text='Delete a file', width=20, font=button_font, bg=button_background, command=delete_file).place(x=30, y=170)
Button(root, text='Open a folder', width=20, font=button_font, bg=button_background, command=open_folder).place(x=30, y=210)
Button(root, text='Delete a folder', width=20, font=button_font, bg=button_background, command=delete_folder).place(x=30, y=250)
Button(root, text='Move a folder', width=20, font=button_font, bg=button_background, command=move_folder).place(x=30, y=290)
Button(root, text='List all files in a folder', width=20, font=button_font, bg=button_background,
command=list_files_in_folder).place(x=30, y=330)
# Finalizing the window
root.update()
root.mainloop()
   
 1 from Tkinter import *
 2 
 3 field_value = "Field value to output"  # returned from another part of the code
 4 
 5 # triggered off left button click on text_field
 6 def copy_text_to_clipboard(event):
 7    field_value = event.widget.get("1.0", 'end-1c')  # get field value from event, but remove line return at end
 8    window.clipboard_clear()  # clear clipboard contents
 9    window.clipboard_append(field_value)  # append new value to clipbaord
10 
11 window = Tk()
12     
13 # setup frame and grid
14 frame = Frame(window)
15 frame.grid()
16 
17 # setup our inline label and widget
18 Label(frame, text="Field Label").grid(row=0, column=0)
19 text_field = Text(frame, height=1, borderwidth=0)
20 text_field.insert(1.0, field_value)
21 text_field.grid(row=0, column=1)
22 
23 # Bind left click on text widget to copy_text_to_clipboard() function
24 text_field.bind("<Button-1>", copy_text_to_clipboard)  
25 window.mainloop()
from tkinter import *
from tkinter import messagebox

special_ch = [
    "~",
    "`",
    "!",
    "@",
    "#",
    "$",
    "%",
    "^",
    "&",
    "*",
    "(",
    ")",
    "-",
    "_",
    "+",
    "=",
    "{",
    "}",
    "[",
    "]",
    "|",
    "\\",
    "/",
    ":",
    ";",
    '"',
    "'",
    "<",
    ">",
    ",",
    ".",
    "?",
]


def validation():
    password = pwd.get()
    msg = ""  # turn off validation.

    if len(password) == 0:
        msg = "Password can't be empty"
    else:
        try:
            if not any(ch in special_ch for ch in password):
                msg = "Atleast 1 special character required!"
            elif not any(ch.isupper() for ch in password):
                msg = "Atleast 1 uppercase character required!"
            elif not any(ch.islower() for ch in password):
                msg = "Atleast 1 lowercase character required!"
            elif not any(ch.isdigit() for ch in password):
                msg = "Atleast 1 number required!"
            elif len(password) < 8:
                msg = "Password must be minimum of 8 characters!"
            else:
                msg = "Success!"
        except Exception as ep:
            messagebox.showerror("error", ep)
    messagebox.showinfo("message", msg)


root = Tk()
root.title("jh app")
root.geometry("500x200")
root.config(bg="azure")


frame = Frame(root, bg="seashell", padx=10, pady=10)
frame.pack(pady=30)

Label(frame, bg="plum", text="Password", font=("sans-serif", 14)).grid(
    row=0, column=0, padx=(0, 10)
)

pwd = Entry(frame, font=("sans-serif", 14), show="*")
pwd.grid(row=0, column=1)

submit = Button(
    frame, text="Submit", width=20, font=("sans-serif", 12), command=validation, pady=10
)
submit.grid(row=1, columnspan=2, pady=20)

root.mainloop()
from tkinter import *

root = Tk()
root.title("Variable Widget Association Demo")

bgColor = "#EDEDED"

# Widget Variable dictionary
Values = {}


def Submit():
    print("\nThe user clicked the 'Submit' button.")

    # Without using variable
    print("Text box content: ", inp.get())

    for key, value in Values.items():
        # print(key, value)
        if key == "BoxSync":
            if value.get() == 1:
                print("User ENABLED BoxSync")
            else:
                print("User DISABLED BoxSync")

        if key == "CrashPlan":
            if value.get() == 1:
                print("User ENABLED CrashPlan")
            else:
                print("User DISABLED CrashPlan")

        if key == "inp":
            print("Entry value: ", value.get())


# Event callbacks
def cb_1(*args):
    print("BoxSync was updated to [{}]".format(Values["BoxSync"].get()))


def cb_2(*args):
    print("CrashPlan was updated [{}]".format(Values["CrashPlan"].get()))


def cb_3(*args):
    print("Text field was updated to [{}]".format(Values["inp"].get()))


Values["BoxSync"] = BooleanVar()
Values["BoxSync"].trace("w", cb_1)
ck1 = Checkbutton(
    root,
    text="Box Sync",
    font=("Helvetica Neue", 14),
    variable=Values["BoxSync"],
    bg=bgColor,
).grid(row=1, column=2, sticky="w")

Values["CrashPlan"] = BooleanVar()
Values["CrashPlan"].trace("w", cb_2)
ck2 = Checkbutton(
    root,
    text="CrashPlan",
    font=("Helvetica Neue", 14),
    variable=Values["CrashPlan"],
    bg=bgColor,
).grid(row=1, column=3, columnspan=2, padx=(0, 10), sticky="w")

Values["inp"] = StringVar()
Values["inp"].trace("w", cb_3)
inp = Entry(root, textvariable=Values["inp"])
inp.grid(row=2)

btnSubmit = Button(root, text="Submit", command=Submit)
btnSubmit.grid(row=3, column=0)

root.mainloop()
from tkinter import *

from random import *


window = Tk()

window.title("Resistor Divider with Load Resistor")


def create_grid(window):

    width = 1800

    height = 1000

    canvas = Canvas(window, background="white", width=width, height=height)

    for line in range(0, width, 10):  # range(start, stop, step)

        canvas.create_line(
            [(line, 0), (line, height)], fill="black", tags="grid_line_w"
        )

    for line in range(0, height, 10):

        canvas.create_line([(0, line), (width, line)], fill="black", tags="grid_line_h")

    canvas.grid(row=0, column=0)

    line = canvas.create_line(180, 70, 180, 90, fill="black", width=7)

    line2 = canvas.create_line(180, 90, 180, 120, fill="black", width=7)

    line3 = canvas.create_line(180, 120, 220, 140, fill="black", width=7)

    line4 = canvas.create_line(220, 140, 180, 160, fill="black", width=7)

    line5 = canvas.create_line(180, 160, 220, 180, fill="black", width=7)

    line6 = canvas.create_line(220, 180, 180, 200, fill="black", width=7)

    line7 = canvas.create_line(180, 200, 220, 220, fill="black", width=7)

    line8 = canvas.create_line(220, 220, 180, 240, fill="black", width=7)

    line9 = canvas.create_line(180, 350, 430, 350, fill="black", width=7)

    ine1 = canvas.create_line(220, 370, 220, 370, fill="black", width=7)

    ine2 = canvas.create_line(180, 370, 180, 400, fill="black", width=7)

    ine3 = canvas.create_line(180, 400, 220, 420, fill="black", width=7)

    ine4 = canvas.create_line(220, 420, 180, 440, fill="black", width=7)

    ine5 = canvas.create_line(180, 440, 220, 460, fill="black", width=7)

    ine6 = canvas.create_line(220, 460, 180, 480, fill="black", width=7)

    ine7 = canvas.create_line(180, 480, 220, 500, fill="black", width=7)

    ine8 = canvas.create_line(220, 500, 180, 520, fill="black", width=7)

    ine9 = canvas.create_line(180, 520, 180, 600, fill="black", width=7)

    line11 = canvas.create_line(100, 600, 260, 600, fill="black", width=7)

    line12 = canvas.create_line(150, 620, 210, 620, fill="black", width=7)

    line13 = canvas.create_line(170, 640, 190, 640, fill="black", width=7)

    line14 = canvas.create_line(220, 140, 180, 160, fill="black", width=7)

    line15 = canvas.create_line(180, 160, 220, 180, fill="black", width=7)

    line16 = canvas.create_line(220, 180, 180, 200, fill="black", width=7)

    line17 = canvas.create_line(180, 200, 220, 220, fill="black", width=7)

    line18 = canvas.create_line(220, 220, 180, 240, fill="black", width=7)

    line19 = canvas.create_line(180, 240, 180, 370, fill="black", width=7)

    ne1 = canvas.create_line(430, 350, 430, 370, fill="black", width=7)

    ne2 = canvas.create_line(430, 370, 430, 400, fill="black", width=7)

    ne3 = canvas.create_line(430, 400, 470, 420, fill="black", width=7)

    ne4 = canvas.create_line(470, 420, 430, 440, fill="black", width=7)

    ine5 = canvas.create_line(430, 440, 470, 460, fill="black", width=7)

    ine6 = canvas.create_line(470, 460, 430, 480, fill="black", width=7)

    ine7 = canvas.create_line(430, 480, 470, 500, fill="black", width=7)

    ine8 = canvas.create_line(470, 500, 430, 520, fill="black", width=7)

    ine9 = canvas.create_line(430, 520, 430, 600, fill="black", width=7)

    gnd21 = canvas.create_line(350, 600, 520, 600, fill="black", width=7)

    gnd22 = canvas.create_line(400, 620, 460, 620, fill="black", width=7)

    gnd23 = canvas.create_line(420, 640, 440, 640, fill="black", width=7)
























    line4h = canvas.create_line(680,160, 680,190 , fill ='black', width = 7)



    line5j = canvas.create_line(680,190, 680,210, fill ='black', width = 7)



    line6k = canvas.create_line(680,210, 680,240, fill ='black', width = 7)



    line7l = canvas.create_line(680,240, 680,270, fill ='black', width = 7)





    line8 = canvas.create_line(720,270, 640,270 , fill ='black', width = 7)



    line9 = canvas.create_line(680,300, 680,350 , fill ='black', width = 7)

    line8 = canvas.create_line(640,300, 720,300 , fill ='black', width = 7)



    line93 = canvas.create_line(680,350, 680,470 , fill ='black', width = 7)



    line444 =canvas.create_line(55, 85, 155, 85, 105, 180, 55, 85, fill ='black', width = 7)



    line434 =canvas.create_line(655, 585, 755, 585, 605, 680, 655, 585, fill ='black', width = 7)



    line4e4 =canvas.create_line(355, 485, 455, 585, 505, 480, 455, 485, fill ='black', width = 7)





    line344 =canvas.create_line(755, 785, 655, 785, 605, 680, 755, 785, fill ='black', width = 7)






create_grid(window)

window.mainloop()
# Calculator
import math
from tkinter import *

w = Tk()
w.geometry("500x500")
w.title("Calculatorax")
w.configure(bg="#03befc")

# Functions(Keypad)
def calc1():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn1["text"]
    txt1.insert(0, b1)


def calc2():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn2["text"]
    txt1.insert(0, b1)


def calc3():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn3["text"]
    txt1.insert(0, b1)


def calc4():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn4["text"]
    txt1.insert(0, b1)


def calc5():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn5["text"]
    txt1.insert(0, b1)


def calc6():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn6["text"]
    txt1.insert(0, b1)


def calc7():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn7["text"]
    txt1.insert(0, b1)


def calc8():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn8["text"]
    txt1.insert(0, b1)


def calc9():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn9["text"]
    txt1.insert(0, b1)


def calc0():
    b = txt1.get()
    txt1.delete(0, END)
    b1 = b + btn0["text"]
    txt1.insert(0, b1)


# Functions(operators)

x = 0


def add():
    global x
    add.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 1


def subtract():
    global x
    subtract.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 2


def get():
    b = txt1.get()


def equals():
    global x
    if x == 1:
        c = (eval(txt1.get())) + add.b
        cls()
        txt1.insert(0, c)

    elif x == 2:
        c = subtract.b - (eval(txt1.get()))
        cls()
        txt1.insert(0, c)

    elif x == 3:
        c = multiply.b * (eval(txt1.get()))
        cls()
        txt1.insert(0, c)
    elif x == 4:
        c = divide.b
        cls()
        txt1.insert(0, c)


def cls():
    global x
    x = 0
    txt1.delete(0, END)


def multiply():
    global x
    multiply.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 3


def divide():
    global x
    divide.b = eval(txt1.get())
    txt1.delete(0, END)
    x = x + 4


def sin():
    global x
    math.sin(eval(txt1.get()))


fr = Frame(w)
fr.grid(row=7, column=1)


# Labels

lbl1 = Label(
    w, text="JH Calc", font=("Times New Roman", 35), fg="#232226", bg="#fc9d03"
)

# Entryboxes
txt1 = Entry(w, width=10, font=30)

# Buttons

btn1 = Button(fr, text="1", font=("Unispace", 25), command=calc1, bg="#c3c6d9")
btn2 = Button(fr, text="2", font=("Unispace", 25), command=calc2, bg="#c3c6d9")
btn3 = Button(fr, text="3", font=("Unispace", 25), command=calc3, bg="#c3c6d9")
btn4 = Button(fr, text="4", font=("Unispace", 25), command=calc4, bg="#c3c6d9")
btn5 = Button(fr, text="5", font=("Unispace", 25), command=calc5, bg="#c3c6d9")
btn6 = Button(fr, text="6", font=("Unispace", 25), command=calc6, bg="#c3c6d9")
btn7 = Button(fr, text="7", font=("Unispace", 25), command=calc7, bg="#c3c6d9")
btn8 = Button(fr, text="8", font=("Unispace", 25), command=calc8, bg="#c3c6d9")
btn9 = Button(fr, text="9", font=("Unispace", 25), command=calc9, bg="#c3c6d9")
btn0 = Button(fr, text="0", font=("Unispace", 25), command=calc0, bg="#c3c6d9")

btn_addition = Button(fr, text="+", font=("Unispace", 26), command=add, bg="#3954ed")
btn_equals = Button(
    fr,
    text="ANS",
    font=(
        "Unispace",
        24,
    ),
    command=equals,
    bg="#e876e6",
)
btn_clear = Button(
    fr,
    text="Clear",
    font=(
        "Unispace",
        24,
    ),
    command=cls,
    bg="#e876e6",
)
btn_subtract = Button(
    fr, text="-", font=("Unispace", 26), command=subtract, bg="#3954ed"
)
btn_multiplication = Button(
    fr, text="x", font=("Unispace", 26), command=multiply, bg="#3954ed"
)
btn_division = Button(fr, text="÷", font=("Unispace", 26), command=divide, bg="#3954ed")

# grid(row=1, column=1)ments(Labels)

lbl1.grid(row=1, column=4)

# grid(row=1, column=1)ments(entrybox)

txt1.grid(row=1, column=2)

# grid(row=1, column=1)ments(Buttons)
btn1.grid(row=10, column=1)
btn2.grid(row=10, column=2)
btn3.grid(row=10, column=3)
btn4.grid(row=9, column=1)
btn5.grid(row=9, column=2)
btn6.grid(row=9, column=3)
btn7.grid(row=8, column=1)
btn8.grid(row=8, column=2)
btn9.grid(row=8, column=3)
btn0.grid(row=11, column=2)

btn_addition.grid(row=10, column=4)
btn_equals.grid(row=12, column=4)
btn_clear.grid(row=11, column=4)
btn_subtract.grid(row=9, column=4)
btn_multiplication.grid(row=8, column=4)
btn_division.grid(row=8, column=4)

w.mainloop()
import tkinter as tk

app = tk.Tk()
app.title("My App")
app.geometry("150x75")

panedwindow = tk.PanedWindow(showhandle=True,sashrelief=tk.SUNKEN)

leftLabel = tk.Label(panedwindow, text="Left Label")
panedwindow.add(leftLabel)

rightLabel = tk.Label(panedwindow, text="Right Pane")
panedwindow.add(rightLabel)

panedwindow.pack(fill=tk.BOTH, expand=True)

app.mainloop()
from tkinter import *
from tkinter.ttk import *
window = Tk()

window.title("Welcome to LikeGeeks app")

lbl = Label(window, text="Hello")
window.geometry('350x200')
lbl.grid(column=0, row=0)

window.mainloop()
# big and bold
lbl = Label(window, text="Hello", font=("Arial Bold", 50))








window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

combo = Combobox(window)

combo['values']= (1, 2, 3, 4, 5, "Text")

combo.current(1) #set the selected item

combo.grid(column=0, row=0)

window.mainloop()

from tkinter import *

from tkinter.ttk import *

window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

chk_state = BooleanVar()

chk_state.set(True) #set check state

chk = Checkbutton(window, text='Choose', var=chk_state)

chk.grid(column=0, row=0)
#chk_state = IntVar()

#chk_state.set(0) #uncheck

#chk_state.set(1) #check
from tkinter import *

from tkinter.ttk import *

window = Tk()

window.title("Welcome to LikeGeeks app")

window.geometry('350x200')

rad1 = Radiobutton(window,text='First', value=1)

rad2 = Radiobutton(window,text='Second', value=2)

rad3 = Radiobutton(window,text='Third', value=3)

rad1.grid(column=0, row=0)

rad2.grid(column=1, row=0)

rad3.grid(column=2, row=0)

window.mainloop()
window.mainloop()
from tkinter import *

window = Tk()

window.title("Welcome to LikeGeeks app")

lbl = Label(window, text="Hello")
window.geometry('350x200')
lbl.grid(column=0, row=0)

window.mainloop()
# big and bold
lbl = Label(window, text="Hello", font=("Arial Bold", 50))

